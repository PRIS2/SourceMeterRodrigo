<?xml version="1.0" encoding="UTF-8"?>
<pmd xmlns="http://pmd.sourceforge.net/report/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/report/2.0.0 http://pmd.sourceforge.net/report_2_0_0.xsd" version="6.32.0" timestamp="2022-05-10T09:21:10.817">
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/AntClassLoader.java">
<violation beginline="129" endline="131" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader$ResourceEnumeration" method="hasMoreElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'hasMoreElements()' is missing an @Override annotation.
</violation>
<violation beginline="138" endline="145" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader$ResourceEnumeration" method="nextElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'nextElement()' is missing an @Override annotation.
</violation>
<violation beginline="160" endline="163" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader$ResourceEnumeration" method="findNextResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="172" endline="172" begincolumn="26" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="177" endline="177" begincolumn="26" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="183" endline="183" begincolumn="19" endcolumn="30" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="183" endline="183" begincolumn="19" endcolumn="67" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="188" endline="188" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="194" endline="194" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="201" endline="201" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="201" endline="201" begincolumn="19" endcolumn="65" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="201" endline="201" begincolumn="55" endcolumn="62" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="208" endline="208" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="208" endline="208" begincolumn="19" endcolumn="65" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="208" endline="208" begincolumn="55" endcolumn="62" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="216" endline="216" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="AntClassLoader" variable="ignoreBase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreBase'
</violation>
<violation beginline="216" endline="216" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="221" endline="221" begincolumn="25" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="AntClassLoader" variable="parent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parent'
</violation>
<violation beginline="221" endline="221" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="226" endline="226" begincolumn="13" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="226" endline="226" begincolumn="13" endcolumn="66" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="229" endline="230" begincolumn="20" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="236" endline="236" begincolumn="25" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="AntClassLoader" variable="savedContextLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'savedContextLoader'
</violation>
<violation beginline="236" endline="236" begincolumn="13" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="241" endline="241" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="AntClassLoader" variable="isContextLoaderSaved" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isContextLoaderSaved'
</violation>
<violation beginline="241" endline="241" begincolumn="13" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="253" endline="253" begincolumn="9" endcolumn="25" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setParent' called during object construction
</violation>
<violation beginline="254" endline="254" begincolumn="9" endcolumn="31" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setClassPath' called during object construction
</violation>
<violation beginline="255" endline="255" begincolumn="9" endcolumn="27" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setProject' called during object construction
</violation>
<violation beginline="278" endline="278" begincolumn="9" endcolumn="27" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setProject' called during object construction
</violation>
<violation beginline="279" endline="279" begincolumn="9" endcolumn="31" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setClassPath' called during object construction
</violation>
<violation beginline="302" endline="302" begincolumn="13" endcolumn="29" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setParent' called during object construction
</violation>
<violation beginline="305" endline="305" begincolumn="9" endcolumn="26" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'addJavaLibraries' called during object construction
</violation>
<violation beginline="339" endline="339" begincolumn="9" endcolumn="25" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="AntClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setParent' called during object construction
</violation>
<violation beginline="369" endline="372" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="setClassPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="411" endline="411" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="425" endline="425" begincolumn="25" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="setThreadContextLoader" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="455" endline="455" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="AntClassLoader" method="addPathElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="521" endline="521" begincolumn="22" endcolumn="60" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="addPathFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="562" endline="564" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="AntClassLoader" method="setIsolated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="586" endline="606" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="AntClassLoader" method="initializeClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="592" endline="592" begincolumn="32" endcolumn="40" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="AntClassLoader" method="initializeClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="592" endline="605" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="initializeClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="706" endline="706" begincolumn="19" endcolumn="46" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="getResourceAsStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " loaded from parent loader" appears 5 times in this file; the first occurrence is on line 706
</violation>
<violation beginline="708" endline="708" begincolumn="13" endcolumn="47" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="getResourceAsStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'resourceStream' is reassigned, but the original instance is not closed
</violation>
<violation beginline="777" endline="777" begincolumn="21" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="getResourceStream" variable="jarFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="800" endline="800" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="AntClassLoader" method="getResourceStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="986" endline="986" begincolumn="21" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="getResourceURL" variable="jarFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="1023" endline="1023" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="AntClassLoader" method="getResourceURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1052" endline="1088" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="AntClassLoader" method="loadClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1065" endline="1065" begincolumn="21" endcolumn="28" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="loadClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Class " appears 4 times in this file; the first occurrence is on line 1,065
</violation>
<violation beginline="1177" endline="1177" begincolumn="23" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="getJarManifest" variable="jarFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="1197" endline="1197" begincolumn="23" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="getCertificates" variable="jarFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="1262" endline="1264" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="definePackage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1287" endline="1287" begincolumn="29" endcolumn="45" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="AntClassLoader" method="getClassFromStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1289" endline="1289" begincolumn="25" endcolumn="26" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="getClassFromStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'bytesRead' is never used (overwritten on line 1292)
</violation>
<violation beginline="1292" endline="1292" begincolumn="16" endcolumn="70" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="getClassFromStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1344" endline="1344" begincolumn="25" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="findClassInComponents" variable="stream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="1345" endline="1360" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="findClassInComponents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1352" endline="1354" begincolumn="15" endcolumn="13" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant" class="AntClassLoader" method="findClassInComponents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="1388" endline="1397" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="AntClassLoader" method="cleanup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1389" endline="1389" begincolumn="28" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="AntClassLoader" method="cleanup" variable="jarFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="1415" endline="1417" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="buildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1425" endline="1427" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1438" endline="1442" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="subBuildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'subBuildFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1451" endline="1453" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="subBuildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'subBuildStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1460" endline="1462" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1469" endline="1471" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1478" endline="1480" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'taskStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1487" endline="1489" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'taskFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1496" endline="1498" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'messageLogged(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="1524" endline="1526" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'close()' is missing an @Override annotation.
</violation>
<violation beginline="1544" endline="1544" begincolumn="26" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1545" endline="1546" begincolumn="26" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="AntClassLoader" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1563" endline="1563" begincolumn="32" endcolumn="32" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="readFully" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'x' is never used (overwritten on line 1565)
</violation>
<violation beginline="1563" endline="1563" begincolumn="13" endcolumn="32" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant" class="AntClassLoader" method="readFully" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/AntTypeDefinition.java">
<violation beginline="41" endline="41" begincolumn="25" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="AntTypeDefinition" variable="restrict" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'restrict'
</violation>
<violation beginline="267" endline="268" begincolumn="13" endcolumn="69" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="AntTypeDefinition" method="createAndSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="268" endline="268" begincolumn="17" endcolumn="40" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant" class="AntTypeDefinition" method="createAndSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Could not create type " appears 5 times in this file; the first occurrence is on line 268
</violation>
<violation beginline="274" endline="275" begincolumn="13" endcolumn="79" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="AntTypeDefinition" method="createAndSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="277" endline="278" begincolumn="13" endcolumn="68" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="AntTypeDefinition" method="createAndSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="280" endline="281" begincolumn="13" endcolumn="80" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="AntTypeDefinition" method="createAndSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="282" endline="285" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant" class="AntTypeDefinition" method="createAndSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="306" endline="306" begincolumn="25" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="AntTypeDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'noArg' is never used (overwritten on lines 311 and 315)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ArgumentProcessorRegistry.java">
<violation beginline="47" endline="167" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="59" endline="59" begincolumn="37" endcolumn="46" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" variable="processors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'processors' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="85" endline="85" begincolumn="25" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="collectArgumentProcessors" variable="systemResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="90" endline="90" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="collectArgumentProcessors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="91" endline="91" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="collectArgumentProcessors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="101" endline="101" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="registerArgumentProcessor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="107" endline="107" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="registerArgumentProcessor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="127" endline="127" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="getProcessor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="142" endline="142" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="registerArgumentProcessor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="149" endline="149" begincolumn="27" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="getProcessorByService" variable="isr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStreamReader object are closed after use
</violation>
<violation beginline="150" endline="163" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="getProcessorByService" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="156" endline="156" begincolumn="28" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="ArgumentProcessorRegistry" method="getProcessorByService" variable="rd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStreamReader object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/BuildEvent.java">
<violation beginline="30" endline="203" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant" class="BuildEvent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'BuildEvent' is suspected to be a Data Class (WOC=9.091%, NOPA=0, NOAM=7, WMC=11)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/BuildException.java">
<violation beginline="144" endline="146" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="BuildException" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ComponentHelper.java">
<violation beginline="66" endline="66" begincolumn="19" endcolumn="54" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="69" endline="69" begincolumn="19" endcolumn="45" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="75" endline="75" begincolumn="19" endcolumn="45" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="81" endline="81" begincolumn="19" endcolumn="33" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'HashSet'; use the interface instead
</violation>
<violation beginline="87" endline="87" begincolumn="27" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="ComponentHelper" variable="antLibStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'antLibStack' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="90" endline="90" begincolumn="20" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="ComponentHelper" variable="antLibCurrentUri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'antLibCurrentUri'
</violation>
<violation beginline="165" endline="166" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant" class="ComponentHelper" method="ComponentHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="198" endline="202" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="ComponentHelper" method="getCheckedNamespace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="264" endline="264" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ComponentHelper" method="createComponent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="366" endline="366" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ComponentHelper" method="checkTaskClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="384" endline="384" begincolumn="13" endcolumn="46" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="checkTaskClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="399" endline="399" begincolumn="12" endcolumn="38" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="getTaskDefinitions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="423" endline="423" begincolumn="12" endcolumn="38" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="getDataTypeDefinitions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="497" endline="497" begincolumn="12" endcolumn="47" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="getAntTypeTable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="515" endline="515" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ComponentHelper" method="createTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="538" endline="538" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ComponentHelper" method="createNewTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="573" endline="573" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ComponentHelper" method="createDataType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="633" endline="633" begincolumn="49" endcolumn="49" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="getElementName" variable="p" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'p'
</violation>
<violation beginline="678" endline="678" begincolumn="40" endcolumn="43" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="updateRestrictedDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'list' is never used (overwritten on line 680)
</violation>
<violation beginline="763" endline="763" begincolumn="52" endcolumn="62" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="getClassLoader" variable="classLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'classLoader'
</violation>
<violation beginline="781" endline="804" begincolumn="33" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="ComponentHelper" method="getDefaultDefinitions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="782" endline="782" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ComponentHelper" method="getDefaultDefinitions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="788" endline="788" begincolumn="25" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="ComponentHelper" method="getDefaultDefinitions" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="789" endline="801" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="getDefaultDefinitions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="827" endline="859" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="ComponentHelper" method="checkNamespace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="891" endline="891" begincolumn="9" endcolumn="35" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant" class="ComponentHelper" method="diagnoseCreationFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="892" endline="892" begincolumn="9" endcolumn="42" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant" class="ComponentHelper" method="diagnoseCreationFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="911" endline="911" begincolumn="27" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="ComponentHelper" method="diagnoseCreationFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'definitions' is never used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DefaultLogger.java">
<violation beginline="66" endline="66" begincolumn="23" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DefaultLogger" variable="emacsMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'emacsMode'
</violation>
<violation beginline="73" endline="74" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant" class="DefaultLogger" method="DefaultLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="73" endline="74" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant" class="DefaultLogger" method="DefaultLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="92" endline="94" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="setMessageOutputLevel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setMessageOutputLevel(int)' is missing an @Override annotation.
</violation>
<violation beginline="102" endline="104" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="setOutputPrintStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setOutputPrintStream(PrintStream)' is missing an @Override annotation.
</violation>
<violation beginline="112" endline="114" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="setErrorPrintStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setErrorPrintStream(PrintStream)' is missing an @Override annotation.
</violation>
<violation beginline="122" endline="124" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="setEmacsMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setEmacsMode(boolean)' is missing an @Override annotation.
</violation>
<violation beginline="131" endline="133" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="buildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="135" endline="135" begincolumn="60" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="throwableMessage" variable="error" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'error'
</violation>
<violation beginline="135" endline="155" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="DefaultLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="144" endline="144" begincolumn="35" endcolumn="63" rule="InefficientStringBuffering" ruleset="Performance" package="org.apache.tools.ant" class="DefaultLogger" method="throwableMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#inefficientstringbuffering" priority="3">
Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
</violation>
<violation beginline="165" endline="184" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="211" endline="218" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="225" endline="226" begincolumn="50" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="DefaultLogger" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="225" endline="226" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="233" endline="234" begincolumn="47" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="DefaultLogger" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="233" endline="234" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'taskStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="241" endline="242" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="DefaultLogger" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="241" endline="242" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'taskFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="252" endline="292" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="DefaultLogger" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'messageLogged(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="329" endline="330" begincolumn="40" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="DefaultLogger" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DemuxInputStream.java">
<violation beginline="37" endline="37" begincolumn="21" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="DemuxInputStream" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'project' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DemuxOutputStream.java">
<violation beginline="51" endline="51" begincolumn="26" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DemuxOutputStream$BufferInfo" variable="crSeen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'crSeen'
</violation>
<violation beginline="55" endline="55" begincolumn="26" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="DemuxOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="58" endline="58" begincolumn="26" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="DemuxOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="61" endline="61" begincolumn="26" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="DemuxOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="64" endline="64" begincolumn="26" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="DemuxOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="74" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="DemuxOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="67" endline="67" begincolumn="45" endcolumn="51" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="DemuxOutputStream" variable="buffers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'buffers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="72" endline="72" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="DemuxOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="72" endline="72" begincolumn="21" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="DemuxOutputStream" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'project' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="77" endline="77" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="DemuxOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="77" endline="77" begincolumn="21" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="DemuxOutputStream" variable="isErrorStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'isErrorStream' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/Diagnostics.java">
<violation beginline="60" endline="60" begincolumn="48" endcolumn="52" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant" class="Diagnostics" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 10000 should separate every third digit with an underscore
</violation>
<violation beginline="76" endline="77" begincolumn="28" endcolumn="70" rule="AvoidProtectedFieldInFinalClass" ruleset="Code Style" package="org.apache.tools.ant" class="Diagnostics" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass" priority="3">
Avoid protected fields in a final class.  Change to private or package access.
</violation>
<violation beginline="99" endline="99" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Diagnostics" method="validateVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="99" endline="100" begincolumn="64" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="Diagnostics" method="validateVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="187" endline="187" begincolumn="45" endcolumn="48" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Diagnostics" method="getSAXParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'saxParserFactory' is never used (overwritten on line 189)
</violation>
<violation beginline="190" endline="190" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Diagnostics" method="getSAXParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="198" endline="198" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Diagnostics" method="getSAXParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="214" endline="214" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Diagnostics" method="getXSLTProcessor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="276" endline="277" begincolumn="59" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="Diagnostics" method="ignoreThrowable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="351" endline="351" begincolumn="31" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Diagnostics" method="doReportSystemProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'sysprops' is never used (overwritten on line 353)
</violation>
<violation beginline="454" endline="456" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant" class="Diagnostics" method="doReportWhich" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="473" endline="473" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Diagnostics" method="doReportTasksAvailability" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="530" endline="530" begincolumn="84" endcolumn="93" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Diagnostics" method="printParserInfo" variable="parserName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'parserName'
</violation>
<violation beginline="531" endline="531" begincolumn="20" endcolumn="33" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Diagnostics" method="printParserInfo" variable="parserLocation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'parserLocation'
</violation>
<violation beginline="563" endline="563" begincolumn="22" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Diagnostics" method="doReportTempDir" variable="fileout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="564" endline="564" begincolumn="21" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Diagnostics" method="doReportTempDir" variable="filein" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="565" endline="617" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant" class="Diagnostics" method="doReportTempDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="580" endline="580" begincolumn="24" endcolumn="24" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Diagnostics" method="doReportTempDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'read' is never used (overwritten on line 581)
</violation>
<violation beginline="581" endline="581" begincolumn="20" endcolumn="64" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant" class="Diagnostics" method="doReportTempDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DirectoryScanner.java">
<violation beginline="254" endline="254" begincolumn="30" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" variable="selectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'selectors'
</violation>
<violation beginline="260" endline="260" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="263" endline="263" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="269" endline="269" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="275" endline="275" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="278" endline="278" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="284" endline="284" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="290" endline="290" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="296" endline="296" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="299" endline="299" begincolumn="23" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" variable="haveSlowResults" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haveSlowResults'
</violation>
<violation beginline="305" endline="305" begincolumn="15" endcolumn="45" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant" class="DirectoryScanner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field isCaseSensitive has the same name as a method
</violation>
<violation beginline="390" endline="390" begincolumn="21" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" variable="areNonPatternSetsReady" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'areNonPatternSetsReady'
</violation>
<violation beginline="397" endline="397" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" variable="scanning" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'scanning'
</violation>
<violation beginline="411" endline="411" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" variable="slowScanning" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'slowScanning'
</violation>
<violation beginline="425" endline="425" begincolumn="35" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" variable="illegal" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'illegal'
</violation>
<violation beginline="573" endline="574" begincolumn="20" endcolumn="74" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getDefaultExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="645" endline="647" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="setBasedir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="656" endline="658" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getBasedir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="666" endline="668" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="isCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="678" endline="680" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="setCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="700" endline="702" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="isFollowSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="709" endline="711" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="setFollowSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="738" endline="745" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="setIncludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="760" endline="767" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="setExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="782" endline="782" begincolumn="42" endcolumn="64" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" method="addExcludes" variable="excludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="782" endline="792" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="addExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="818" endline="818" begincolumn="43" endcolumn="72" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" method="setSelectors" variable="selectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'selectors' is stored directly.
</violation>
<violation beginline="818" endline="820" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="setSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="829" endline="831" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="isEverythingIncluded" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="844" endline="844" begincolumn="31" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="DirectoryScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1056" endline="1068" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="clearResults" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1127" endline="1127" begincolumn="34" endcolumn="51" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" method="processSlowScan" variable="arr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1199" endline="1199" begincolumn="35" endcolumn="42" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" method="scandir" variable="newFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'newFiles'
</violation>
<violation beginline="1231" endline="1231" begincolumn="24" endcolumn="66" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="scandir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1253" endline="1253" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" method="scandir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="1372" endline="1372" begincolumn="23" endcolumn="43" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant" class="DirectoryScanner" method="isIncluded" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="1459" endline="1464" begincolumn="19" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1491" endline="1491" begincolumn="23" endcolumn="43" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant" class="DirectoryScanner" method="isExcluded" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="1523" endline="1523" begincolumn="49" endcolumn="72" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant" class="DirectoryScanner" method="getIncludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Must call scan() first" appears 4 times in this file; the first occurrence is on line 1,523
</violation>
<violation beginline="1525" endline="1525" begincolumn="21" endcolumn="75" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getIncludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1536" endline="1541" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getIncludedFilesCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1554" endline="1557" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getNotIncludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1556" endline="1556" begincolumn="16" endcolumn="76" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getNotIncludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1571" endline="1574" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getExcludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1573" endline="1573" begincolumn="16" endcolumn="70" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getExcludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1588" endline="1591" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getDeselectedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1590" endline="1590" begincolumn="16" endcolumn="74" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getDeselectedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1608" endline="1608" begincolumn="27" endcolumn="79" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getIncludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1619" endline="1624" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getIncludedDirsCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1637" endline="1640" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getNotIncludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1639" endline="1639" begincolumn="16" endcolumn="74" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getNotIncludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1654" endline="1657" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getExcludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1656" endline="1656" begincolumn="16" endcolumn="68" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getExcludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1671" endline="1674" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getDeselectedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1673" endline="1673" begincolumn="16" endcolumn="72" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getDeselectedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1685" endline="1692" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getNotFollowedSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1688" endline="1688" begincolumn="21" endcolumn="87" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="getNotFollowedSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1698" endline="1705" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="addDefaultExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1715" endline="1717" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="getResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1736" endline="1738" begincolumn="27" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1745" endline="1751" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="clearCaches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1759" endline="1765" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="DirectoryScanner" method="ensureNonPatternSetsReady" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1759" endline="1765" begincolumn="19" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="DirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1776" endline="1776" begincolumn="50" endcolumn="72" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="DirectoryScanner" method="fillNonPatternSet" variable="patterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1782" endline="1782" begincolumn="64" endcolumn="84" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant" class="DirectoryScanner" method="fillNonPatternSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="1786" endline="1786" begincolumn="16" endcolumn="58" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="DirectoryScanner" method="fillNonPatternSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DynamicAttribute.java">
<violation beginline="36" endline="36" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="DynamicAttribute" method="setDynamicAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DynamicAttributeNS.java">
<violation beginline="39" endline="39" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="DynamicAttributeNS" method="setDynamicAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DynamicElement.java">
<violation beginline="35" endline="35" begincolumn="53" endcolumn="66" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="DynamicElement" method="createDynamicElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DynamicElementNS.java">
<violation beginline="36" endline="36" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="DynamicElementNS" method="createDynamicElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/DynamicObjectAttribute.java">
<violation beginline="39" endline="39" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="DynamicObjectAttribute" method="setDynamicAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/Evaluable.java">
<violation beginline="32" endline="34" begincolumn="13" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="Evaluable" method="get" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'get()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/Executor.java">
<violation beginline="33" endline="33" begincolumn="42" endcolumn="61" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="Executor" method="executeTargets" variable="targetNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="34" endline="34" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Executor" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ExitException.java">
<violation beginline="32" endline="32" begincolumn="17" endcolumn="22" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="ExitException" variable="status" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'status' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ExitStatusException.java">
<violation beginline="30" endline="30" begincolumn="17" endcolumn="22" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="ExitStatusException" variable="status" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'status' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ExtensionPoint.java">
<violation beginline="28" endline="29" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant" class="ExtensionPoint" method="ExtensionPoint" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="41" endline="42" begincolumn="26" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="ExtensionPoint" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/FileScanner.java">
<violation beginline="108" endline="108" begincolumn="24" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="FileScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="138" endline="138" begincolumn="22" endcolumn="38" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="FileScanner" method="setExcludes" variable="excludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="149" endline="149" begincolumn="22" endcolumn="38" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="FileScanner" method="setIncludes" variable="includes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/IntrospectionHelper.java">
<violation beginline="123" endline="123" begincolumn="19" endcolumn="33" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant" class="IntrospectionHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field addText has the same name as a method
</violation>
<violation beginline="190" endline="190" begincolumn="47" endcolumn="61" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant" class="IntrospectionHelper" method="IntrospectionHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "addConfigured" appears 4 times in this file; the first occurrence is on line 190
</violation>
<violation beginline="223" endline="225" begincolumn="25" endcolumn="25" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="IntrospectionHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="257" endline="257" begincolumn="50" endcolumn="53" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="IntrospectionHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'constructor' is never used (overwritten on lines 257, 259 and 261)
</violation>
<violation beginline="267" endline="269" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="IntrospectionHelper" method="IntrospectionHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="275" endline="275" begincolumn="50" endcolumn="53" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="IntrospectionHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'constructor' is never used (overwritten on lines 275, 277 and 279)
</violation>
<violation beginline="293" endline="295" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="IntrospectionHelper" method="IntrospectionHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="323" endline="325" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="IntrospectionHelper" method="getHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="340" endline="353" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="IntrospectionHelper" method="getHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="374" endline="374" begincolumn="40" endcolumn="53" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="setAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="435" endline="435" begincolumn="57" endcolumn="70" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="setAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="456" endline="456" begincolumn="77" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="addText" variable="text" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'text'
</violation>
<violation beginline="457" endline="457" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="addText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="484" endline="485" begincolumn="28" endcolumn="41" rule="AvoidProtectedFieldInFinalClass" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass" priority="3">
Avoid protected fields in a final class.  Change to private or package access.
</violation>
<violation beginline="484" endline="485" begincolumn="28" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="492" endline="492" begincolumn="28" endcolumn="78" rule="AvoidProtectedFieldInFinalClass" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass" priority="3">
Avoid protected fields in a final class.  Change to private or package access.
</violation>
<violation beginline="492" endline="492" begincolumn="28" endcolumn="78" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="520" endline="520" begincolumn="39" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="getNestedCreator" variable="parentUri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'parentUri'
</violation>
<violation beginline="521" endline="521" begincolumn="70" endcolumn="83" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="getNestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="604" endline="604" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="createElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="734" endline="734" begincolumn="16" endcolumn="24" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="supportsReflectElement" variable="parentUri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'parentUri'
</violation>
<violation beginline="770" endline="770" begincolumn="42" endcolumn="55" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="storeElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="815" endline="815" begincolumn="69" endcolumn="82" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="getElementType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="818" endline="818" begincolumn="51" endcolumn="58" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant" class="IntrospectionHelper" method="getElementType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Class " appears 5 times in this file; the first occurrence is on line 818
</violation>
<violation beginline="837" endline="837" begincolumn="73" endcolumn="86" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="getAttributeType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="857" endline="857" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="getAddTextMethod" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="877" endline="877" begincolumn="69" endcolumn="82" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="getElementMethod" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="898" endline="898" begincolumn="73" endcolumn="86" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="getAttributeMethod" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1027" endline="1027" begincolumn="13" endcolumn="28" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" method="createAttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.lang.Object' due to existing implicit import 'java.lang.*'
</violation>
<violation beginline="1049" endline="1049" begincolumn="13" endcolumn="31" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" method="createAttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.lang.Character' due to existing implicit import 'java.lang.*'
</violation>
<violation beginline="1063" endline="1063" begincolumn="13" endcolumn="29" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" method="createAttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.lang.Boolean' due to existing implicit import 'java.lang.*'
</violation>
<violation beginline="1074" endline="1074" begincolumn="13" endcolumn="27" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" method="createAttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.lang.Class' due to existing implicit import 'java.lang.*'
</violation>
<violation beginline="1078" endline="1078" begincolumn="83" endcolumn="96" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1088" endline="1088" begincolumn="13" endcolumn="24" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" method="createAttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.File' due to existing import 'java.io.File'
</violation>
<violation beginline="1113" endline="1113" begincolumn="83" endcolumn="96" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1123" endline="1123" begincolumn="83" endcolumn="96" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1140" endline="1140" begincolumn="13" endcolumn="26" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper" method="createAttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.lang.Long' due to existing implicit import 'java.lang.*'
</violation>
<violation beginline="1144" endline="1144" begincolumn="83" endcolumn="96" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1148" endline="1150" begincolumn="25" endcolumn="77" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1151" endline="1153" begincolumn="23" endcolumn="21" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="1153" endline="1153" begincolumn="36" endcolumn="44" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1185" endline="1185" begincolumn="79" endcolumn="92" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1198" endline="1203" begincolumn="25" endcolumn="77" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1220" endline="1220" begincolumn="21" endcolumn="34" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1230" endline="1231" begincolumn="25" endcolumn="58" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1339" endline="1339" begincolumn="17" endcolumn="74" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper$Creator" method="create" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1365" endline="1365" begincolumn="17" endcolumn="74" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper$Creator" method="store" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1382" endline="1384" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$NestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1385" endline="1387" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$NestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1388" endline="1390" begincolumn="9" endcolumn="9" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$NestedCreator" method="getRealObject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
<violation beginline="1388" endline="1390" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$NestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1391" endline="1392" begincolumn="9" endcolumn="97" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$NestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1394" endline="1397" begincolumn="9" endcolumn="9" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$NestedCreator" method="store" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
<violation beginline="1394" endline="1397" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$NestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1405" endline="1409" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$CreateNestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1415" endline="1415" begincolumn="9" endcolumn="33" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$AddNestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1416" endline="1416" begincolumn="9" endcolumn="44" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$AddNestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1427" endline="1430" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$AddNestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1432" endline="1447" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$AddNestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1433" endline="1433" begincolumn="74" endcolumn="78" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper$AddNestedCreator" method="create" variable="child" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'child'
</violation>
<violation beginline="1433" endline="1433" begincolumn="74" endcolumn="78" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="IntrospectionHelper$AddNestedCreator" method="create" variable="child" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'child'
</violation>
<violation beginline="1449" endline="1455" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$AddNestedCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1474" endline="1493" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$AttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1475" endline="1475" begincolumn="75" endcolumn="88" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper$AttributeSetter" method="setObject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1494" endline="1495" begincolumn="9" endcolumn="89" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="IntrospectionHelper$AttributeSetter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1495" endline="1495" begincolumn="75" endcolumn="88" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper$AttributeSetter" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1501" endline="1503" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="IntrospectionHelper" method="clearCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1515" endline="1515" begincolumn="90" endcolumn="103" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="IntrospectionHelper" method="createAddTypeCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/MagicNames.java">
<violation beginline="38" endline="38" begincolumn="25" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="44" endline="44" begincolumn="25" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="50" endline="50" begincolumn="25" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="56" endline="56" begincolumn="25" endcolumn="79" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="62" endline="62" begincolumn="25" endcolumn="75" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="68" endline="68" begincolumn="25" endcolumn="68" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="75" endline="75" begincolumn="25" endcolumn="84" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="82" endline="82" begincolumn="25" endcolumn="84" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="88" endline="89" begincolumn="25" endcolumn="65" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="95" endline="96" begincolumn="25" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="102" endline="102" begincolumn="25" endcolumn="71" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="108" endline="108" begincolumn="25" endcolumn="77" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="114" endline="114" begincolumn="25" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="120" endline="120" begincolumn="25" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="127" endline="127" begincolumn="25" endcolumn="63" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="134" endline="134" begincolumn="25" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="141" endline="141" begincolumn="25" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="148" endline="148" begincolumn="25" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="155" endline="155" begincolumn="25" endcolumn="68" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="162" endline="162" begincolumn="25" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="168" endline="168" begincolumn="25" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="176" endline="176" begincolumn="25" endcolumn="77" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="183" endline="183" begincolumn="25" endcolumn="77" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="190" endline="190" begincolumn="25" endcolumn="81" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="196" endline="196" begincolumn="25" endcolumn="77" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="202" endline="202" begincolumn="25" endcolumn="76" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="208" endline="208" begincolumn="25" endcolumn="78" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="214" endline="214" begincolumn="25" endcolumn="91" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="220" endline="221" begincolumn="25" endcolumn="63" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="227" endline="227" begincolumn="25" endcolumn="74" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="236" endline="236" begincolumn="25" endcolumn="65" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="245" endline="246" begincolumn="25" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="255" endline="256" begincolumn="25" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="270" endline="270" begincolumn="25" endcolumn="79" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="284" endline="284" begincolumn="25" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="290" endline="290" begincolumn="25" endcolumn="75" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="297" endline="297" begincolumn="25" endcolumn="70" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="310" endline="310" begincolumn="25" endcolumn="61" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="323" endline="323" begincolumn="25" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="MagicNames" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/Main.java">
<violation beginline="63" endline="1275" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant" class="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Main
</violation>
<violation beginline="89" endline="89" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="89" endline="89" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="95" endline="95" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="95" endline="95" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="98" endline="98" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="98" endline="98" begincolumn="54" endcolumn="61" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="104" endline="104" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="keepGoingMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepGoingMode'
</violation>
<violation beginline="111" endline="111" begincolumn="20" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="loggerClassname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'loggerClassname'
</violation>
<violation beginline="117" endline="117" begincolumn="20" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="inputHandlerClassname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inputHandlerClassname'
</violation>
<violation beginline="122" endline="122" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="emacsMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'emacsMode'
</violation>
<violation beginline="127" endline="127" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="silent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'silent'
</violation>
<violation beginline="133" endline="133" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="readyToRun" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'readyToRun'
</violation>
<violation beginline="139" endline="139" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="projectHelp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'projectHelp'
</violation>
<violation beginline="145" endline="145" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="isLogFileUsed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isLogFileUsed'
</violation>
<violation beginline="150" endline="150" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="threadPriority" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'threadPriority'
</violation>
<violation beginline="155" endline="155" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="proxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'proxy'
</violation>
<violation beginline="171" endline="171" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="202" endline="242" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="startAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startAnt(String, Properties, ClassLoader)' is missing an @Override annotation.
</violation>
<violation beginline="207" endline="212" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="startAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="235" endline="238" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="startAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="236" endline="236" begincolumn="13" endcolumn="33" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="startAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="251" endline="251" begincolumn="9" endcolumn="19" rule="DoNotTerminateVM" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="exit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotterminatevm" priority="3">
System.exit() should not be used in J2EE/JEE apps
</violation>
<violation beginline="281" endline="282" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant" class="Main" method="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="296" endline="296" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Main" method="Main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="296" endline="296" begincolumn="20" endcolumn="38" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="Main" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="309" endline="309" begincolumn="30" endcolumn="48" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="312" endline="312" begincolumn="21" endcolumn="25" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="processArgs" variable="logTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="325" endline="325" begincolumn="17" endcolumn="35" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="325" endline="325" begincolumn="40" endcolumn="55" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="327" endline="327" begincolumn="24" endcolumn="45" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="329" endline="329" begincolumn="24" endcolumn="49" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="331" endline="331" begincolumn="24" endcolumn="43" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="331" endline="331" begincolumn="48" endcolumn="63" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="333" endline="333" begincolumn="24" endcolumn="45" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="333" endline="333" begincolumn="50" endcolumn="65" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="335" endline="335" begincolumn="24" endcolumn="43" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="335" endline="335" begincolumn="48" endcolumn="63" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="337" endline="337" begincolumn="24" endcolumn="44" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="337" endline="337" begincolumn="49" endcolumn="64" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="339" endline="339" begincolumn="24" endcolumn="45" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="341" endline="341" begincolumn="24" endcolumn="45" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="341" endline="341" begincolumn="50" endcolumn="65" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="344" endline="344" begincolumn="21" endcolumn="21" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="354" endline="354" begincolumn="21" endcolumn="50" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="358" endline="358" begincolumn="21" endcolumn="50" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="360" endline="360" begincolumn="24" endcolumn="47" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="360" endline="360" begincolumn="52" endcolumn="70" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="361" endline="361" begincolumn="27" endcolumn="42" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="362" endline="362" begincolumn="17" endcolumn="17" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="363" endline="363" begincolumn="24" endcolumn="46" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="364" endline="364" begincolumn="17" endcolumn="17" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="366" endline="366" begincolumn="17" endcolumn="17" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="367" endline="367" begincolumn="24" endcolumn="44" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="368" endline="368" begincolumn="17" endcolumn="17" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="369" endline="369" begincolumn="24" endcolumn="50" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="370" endline="370" begincolumn="17" endcolumn="17" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="371" endline="371" begincolumn="24" endcolumn="43" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="371" endline="371" begincolumn="48" endcolumn="63" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="373" endline="373" begincolumn="24" endcolumn="49" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="373" endline="373" begincolumn="54" endcolumn="69" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="376" endline="376" begincolumn="24" endcolumn="42" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="376" endline="376" begincolumn="47" endcolumn="62" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="380" endline="380" begincolumn="44" endcolumn="44" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="383" endline="383" begincolumn="17" endcolumn="17" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="384" endline="384" begincolumn="24" endcolumn="39" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="384" endline="384" begincolumn="44" endcolumn="68" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="386" endline="386" begincolumn="24" endcolumn="42" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="387" endline="387" begincolumn="17" endcolumn="17" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="397" endline="397" begincolumn="24" endcolumn="47" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="413" endline="413" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="453" endline="453" begincolumn="29" endcolumn="46" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="468" endline="468" begincolumn="25" endcolumn="42" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="476" endline="476" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="485" endline="485" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="498" endline="498" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="processArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="515" endline="515" begincolumn="61" endcolumn="63" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgBuildFile" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="520" endline="521" begincolumn="13" endcolumn="83" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgBuildFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="527" endline="527" begincolumn="60" endcolumn="62" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgListener" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="534" endline="534" begincolumn="13" endcolumn="42" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="540" endline="540" begincolumn="58" endcolumn="63" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgDefine" variable="argPos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'argPos'
</violation>
<violation beginline="569" endline="569" begincolumn="58" endcolumn="60" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgLogger" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="577" endline="578" begincolumn="13" endcolumn="80" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="584" endline="584" begincolumn="64" endcolumn="66" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgInputHandler" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="592" endline="594" begincolumn="13" endcolumn="52" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="600" endline="600" begincolumn="64" endcolumn="66" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgPropertyFile" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="606" endline="606" begincolumn="13" endcolumn="42" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgPropertyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="612" endline="612" begincolumn="56" endcolumn="58" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgNice" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="616" endline="618" begincolumn="13" endcolumn="45" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgNice" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="620" endline="621" begincolumn="13" endcolumn="50" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="handleArgNice" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="640" endline="640" begincolumn="25" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="loadPropertyFiles" variable="fis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="641" endline="649" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="loadPropertyFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="645" endline="645" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="loadPropertyFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="672" endline="672" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="getParentFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="695" endline="695" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="findBuildFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="730" endline="730" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="741" endline="743" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="756" endline="756" begincolumn="31" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="runBuild" variable="savedErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="757" endline="757" begincolumn="31" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="runBuild" variable="savedOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="758" endline="758" begincolumn="31" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="runBuild" variable="savedIn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="761" endline="761" begincolumn="37" endcolumn="40" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'oldsm' is never used (overwritten on line 762)
</violation>
<violation beginline="814" endline="816" begincolumn="25" endcolumn="25" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="829" endline="831" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="846" endline="846" begincolumn="24" endcolumn="39" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="849" endline="869" begincolumn="11" endcolumn="9" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="853" endline="865" begincolumn="19" endcolumn="17" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="856" endline="856" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="858" endline="858" begincolumn="21" endcolumn="39" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="860" endline="860" begincolumn="25" endcolumn="42" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="862" endline="862" begincolumn="25" endcolumn="47" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="runBuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="938" endline="938" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Main" method="addInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="939" endline="939" begincolumn="32" endcolumn="35" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="addInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'handler' is never used (overwritten on lines 941 and 943)
</violation>
<violation beginline="958" endline="958" begincolumn="30" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="createLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'logger' is never used (overwritten on lines 960, 965 and 975)
</violation>
<violation beginline="969" endline="969" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="createLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="990" endline="990" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="991" endline="991" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="992" endline="992" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="993" endline="993" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="994" endline="994" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="995" endline="995" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="996" endline="996" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="997" endline="997" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="998" endline="998" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="999" endline="999" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1000" endline="1000" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1001" endline="1001" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1002" endline="1002" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1003" endline="1003" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1004" endline="1004" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1005" endline="1005" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1006" endline="1006" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1007" endline="1007" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1008" endline="1008" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1009" endline="1009" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1010" endline="1010" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1011" endline="1011" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1012" endline="1012" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1013" endline="1013" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1014" endline="1014" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1015" endline="1015" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1016" endline="1016" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1017" endline="1017" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1018" endline="1018" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1019" endline="1019" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1021" endline="1021" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1023" endline="1023" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1024" endline="1024" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1025" endline="1025" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printUsage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1036" endline="1036" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Main" method="printVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1037" endline="1037" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1043" endline="1043" begincolumn="27" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="antVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'antVersion'
</violation>
<violation beginline="1043" endline="1043" begincolumn="20" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="Main" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1048" endline="1048" begincolumn="27" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Main" variable="shortAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'shortAntVersion'
</violation>
<violation beginline="1048" endline="1048" begincolumn="20" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="Main" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1060" endline="1060" begincolumn="62" endcolumn="75" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Main" method="getAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1060" endline="1081" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="Main" method="getAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1064" endline="1064" begincolumn="35" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="getAntVersion" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="1074" endline="1075" begincolumn="17" endcolumn="61" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="getAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1076" endline="1076" begincolumn="28" endcolumn="47" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant" class="Main" method="getAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="1076" endline="1076" begincolumn="28" endcolumn="47" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Main" method="getAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1077" endline="1077" begincolumn="17" endcolumn="84" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="getAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1094" endline="1094" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Main" method="getShortAntVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1147" endline="1147" begincolumn="69" endcolumn="83" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printTargets" variable="printSubTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'printSubTargets'
</violation>
<violation beginline="1154" endline="1154" begincolumn="45" endcolumn="52" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1155" endline="1155" begincolumn="52" endcolumn="59" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1156" endline="1156" begincolumn="65" endcolumn="72" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1157" endline="1157" begincolumn="45" endcolumn="52" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1158" endline="1158" begincolumn="65" endcolumn="72" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1214" endline="1214" begincolumn="49" endcolumn="62" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="findTargetPosition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1245" endline="1245" begincolumn="67" endcolumn="80" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1246" endline="1246" begincolumn="44" endcolumn="57" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1246" endline="1246" begincolumn="79" endcolumn="105" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Main" method="printTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/NoBannerLogger.java">
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant" class="NoBannerLogger" method="NoBannerLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant" class="NoBannerLogger" method="NoBannerLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="49" endline="51" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="NoBannerLogger" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="49" endline="51" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="NoBannerLogger" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="68" endline="70" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="NoBannerLogger" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="68" endline="70" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="NoBannerLogger" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="81" endline="97" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="NoBannerLogger" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'messageLogged(BuildEvent)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/PathTokenizer.java">
<violation beginline="44" endline="44" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="PathTokenizer" variable="lookahead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lookahead'
</violation>
<violation beginline="51" endline="51" begincolumn="21" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="PathTokenizer" variable="onNetWare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'onNetWare' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="57" endline="57" begincolumn="21" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="PathTokenizer" variable="dosStyleFilesystem" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'dosStyleFilesystem' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="97" endline="97" begincolumn="38" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="PathTokenizer" method="nextToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="98" endline="98" begincolumn="24" endcolumn="27" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="PathTokenizer" method="nextToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'token' is never used (overwritten on lines 100 and 103)
</violation>
<violation beginline="144" endline="144" begincolumn="39" endcolumn="40" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant" class="PathTokenizer" method="nextToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="146" endline="146" begincolumn="39" endcolumn="40" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant" class="PathTokenizer" method="nextToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/Project.java">
<violation beginline="144" endline="144" begincolumn="19" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="147" endline="147" begincolumn="19" endcolumn="41" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'HashMap'; use the interface instead
</violation>
<violation beginline="153" endline="153" begincolumn="19" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="157" endline="160" begincolumn="5" endcolumn="5" rule="NonStaticInitializer" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#nonstaticinitializer" priority="3">
Non-static initializers are confusing
</violation>
<violation beginline="187" endline="187" begincolumn="25" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Project" variable="coreLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'coreLoader'
</violation>
<violation beginline="200" endline="200" begincolumn="26" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Project" variable="inputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inputHandler'
</violation>
<violation beginline="200" endline="200" begincolumn="41" endcolumn="44" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'inputHandler' is never used (overwritten on line 258)
</violation>
<violation beginline="205" endline="205" begincolumn="25" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Project" variable="defaultInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultInputStream'
</violation>
<violation beginline="210" endline="210" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Project" variable="keepGoingMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepGoingMode'
</violation>
<violation beginline="269" endline="269" begincolumn="30" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="createSubProject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'subProject' is never used (overwritten on lines 271 and 273)
</violation>
<violation beginline="272" endline="272" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Project" method="createSubProject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="299" endline="299" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="310" endline="310" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="initProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="433" endline="433" begincolumn="12" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getBuildListeners" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="435" endline="435" begincolumn="49" endcolumn="56" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Project" method="getBuildListeners" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="623" endline="623" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="replaceProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="645" endline="645" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="653" endline="653" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getUserProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="662" endline="662" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getInheritedProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="815" endline="815" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getFilters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="829" endline="829" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="setBasedir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="842" endline="842" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="setBaseDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="842" endline="842" begincolumn="33" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="setBaseDir" variable="baseDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'baseDir'
</violation>
<violation beginline="869" endline="869" begincolumn="17" endcolumn="36" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getBaseDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="921" endline="921" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="setJavaVersionProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="970" endline="970" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="addTaskDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="987" endline="987" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="checkTaskClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1008" endline="1008" begincolumn="13" endcolumn="46" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="checkTaskClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1026" endline="1026" begincolumn="12" endcolumn="38" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getTaskDefinitions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1068" endline="1068" begincolumn="12" endcolumn="38" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getDataTypeDefinitions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1095" endline="1095" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="addTarget" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1112" endline="1112" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="addTarget" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1151" endline="1151" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1178" endline="1178" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="createTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1194" endline="1194" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="createDataType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1224" endline="1224" begincolumn="32" endcolumn="40" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Project" method="getExecutor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1227" endline="1227" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Project" method="getExecutor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1248" endline="1248" begincolumn="67" endcolumn="80" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1248" endline="1248" begincolumn="38" endcolumn="51" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1251" endline="1251" begincolumn="44" endcolumn="82" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="Project" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1347" endline="1347" begincolumn="63" endcolumn="76" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="executeTarget" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1369" endline="1369" begincolumn="44" endcolumn="57" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="executeSortedTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1370" endline="1370" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="executeSortedTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1378" endline="1381" begincolumn="21" endcolumn="32" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="executeSortedTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="1390" endline="1390" begincolumn="32" endcolumn="47" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Project" method="executeSortedTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1395" endline="1400" begincolumn="19" endcolumn="17" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="executeSortedTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="1403" endline="1406" begincolumn="25" endcolumn="75" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="executeSortedTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="1412" endline="1415" begincolumn="25" endcolumn="75" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="executeSortedTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="1702" endline="1702" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="setFileLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1739" endline="1739" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Project" method="getProject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1739" endline="1741" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="getProject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1759" endline="1759" begincolumn="67" endcolumn="91" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1759" endline="1759" begincolumn="18" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1760" endline="1760" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1781" endline="1781" begincolumn="67" endcolumn="91" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1781" endline="1781" begincolumn="18" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1782" endline="1782" begincolumn="66" endcolumn="79" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1803" endline="1803" begincolumn="70" endcolumn="94" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1803" endline="1803" begincolumn="18" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1804" endline="1804" begincolumn="66" endcolumn="79" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1821" endline="1821" begincolumn="24" endcolumn="37" rule="UseEqualsToCompareStrings" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#useequalstocomparestrings" priority="3">
Use equals() to compare strings instead of '==' or '!='
</violation>
<violation beginline="1831" endline="1831" begincolumn="65" endcolumn="72" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1836" endline="1836" begincolumn="24" endcolumn="37" rule="UseEqualsToCompareStrings" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="topoSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#useequalstocomparestrings" priority="3">
Use equals() to compare strings instead of '==' or '!='
</violation>
<violation beginline="1885" endline="1885" begincolumn="49" endcolumn="73" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1886" endline="1886" begincolumn="36" endcolumn="60" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1887" endline="1887" begincolumn="36" endcolumn="49" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1888" endline="1888" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1897" endline="1897" begincolumn="13" endcolumn="28" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="1898" endline="1898" begincolumn="13" endcolumn="61" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="1899" endline="1899" begincolumn="13" endcolumn="28" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="1915" endline="1915" begincolumn="24" endcolumn="36" rule="UseEqualsToCompareStrings" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#useequalstocomparestrings" priority="3">
Use equals() to compare strings instead of '==' or '!='
</violation>
<violation beginline="1921" endline="1921" begincolumn="13" endcolumn="21" rule="UseEqualsToCompareStrings" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="tsort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#useequalstocomparestrings" priority="3">
Use equals() to compare strings instead of '==' or '!='
</violation>
<violation beginline="1954" endline="1955" begincolumn="59" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="Project" method="inheritIDReferences" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1993" endline="1993" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="getReferences" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="2043" endline="2043" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="2043" endline="2045" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="2212" endline="2212" begincolumn="72" endcolumn="78" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="Project" method="fireMessageLoggedEvent" variable="message" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'message'
</violation>
<violation beginline="2447" endline="2451" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="setProjectReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="2447" endline="2451" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="Project" method="setProjectReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ProjectComponent.java">
<violation beginline="25" endline="173" begincolumn="17" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant" class="ProjectComponent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'ProjectComponent' is suspected to be a Data Class (WOC=30.000%, NOPA=0, NOAM=6, WMC=12)
</violation>
<violation beginline="57" endline="58" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant" class="ProjectComponent" method="ProjectComponent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="57" endline="58" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant" class="ProjectComponent" method="ProjectComponent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="155" endline="155" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectComponent" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="167" endline="172" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant" class="ProjectComponent" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ProjectHelper.java">
<violation beginline="89" endline="89" begincolumn="81" endcolumn="94" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="configureProject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="118" endline="119" begincolumn="56" endcolumn="52" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant" class="ProjectHelper$OnMissingExtensionPoint" variable="values" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="121" endline="121" begincolumn="23" endcolumn="34" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant" class="ProjectHelper$OnMissingExtensionPoint" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field name has the same name as a method
</violation>
<violation beginline="131" endline="133" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper$OnMissingExtensionPoint" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="137" endline="137" begincolumn="17" endcolumn="49" rule="AvoidThrowingNullPointerException" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper$OnMissingExtensionPoint" method="valueOf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingnullpointerexception" priority="1">
Avoid throwing null pointer exceptions.
</violation>
<violation beginline="153" endline="153" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="153" endline="153" begincolumn="13" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="ProjectHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="153" endline="153" begincolumn="28" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" variable="importStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'importStack' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="153" endline="153" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant" class="ProjectHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="154" endline="154" begincolumn="13" endcolumn="63" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="ProjectHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="154" endline="154" begincolumn="28" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" variable="extensionStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'extensionStack' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="163" endline="163" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="getImportStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="180" endline="180" begincolumn="26" endcolumn="80" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="ProjectHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="205" endline="205" begincolumn="26" endcolumn="98" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="ProjectHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="229" endline="229" begincolumn="26" endcolumn="107" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="ProjectHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="276" endline="276" begincolumn="62" endcolumn="75" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="324" endline="324" begincolumn="41" endcolumn="46" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="configure" variable="target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'target'
</violation>
<violation beginline="325" endline="325" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="331" endline="331" begincolumn="14" endcolumn="50" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="configure" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="338" endline="338" begincolumn="22" endcolumn="50" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="360" endline="360" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="addText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="377" endline="377" begincolumn="56" endcolumn="61" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="addText" variable="target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'target'
</violation>
<violation beginline="378" endline="378" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="addText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="428" endline="428" begincolumn="83" endcolumn="96" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="replaceProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="454" endline="454" begincolumn="76" endcolumn="100" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="replaceProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="455" endline="455" begincolumn="21" endcolumn="34" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="replaceProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="482" endline="482" begincolumn="58" endcolumn="71" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="parsePropertyString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="482" endline="482" begincolumn="84" endcolumn="97" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="parsePropertyString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="483" endline="483" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="parsePropertyString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="655" endline="655" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelper" method="resolveExtensionOfAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="667" endline="667" begincolumn="31" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="resolveExtensionOfAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'extPoint' is never used (overwritten on lines 670 and 680)
</violation>
<violation beginline="695" endline="695" begincolumn="21" endcolumn="75" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelper" method="resolveExtensionOfAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/ProjectHelperRepository.java">
<violation beginline="45" endline="307" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="58" endline="58" begincolumn="56" endcolumn="62" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" variable="helpers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'helpers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="65" endline="65" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="95" endline="95" begincolumn="25" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="ProjectHelperRepository" method="collectProjectHelpers" variable="systemResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="100" endline="100" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="collectProjectHelpers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="101" endline="101" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="collectProjectHelpers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="125" endline="125" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="registerProjectHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="141" endline="141" begincolumn="90" endcolumn="103" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="registerProjectHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="145" endline="146" begincolumn="13" endcolumn="45" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="registerProjectHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="155" endline="155" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="registerProjectHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="168" endline="168" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperBySystemProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="183" endline="183" begincolumn="31" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperByService" variable="isr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStreamReader object are closed after use
</violation>
<violation beginline="189" endline="189" begincolumn="28" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperByService" variable="rd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStreamReader object are closed after use
</violation>
<violation beginline="197" endline="197" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperByService" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="198" endline="198" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperByService" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="222" endline="222" begincolumn="98" endcolumn="111" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getHelperConstructor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="229" endline="231" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getHelperConstructor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="237" endline="237" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getHelperConstructor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="249" endline="249" begincolumn="82" endcolumn="95" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperForBuildFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="259" endline="259" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperForBuildFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="272" endline="272" begincolumn="76" endcolumn="89" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperForAntlib" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="282" endline="282" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getProjectHelperForAntlib" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="301" endline="301" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getHelpers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="302" endline="303" begincolumn="17" endcolumn="48" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="ProjectHelperRepository" method="getHelpers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/PropertyHelper.java">
<violation beginline="173" endline="173" begincolumn="30" endcolumn="35" rule="FinalFieldCouldBeStatic" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" variable="PREFIX" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#finalfieldcouldbestatic" priority="3">
This final field could be made static
</violation>
<violation beginline="176" endline="182" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="evaluate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'evaluate(String, PropertyHelper)' is missing an @Override annotation.
</violation>
<violation beginline="185" endline="202" begincolumn="26" endcolumn="10" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="205" endline="220" begincolumn="26" endcolumn="10" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="215" endline="215" begincolumn="21" endcolumn="70" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="215" endline="217" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="226" endline="226" begincolumn="30" endcolumn="35" rule="FinalFieldCouldBeStatic" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" variable="PREFIX" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#finalfieldcouldbestatic" priority="3">
This final field could be made static
</violation>
<violation beginline="229" endline="233" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="evaluate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'evaluate(String, PropertyHelper)' is missing an @Override annotation.
</violation>
<violation beginline="236" endline="236" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="237" endline="237" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="238" endline="238" begincolumn="19" endcolumn="70" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="238" endline="238" begincolumn="19" endcolumn="101" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="241" endline="241" begincolumn="19" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="241" endline="241" begincolumn="19" endcolumn="75" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="248" endline="248" begincolumn="19" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="248" endline="248" begincolumn="19" endcolumn="79" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="255" endline="255" begincolumn="19" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="255" endline="255" begincolumn="19" endcolumn="84" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="261" endline="261" begincolumn="9" endcolumn="21" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" method="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="262" endline="262" begincolumn="9" endcolumn="22" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" method="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="263" endline="263" begincolumn="9" endcolumn="31" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" method="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="264" endline="264" begincolumn="9" endcolumn="29" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" method="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="381" endline="398" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="PropertyHelper" method="getPropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="462" endline="462" begincolumn="53" endcolumn="56" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getPropertyHook" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="510" endline="510" begincolumn="51" endcolumn="64" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="parsePropertyString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="511" endline="511" begincolumn="73" endcolumn="86" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" method="parsePropertyString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="511" endline="511" begincolumn="37" endcolumn="50" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="parsePropertyString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="537" endline="537" begincolumn="101" endcolumn="114" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" method="replaceProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="537" endline="537" begincolumn="62" endcolumn="86" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="replaceProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="555" endline="555" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" method="replaceProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="575" endline="575" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" method="parseProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="641" endline="641" begincolumn="67" endcolumn="72" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" method="setProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " -&gt; " appears 4 times in this file; the first occurrence is on line 641
</violation>
<violation beginline="831" endline="843" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getProperty(String)' is missing an @Override annotation.
</violation>
<violation beginline="840" endline="840" begincolumn="13" endcolumn="54" rule="AvoidBranchingStatementAsLastInLoop" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" method="getProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop" priority="2">
Avoid using a branching statement as the last in a loop.
</violation>
<violation beginline="894" endline="894" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="911" endline="911" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getUserProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="926" endline="926" begincolumn="12" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getInheritedProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="937" endline="937" begincolumn="15" endcolumn="39" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getInternalProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="946" endline="946" begincolumn="15" endcolumn="39" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getInternalUserProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="955" endline="955" begincolumn="15" endcolumn="39" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="getInternalInheritedProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="1022" endline="1022" begincolumn="58" endcolumn="71" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="parsePropertyStringDefault" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1022" endline="1022" begincolumn="84" endcolumn="97" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="PropertyHelper" method="parsePropertyStringDefault" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1022" endline="1074" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="PropertyHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1023" endline="1023" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="PropertyHelper" method="parsePropertyStringDefault" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1027" endline="1027" begincolumn="16" endcolumn="52" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant" class="PropertyHelper" method="parsePropertyStringDefault" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/RuntimeConfigurable.java">
<violation beginline="47" endline="47" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="elementTag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'elementTag'
</violation>
<violation beginline="51" endline="51" begincolumn="39" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="children" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'children'
</violation>
<violation beginline="56" endline="56" begincolumn="30" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="wrappedObject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'wrappedObject'
</violation>
<violation beginline="66" endline="66" begincolumn="31" endcolumn="57" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="namespacedAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'namespacedAttribute'
</violation>
<violation beginline="78" endline="78" begincolumn="13" endcolumn="41" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="RuntimeConfigurable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'LinkedHashMap'; use the interface instead
</violation>
<violation beginline="78" endline="78" begincolumn="43" endcolumn="61" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="attributeMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'attributeMap'
</violation>
<violation beginline="81" endline="81" begincolumn="26" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="characters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'characters'
</violation>
<violation beginline="81" endline="81" begincolumn="13" endcolumn="24" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant" class="RuntimeConfigurable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="84" endline="84" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="proxyConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'proxyConfigured'
</violation>
<violation beginline="87" endline="87" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="polyType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'polyType'
</violation>
<violation beginline="90" endline="90" begincolumn="20" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="RuntimeConfigurable" variable="id" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'id'
</violation>
<violation beginline="99" endline="99" begincolumn="9" endcolumn="23" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="RuntimeConfigurable" method="RuntimeConfigurable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setProxy' called during object construction
</violation>
<violation beginline="100" endline="100" begincolumn="9" endcolumn="33" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="RuntimeConfigurable" method="RuntimeConfigurable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setElementTag' called during object construction
</violation>
<violation beginline="112" endline="115" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="130" endline="130" begincolumn="9" endcolumn="29" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="RuntimeConfigurable$AttributeComponentInformation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="131" endline="131" begincolumn="9" endcolumn="27" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="RuntimeConfigurable$AttributeComponentInformation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="193" endline="193" begincolumn="38" endcolumn="41" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="RuntimeConfigurable" method="isEnabled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'enable' is never used (overwritten on line 195)
</violation>
<violation beginline="200" endline="201" begincolumn="17" endcolumn="97" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="RuntimeConfigurable" method="isEnabled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="227" endline="228" begincolumn="71" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="227" endline="228" begincolumn="18" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setCreator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="227" endline="228" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="RuntimeConfigurable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="236" endline="238" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="244" endline="246" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="252" endline="254" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getPolyType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="260" endline="262" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setPolyType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="272" endline="277" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="285" endline="290" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="299" endline="318" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="324" endline="326" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="removeAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="334" endline="334" begincolumn="25" endcolumn="49" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getAttributeMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="334" endline="336" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getAttributeMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="346" endline="348" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="356" endline="359" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="addChild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="369" endline="371" begincolumn="18" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getChild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="369" endline="371" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="RuntimeConfigurable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="378" endline="381" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getChildren" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="389" endline="395" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="addText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="406" endline="412" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="addText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="422" endline="424" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="430" endline="432" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="setElementTag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="440" endline="442" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="getElementTag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="462" endline="462" begincolumn="50" endcolumn="63" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="RuntimeConfigurable" method="maybeConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="484" endline="558" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant" class="RuntimeConfigurable" method="maybeConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="485" endline="485" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="RuntimeConfigurable" method="maybeConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="600" endline="603" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="RuntimeConfigurable" method="applyPreSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/Target.java">
<violation beginline="55" endline="55" begincolumn="26" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Target" variable="dependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dependencies'
</violation>
<violation beginline="67" endline="67" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="Target" variable="description" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'description'
</violation>
<violation beginline="209" endline="211" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="Target" method="addTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addTask(Task)' is missing an @Override annotation.
</violation>
<violation beginline="235" endline="235" begincolumn="16" endcolumn="52" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant" class="Target" method="getTasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="427" endline="427" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Target" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="445" endline="453" begincolumn="13" endcolumn="13" rule="ForLoopCanBeForeach" ruleset="Best Practices" package="org.apache.tools.ant" class="Target" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopcanbeforeach" priority="3">
This for loop can be replaced by a foreach loop
</violation>
<violation beginline="471" endline="471" begincolumn="18" endcolumn="33" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Target" method="performTasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="487" endline="492" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="Target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="489" endline="489" begincolumn="16" endcolumn="50" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant" class="Target" method="replaceChild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="502" endline="507" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="Target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="504" endline="504" begincolumn="16" endcolumn="50" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant" class="Target" method="replaceChild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/Task.java">
<violation beginline="34" endline="476" begincolumn="17" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant" class="Task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Task
</violation>
<violation beginline="143" endline="143" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Task" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="143" endline="144" begincolumn="12" endcolumn="5" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant" class="Task" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
<violation beginline="143" endline="144" begincolumn="46" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="Task" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="155" endline="155" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Task" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="155" endline="156" begincolumn="12" endcolumn="5" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant" class="Task" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
<violation beginline="155" endline="156" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="Task" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="199" endline="199" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="Task" method="maybeConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="278" endline="280" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="Task" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'log(String)' is missing an @Override annotation.
</violation>
<violation beginline="290" endline="296" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="Task" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'log(String, int)' is missing an @Override annotation.
</violation>
<violation beginline="357" endline="357" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="Task" method="perform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="375" endline="377" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant" class="Task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="394" endline="394" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="Task" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/TaskAdapter.java">
<violation beginline="40" endline="41" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant" class="TaskAdapter" method="TaskAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="54" endline="54" begincolumn="9" endcolumn="23" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant" class="TaskAdapter" method="TaskAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setProxy' called during object construction
</violation>
<violation beginline="98" endline="98" begincolumn="17" endcolumn="50" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant" class="TaskAdapter" method="checkTaskClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="113" endline="115" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="TaskAdapter" method="checkProxyClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'checkProxyClass(Class)' is missing an @Override annotation.
</violation>
<violation beginline="123" endline="123" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="123" endline="162" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="130" endline="133" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="133" endline="133" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="145" endline="148" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="148" endline="148" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="156" endline="158" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="158" endline="158" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="TaskAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="169" endline="171" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="TaskAdapter" method="setProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProxy(Object)' is missing an @Override annotation.
</violation>
<violation beginline="178" endline="180" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="TaskAdapter" method="getProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getProxy()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/TaskConfigurationChecker.java">
<violation beginline="58" endline="58" begincolumn="26" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="TaskConfigurationChecker" variable="errors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'errors' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="95" endline="95" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="TaskConfigurationChecker" method="checkErrors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/UnknownElement.java">
<violation beginline="64" endline="64" begincolumn="34" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="UnknownElement" variable="children" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'children'
</violation>
<violation beginline="67" endline="67" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="UnknownElement" variable="presetDefed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'presetDefed'
</violation>
<violation beginline="114" endline="114" begincolumn="37" endcolumn="45" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="setNamespace" variable="namespace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'namespace'
</violation>
<violation beginline="149" endline="151" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="getWrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getWrapper()' is missing an @Override annotation.
</violation>
<violation beginline="161" endline="161" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="UnknownElement" method="maybeConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="161" endline="166" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="maybeConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'maybeConfigure()' is missing an @Override annotation.
</violation>
<violation beginline="214" endline="220" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="handleOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleOutput(String)' is missing an @Override annotation.
</violation>
<violation beginline="234" endline="240" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleInput(byte, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="247" endline="253" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="handleFlush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleFlush(String)' is missing an @Override annotation.
</violation>
<violation beginline="260" endline="266" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="handleErrorOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleErrorOutput(String)' is missing an @Override annotation.
</violation>
<violation beginline="273" endline="279" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="handleErrorFlush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleErrorFlush(String)' is missing an @Override annotation.
</violation>
<violation beginline="285" endline="304" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="332" endline="332" begincolumn="16" endcolumn="21" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="handleChildren" variable="parent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'parent'
</violation>
<violation beginline="334" endline="334" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant" class="UnknownElement" method="handleChildren" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="350" endline="354" begincolumn="25" endcolumn="25" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant" class="UnknownElement" method="handleChildren" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="505" endline="508" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="getTaskName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getTaskName()' is missing an @Override annotation.
</violation>
<violation beginline="558" endline="558" begincolumn="51" endcolumn="54" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant" class="UnknownElement" method="handleChild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'creator' is never used (overwritten on line 560)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/XmlLogger.java">
<violation beginline="72" endline="72" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" method="getDocumentBuilder" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="78" endline="78" begincolumn="26" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="81" endline="81" begincolumn="26" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="84" endline="84" begincolumn="26" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="87" endline="87" begincolumn="26" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="90" endline="90" begincolumn="26" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="93" endline="93" begincolumn="26" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="96" endline="96" begincolumn="26" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="99" endline="99" begincolumn="26" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="102" endline="102" begincolumn="26" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="105" endline="105" begincolumn="26" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="108" endline="108" begincolumn="13" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="108" endline="108" begincolumn="22" endcolumn="24" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" variable="doc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'doc' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="111" endline="111" begincolumn="13" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="111" endline="111" begincolumn="37" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" variable="tasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'tasks' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="114" endline="114" begincolumn="13" endcolumn="66" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="114" endline="114" begincolumn="39" endcolumn="45" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" variable="targets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'targets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="120" endline="120" begincolumn="13" endcolumn="78" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="120" endline="120" begincolumn="46" endcolumn="57" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" variable="threadStacks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'threadStacks' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="125" endline="125" begincolumn="26" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant" class="XmlLogger" variable="buildElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'buildElement'
</violation>
<violation beginline="125" endline="125" begincolumn="13" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant" class="XmlLogger" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="258" endline="258" begincolumn="31" endcolumn="46" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="312" endline="312" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="330" endline="330" begincolumn="27" endcolumn="42" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant" class="XmlLogger" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="446" endline="447" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="XmlLogger" method="setEmacsMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="457" endline="458" begincolumn="54" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant" class="XmlLogger" method="setErrorPrintStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/attribute/IfBlankAttribute.java">
<violation beginline="30" endline="30" begincolumn="9" endcolumn="31" rule="NonStaticInitializer" ruleset="Error Prone" package="org.apache.tools.ant.attribute" class="IfBlankAttribute$Unless" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#nonstaticinitializer" priority="3">
Non-static initializers are confusing
</violation>
<violation beginline="36" endline="38" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.attribute" class="IfBlankAttribute" method="isEnabled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isEnabled(UnknownElement, String)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/attribute/IfSetAttribute.java">
<violation beginline="30" endline="30" begincolumn="9" endcolumn="31" rule="NonStaticInitializer" ruleset="Error Prone" package="org.apache.tools.ant.attribute" class="IfSetAttribute$Unless" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#nonstaticinitializer" priority="3">
Non-static initializers are confusing
</violation>
<violation beginline="36" endline="38" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.attribute" class="IfSetAttribute" method="isEnabled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isEnabled(UnknownElement, String)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/attribute/IfTrueAttribute.java">
<violation beginline="31" endline="31" begincolumn="9" endcolumn="31" rule="NonStaticInitializer" ruleset="Error Prone" package="org.apache.tools.ant.attribute" class="IfTrueAttribute$Unless" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#nonstaticinitializer" priority="3">
Non-static initializers are confusing
</violation>
<violation beginline="38" endline="40" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.attribute" class="IfTrueAttribute" method="isEnabled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isEnabled(UnknownElement, String)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/dispatch/DispatchUtils.java">
<violation beginline="37" endline="37" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.dispatch" class="DispatchUtils" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="59" endline="59" begincolumn="37" endcolumn="77" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.dispatch" class="DispatchUtils" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="90" endline="90" begincolumn="21" endcolumn="96" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.dispatch" class="DispatchUtils" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="93" endline="93" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.dispatch" class="DispatchUtils" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'executeM' is never used (overwritten on line 94)
</violation>
<violation beginline="107" endline="107" begincolumn="17" endcolumn="43" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.dispatch" class="DispatchUtils" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="109" endline="109" begincolumn="17" endcolumn="44" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.dispatch" class="DispatchUtils" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/BaseFilterReader.java">
<violation beginline="37" endline="37" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="BaseFilterReader" variable="initialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initialized'
</violation>
<violation beginline="40" endline="40" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="BaseFilterReader" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'project'
</violation>
<violation beginline="81" endline="95" begincolumn="18" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="BaseFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read(char, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="108" endline="120" begincolumn="18" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="BaseFilterReader" method="skip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'skip(long)' is missing an @Override annotation.
</violation>
<violation beginline="109" endline="109" begincolumn="29" endcolumn="52" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.filters" class="BaseFilterReader" method="skip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="136" endline="138" begincolumn="21" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="BaseFilterReader" method="getInitialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/BaseParamFilterReader.java">
<violation beginline="61" endline="64" begincolumn="18" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="BaseParamFilterReader" method="setParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setParameters(Parameter...)' is missing an @Override annotation.
</violation>
<violation beginline="61" endline="61" begincolumn="37" endcolumn="65" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="BaseParamFilterReader" method="setParameters" variable="parameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'parameters' is stored directly.
</violation>
<violation beginline="72" endline="72" begincolumn="9" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="BaseParamFilterReader" method="getParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'parameters' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/ClassConstants.java">
<violation beginline="51" endline="51" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="ClassConstants" variable="queuedData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'queuedData'
</violation>
<violation beginline="88" endline="138" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ClassConstants" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="115" endline="117" begincolumn="19" endcolumn="17" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.filters" class="ClassConstants" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="115" endline="115" begincolumn="49" endcolumn="64" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.filters" class="ClassConstants" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="125" endline="125" begincolumn="21" endcolumn="48" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ClassConstants" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="126" endline="126" begincolumn="26" endcolumn="34" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.filters" class="ClassConstants" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="150" endline="152" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ClassConstants" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/ConcatFilter.java">
<violation beginline="47" endline="216" begincolumn="14" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.filters" class="ConcatFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'ConcatFilter' is suspected to be a Data Class (WOC=25.000%, NOPA=0, NOAM=4, WMC=24)
</violation>
<violation beginline="57" endline="57" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="ConcatFilter" variable="prependReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'prependReader'
</violation>
<violation beginline="60" endline="60" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="ConcatFilter" variable="appendReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'appendReader'
</violation>
<violation beginline="119" endline="126" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.filters" class="ConcatFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="174" endline="183" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ConcatFilter" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="207" endline="207" begincolumn="52" endcolumn="61" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.filters" class="ConcatFilter" method="initialize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="213" endline="213" begincolumn="51" endcolumn="60" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.filters" class="ConcatFilter" method="initialize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/EscapeUnicode.java">
<violation beginline="45" endline="45" begincolumn="13" endcolumn="24" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="EscapeUnicode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="78" endline="99" begincolumn="18" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="EscapeUnicode" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="84" endline="84" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="EscapeUnicode" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on lines 86 and 89)
</violation>
<violation beginline="111" endline="115" begincolumn="18" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="EscapeUnicode" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="120" endline="121" begincolumn="31" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.filters" class="EscapeUnicode" method="initialize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/ExpandProperties.java">
<violation beginline="91" endline="116" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ExpandProperties" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="128" endline="133" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ExpandProperties" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/FixCrLfFilter.java">
<violation beginline="86" endline="86" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter" variable="javafiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'javafiles'
</violation>
<violation beginline="90" endline="90" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter" variable="initialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initialized'
</violation>
<violation beginline="115" endline="127" begincolumn="5" endcolumn="5" rule="NonStaticInitializer" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#nonstaticinitializer" priority="3">
Non-static initializers are confusing
</violation>
<violation beginline="139" endline="155" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="195" endline="197" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter" method="getFixlast" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="210" endline="212" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter" method="getJavafiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="294" endline="299" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="294" endline="299" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.filters" class="FixCrLfFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="406" endline="406" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" variable="preemptIndex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preemptIndex'
</violation>
<violation beginline="429" endline="429" begincolumn="25" endcolumn="25" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="push" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="433" endline="433" begincolumn="26" endcolumn="34" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="push" variable="cs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="445" endline="447" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="445" endline="445" begincolumn="34" endcolumn="52" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'
</violation>
<violation beginline="449" endline="451" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'close()' is missing an @Override annotation.
</violation>
<violation beginline="449" endline="449" begincolumn="36" endcolumn="54" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'
</violation>
<violation beginline="453" endline="455" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="reset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'reset()' is missing an @Override annotation.
</violation>
<violation beginline="457" endline="459" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="markSupported" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'markSupported()' is missing an @Override annotation.
</violation>
<violation beginline="461" endline="463" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="ready" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'ready()' is missing an @Override annotation.
</violation>
<violation beginline="461" endline="461" begincolumn="39" endcolumn="57" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="ready" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'
</violation>
<violation beginline="465" endline="467" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="mark" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'mark(int)' is missing an @Override annotation.
</violation>
<violation beginline="465" endline="465" begincolumn="40" endcolumn="58" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="mark" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'
</violation>
<violation beginline="469" endline="471" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="skip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'skip(long)' is missing an @Override annotation.
</violation>
<violation beginline="469" endline="469" begincolumn="41" endcolumn="59" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="skip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'
</violation>
<violation beginline="473" endline="473" begincolumn="25" endcolumn="34" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" variable="buf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="473" endline="475" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read(char)' is missing an @Override annotation.
</violation>
<violation beginline="473" endline="473" begincolumn="44" endcolumn="62" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'
</violation>
<violation beginline="477" endline="477" begincolumn="52" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" variable="length" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'length'
</violation>
<violation beginline="477" endline="477" begincolumn="41" endcolumn="45" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" variable="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'start'
</violation>
<violation beginline="477" endline="488" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read(char, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="477" endline="477" begincolumn="67" endcolumn="85" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'
</violation>
<violation beginline="482" endline="482" begincolumn="20" endcolumn="58" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$SimpleFilterReader" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="492" endline="492" begincolumn="25" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" variable="editsBlocked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'editsBlocked'
</violation>
<violation beginline="492" endline="492" begincolumn="17" endcolumn="45" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field editsBlocked has the same name as a method
</violation>
<violation beginline="515" endline="517" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" method="editsBlocked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'editsBlocked()' is missing an @Override annotation.
</violation>
<violation beginline="519" endline="613" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="542" endline="548" begincolumn="17" endcolumn="17" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="551" endline="557" begincolumn="17" endcolumn="17" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="572" endline="578" begincolumn="17" endcolumn="17" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="582" endline="597" begincolumn="17" endcolumn="17" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
<violation beginline="601" endline="607" begincolumn="17" endcolumn="17" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$MaskJavaTabLiteralsFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="619" endline="619" begincolumn="25" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" variable="fixLast" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fixLast' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="621" endline="621" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" variable="normalizedEOL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'normalizedEOL'
</violation>
<violation beginline="623" endline="623" begincolumn="24" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" variable="eol" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'eol'
</violation>
<violation beginline="623" endline="623" begincolumn="24" endcolumn="26" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" variable="eol" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'eol' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="623" endline="623" begincolumn="30" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'eol' is never used (overwritten on line 627)
</violation>
<violation beginline="631" endline="697" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="637" endline="682" begincolumn="17" endcolumn="17" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
<violation beginline="665" endline="667" begincolumn="51" endcolumn="21" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="684" endline="684" begincolumn="28" endcolumn="39" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$NormalizeEolFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="707" endline="720" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddEofFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="724" endline="724" begincolumn="33" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveEofFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'lookAhead' is never used (overwritten on lines 730 and 732)
</violation>
<violation beginline="736" endline="747" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveEofFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="751" endline="751" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" variable="columnNumber" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'columnNumber'
</violation>
<violation beginline="753" endline="753" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" variable="tabLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'tabLength'
</violation>
<violation beginline="753" endline="753" begincolumn="21" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" variable="tabLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'tabLength' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="753" endline="753" begincolumn="33" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'tabLength' is never used (overwritten on line 757)
</violation>
<violation beginline="760" endline="825" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="775" endline="796" begincolumn="21" endcolumn="21" rule="NonCaseLabelInSwitchStatement" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#noncaselabelinswitchstatement" priority="3">
A non-case label was present in a switch statement
</violation>
<violation beginline="775" endline="775" begincolumn="44" endcolumn="67" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="778" endline="778" begincolumn="33" endcolumn="60" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="797" endline="797" begincolumn="28" endcolumn="44" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="801" endline="801" begincolumn="28" endcolumn="40" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="829" endline="829" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveTabFilter" variable="columnNumber" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'columnNumber'
</violation>
<violation beginline="831" endline="831" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveTabFilter" variable="tabLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'tabLength'
</violation>
<violation beginline="831" endline="831" begincolumn="21" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveTabFilter" variable="tabLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'tabLength' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="831" endline="831" begincolumn="33" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveTabFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'tabLength' is never used (overwritten on line 836)
</violation>
<violation beginline="839" endline="862" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="842" endline="860" begincolumn="13" endcolumn="13" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$RemoveTabFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
<violation beginline="869" endline="869" begincolumn="63" endcolumn="68" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddAsisRemove" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "asis" appears 4 times in this file; the first occurrence is on line 869
</violation>
<violation beginline="876" endline="878" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddAsisRemove" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
<violation beginline="885" endline="888" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddAsisRemove" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'equals(Object)' is missing an @Override annotation.
</violation>
<violation beginline="894" endline="896" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddAsisRemove" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'hashCode()' is missing an @Override annotation.
</violation>
<violation beginline="898" endline="898" begincolumn="40" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddAsisRemove" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="898" endline="909" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$AddAsisRemove" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="931" endline="1002" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$CrLf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like CrLf
</violation>
<violation beginline="936" endline="936" begincolumn="30" endcolumn="61" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="FixCrLfFilter$CrLf" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="950" endline="952" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$CrLf" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
<violation beginline="959" endline="961" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$CrLf" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'equals(Object)' is missing an @Override annotation.
</violation>
<violation beginline="967" endline="969" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="FixCrLfFilter$CrLf" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'hashCode()' is missing an @Override annotation.
</violation>
<violation beginline="971" endline="985" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.filters" class="FixCrLfFilter$CrLf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/HeadFilter.java">
<violation beginline="47" endline="47" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="HeadFilter" variable="linesRead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'linesRead'
</violation>
<violation beginline="56" endline="56" begincolumn="18" endcolumn="25" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="HeadFilter" variable="skip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skip'
</violation>
<violation beginline="59" endline="59" begincolumn="27" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="HeadFilter" variable="lineTokenizer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lineTokenizer'
</violation>
<violation beginline="62" endline="62" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="HeadFilter" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'line'
</violation>
<violation beginline="64" endline="64" begincolumn="23" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="HeadFilter" variable="linePos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'linePos'
</violation>
<violation beginline="64" endline="64" begincolumn="13" endcolumn="36" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.filters" class="HeadFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'linePos' could be replaced by a local variable.
</violation>
<violation beginline="102" endline="126" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="HeadFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="174" endline="180" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="HeadFilter" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="207" endline="209" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.filters" class="HeadFilter" method="headFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="213" endline="216" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.filters" class="HeadFilter" method="headFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/LineContains.java">
<violation beginline="72" endline="72" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="72" endline="72" begincolumn="43" endcolumn="50" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.filters" class="LineContains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="LineContains" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'line'
</violation>
<violation beginline="81" endline="81" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="LineContains" variable="negate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'negate'
</violation>
<violation beginline="83" endline="83" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="LineContains" variable="matchAny" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'matchAny'
</violation>
<violation beginline="114" endline="162" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContains" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="222" endline="222" begincolumn="36" endcolumn="49" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContains" method="setContains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="235" endline="235" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContains" method="getContains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="249" endline="255" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContains" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/LineContainsRegExp.java">
<violation beginline="61" endline="61" begincolumn="13" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContainsRegExp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="61" endline="61" begincolumn="53" endcolumn="60" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.filters" class="LineContainsRegExp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="68" endline="68" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="LineContainsRegExp" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'line'
</violation>
<violation beginline="70" endline="70" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="LineContainsRegExp" variable="negate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'negate'
</violation>
<violation beginline="103" endline="136" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContainsRegExp" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="157" endline="157" begincolumn="35" endcolumn="59" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContainsRegExp" method="setRegexps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="171" endline="171" begincolumn="13" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContainsRegExp" method="getRegexps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="185" endline="192" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="LineContainsRegExp" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/PrefixLines.java">
<violation beginline="45" endline="45" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="PrefixLines" variable="prefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'prefix'
</violation>
<violation beginline="48" endline="48" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="PrefixLines" variable="queuedData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'queuedData'
</violation>
<violation beginline="81" endline="111" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="PrefixLines" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="87" endline="87" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="PrefixLines" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on lines 94 and 102)
</violation>
<violation beginline="143" endline="148" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="PrefixLines" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/ReplaceTokens.java">
<violation beginline="64" endline="64" begincolumn="13" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="67" endline="67" begincolumn="19" endcolumn="41" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'TreeMap'; use the interface instead
</violation>
<violation beginline="68" endline="68" begincolumn="21" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="ReplaceTokens" variable="resolvedTokensBuilt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolvedTokensBuilt'
</violation>
<violation beginline="73" endline="73" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="ReplaceTokens" variable="replaceData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'replaceData'
</violation>
<violation beginline="89" endline="90" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="ReplaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="112" endline="165" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="159" endline="159" begincolumn="32" endcolumn="33" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="244" endline="244" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="getProperties" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="246" endline="257" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="getProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="253" endline="253" begincolumn="17" endcolumn="37" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="getProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="268" endline="268" begincolumn="34" endcolumn="58" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="setTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="278" endline="278" begincolumn="13" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="getTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="292" endline="299" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="ReplaceTokens" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="338" endline="381" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.filters" class="ReplaceTokens$Token" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Token' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=4)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/SortFilter.java">
<violation beginline="138" endline="138" begincolumn="40" endcolumn="56" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="SortFilter" variable="comparator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'comparator'
</violation>
<violation beginline="158" endline="158" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="SortFilter" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'line'
</violation>
<violation beginline="160" endline="160" begincolumn="30" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="SortFilter" variable="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'iterator'
</violation>
<violation beginline="195" endline="236" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="SortFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="248" endline="254" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="SortFilter" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="334" endline="337" begincolumn="25" endcolumn="65" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="SortFilter" method="initialize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="338" endline="340" begincolumn="23" endcolumn="21" rule="IdenticalCatchBranches" ruleset="Code Style" package="org.apache.tools.ant.filters" class="SortFilter" method="initialize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#identicalcatchbranches" priority="3">
'catch' branch identical to 'InstantiationException | ClassNotFoundException | IllegalAccessException' branch
</violation>
<violation beginline="338" endline="338" begincolumn="30" endcolumn="38" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.filters" class="SortFilter" method="initialize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/StripJavaComments.java">
<violation beginline="46" endline="46" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="StripJavaComments" variable="inString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inString'
</violation>
<violation beginline="51" endline="51" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="StripJavaComments" variable="quoted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quoted'
</violation>
<violation beginline="82" endline="128" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripJavaComments" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="83" endline="83" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripJavaComments" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on lines 85 and 88)
</violation>
<violation beginline="97" endline="122" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.filters" class="StripJavaComments" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="141" endline="143" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripJavaComments" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/StripLineBreaks.java">
<violation beginline="82" endline="97" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripLineBreaks" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="129" endline="134" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripLineBreaks" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/StripLineComments.java">
<violation beginline="58" endline="58" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripLineComments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="58" endline="58" begincolumn="43" endcolumn="50" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.filters" class="StripLineComments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="61" endline="61" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="StripLineComments" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'line'
</violation>
<violation beginline="93" endline="135" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripLineComments" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="153" endline="153" begincolumn="36" endcolumn="49" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripLineComments" method="setComments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="162" endline="162" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripLineComments" method="getComments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="176" endline="181" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="StripLineComments" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/SuffixLines.java">
<violation beginline="46" endline="46" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="SuffixLines" variable="suffix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suffix'
</violation>
<violation beginline="49" endline="49" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="SuffixLines" variable="queuedData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'queuedData'
</violation>
<violation beginline="82" endline="121" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="SuffixLines" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="88" endline="88" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="SuffixLines" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on lines 97 and 114)
</violation>
<violation beginline="153" endline="158" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="SuffixLines" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/TabsToSpaces.java">
<violation beginline="52" endline="52" begincolumn="17" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TabsToSpaces" variable="spacesRemaining" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'spacesRemaining'
</violation>
<violation beginline="83" endline="102" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TabsToSpaces" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="89" endline="89" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TabsToSpaces" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on lines 93 and 95)
</violation>
<violation beginline="132" endline="137" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TabsToSpaces" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="147" endline="150" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.filters" class="TabsToSpaces" method="initialize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/TailFilter.java">
<violation beginline="56" endline="56" begincolumn="18" endcolumn="25" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TailFilter" variable="skip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skip'
</violation>
<violation beginline="59" endline="59" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TailFilter" variable="completedReadAhead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'completedReadAhead'
</violation>
<violation beginline="62" endline="62" begincolumn="27" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TailFilter" variable="lineTokenizer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lineTokenizer'
</violation>
<violation beginline="65" endline="65" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TailFilter" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'line'
</violation>
<violation beginline="67" endline="67" begincolumn="23" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TailFilter" variable="linePos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'linePos'
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="36" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.filters" class="TailFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'linePos' could be replaced by a local variable.
</violation>
<violation beginline="69" endline="69" begincolumn="13" endcolumn="30" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TailFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'LinkedList'; use the interface instead
</violation>
<violation beginline="69" endline="69" begincolumn="32" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters" class="TailFilter" variable="lineList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'lineList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="105" endline="126" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TailFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="174" endline="180" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TailFilter" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="236" endline="236" begincolumn="13" endcolumn="25" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TailFilter" method="tailFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/TokenFilter.java">
<violation beginline="61" endline="61" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="61" endline="61" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters" class="TokenFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="61" endline="61" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="63" endline="63" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter" variable="tokenizer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'tokenizer'
</violation>
<violation beginline="63" endline="63" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters" class="TokenFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="65" endline="65" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter" variable="delimOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'delimOutput'
</violation>
<violation beginline="65" endline="65" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters" class="TokenFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="67" endline="67" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'line'
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters" class="TokenFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="69" endline="69" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter" variable="linePos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'linePos'
</violation>
<violation beginline="69" endline="69" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters" class="TokenFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="69" endline="69" begincolumn="13" endcolumn="31" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.filters" class="TokenFilter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'linePos' could be replaced by a local variable.
</violation>
<violation beginline="103" endline="133" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
<violation beginline="121" endline="121" begincolumn="26" endcolumn="27" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="123" endline="123" begincolumn="26" endcolumn="27" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="144" endline="151" begincolumn="18" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="328" endline="335" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$ChainableReaderFilter" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="369" endline="398" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$ReplaceString" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
<violation beginline="423" endline="431" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$ContainsString" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
<violation beginline="442" endline="442" begincolumn="36" endcolumn="54" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter$ReplaceRegex" variable="initialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initialized'
</violation>
<violation beginline="442" endline="442" begincolumn="36" endcolumn="46" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters" class="TokenFilter$ReplaceRegex" variable="initialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'initialized' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="491" endline="499" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$ReplaceRegex" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
<violation beginline="510" endline="510" begincolumn="36" endcolumn="54" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="TokenFilter$ContainsRegex" variable="initialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initialized'
</violation>
<violation beginline="510" endline="510" begincolumn="36" endcolumn="46" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters" class="TokenFilter$ContainsRegex" variable="initialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'initialized' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="560" endline="570" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$ContainsRegex" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
<violation beginline="574" endline="582" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.filters" class="TokenFilter$Trim" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Trim
</violation>
<violation beginline="579" endline="581" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$Trim" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
<violation beginline="592" endline="597" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$IgnoreBlank" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
<violation beginline="622" endline="631" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$DeleteCharacters" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
<violation beginline="640" endline="658" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$DeleteCharacters" method="chain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'chain(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="645" endline="656" begincolumn="24" endcolumn="17" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="TokenFilter$DeleteCharacters" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'read()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/UniqFilter.java">
<violation beginline="31" endline="31" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters" class="UniqFilter" variable="lastLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lastLine'
</violation>
<violation beginline="33" endline="39" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.filters" class="UniqFilter" method="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'filter(String)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/filters/util/ChainReaderHelper.java">
<violation beginline="55" endline="55" begincolumn="38" endcolumn="51" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper$ChainReader" variable="cleanupLoaders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cleanupLoaders' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="83" endline="83" begincolumn="26" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="88" endline="88" begincolumn="12" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="93" endline="93" begincolumn="12" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="98" endline="98" begincolumn="12" endcolumn="30" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="98" endline="98" begincolumn="12" endcolumn="61" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="98" endline="98" begincolumn="51" endcolumn="58" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="101" endline="101" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'project'
</violation>
<violation beginline="101" endline="101" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="108" endline="109" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" method="ChainReaderHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="192" endline="192" begincolumn="33" endcolumn="51" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" method="setFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="206" endline="206" begincolumn="23" endcolumn="30" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" method="withFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="228" endline="228" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" method="getAssembledReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="245" endline="247" begincolumn="25" endcolumn="73" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" method="getAssembledReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'instream' is reassigned, but the original instance is not closed
</violation>
<violation beginline="317" endline="317" begincolumn="40" endcolumn="41" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" method="expandReader" variable="al" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="324" endline="325" begincolumn="21" endcolumn="54" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.filters.util" class="ChainReaderHelper" method="expandReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/helper/AntXMLContext.java">
<violation beginline="44" endline="44" begincolumn="21" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="AntXMLContext" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'project' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="56" endline="56" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="AntXMLContext" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="56" endline="56" begincolumn="28" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="AntXMLContext" variable="targetVector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'targetVector' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="56" endline="56" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.helper" class="AntXMLContext" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="89" endline="89" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.helper" class="AntXMLContext" variable="currentTarget" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'currentTarget'
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="39" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="AntXMLContext" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="94" endline="94" begincolumn="41" endcolumn="46" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="AntXMLContext" variable="wStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'wStack' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="94" endline="94" begincolumn="54" endcolumn="61" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.helper" class="AntXMLContext" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="100" endline="100" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.helper" class="AntXMLContext" variable="ignoreProjectTag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreProjectTag'
</violation>
<violation beginline="103" endline="103" begincolumn="39" endcolumn="51" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="AntXMLContext" variable="prefixMapping" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'prefixMapping' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="107" endline="107" begincolumn="33" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.helper" class="AntXMLContext" variable="currentTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'currentTargets'
</violation>
<violation beginline="217" endline="217" begincolumn="13" endcolumn="23" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="AntXMLContext" method="currentWrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="247" endline="247" begincolumn="13" endcolumn="23" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="AntXMLContext" method="popWrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="256" endline="256" begincolumn="12" endcolumn="38" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="AntXMLContext" method="getWrapperStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="305" endline="305" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="AntXMLContext" method="getTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/helper/DefaultExecutor.java">
<violation beginline="36" endline="36" begincolumn="49" endcolumn="68" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="DefaultExecutor" method="executeTargets" variable="targetNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="36" endline="53" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="DefaultExecutor" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'executeTargets(Project, String)' is missing an @Override annotation.
</violation>
<violation beginline="37" endline="37" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.helper" class="DefaultExecutor" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="56" endline="58" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="DefaultExecutor" method="getSubProjectExecutor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getSubProjectExecutor()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/helper/IgnoreDependenciesExecutor.java">
<violation beginline="41" endline="41" begincolumn="49" endcolumn="68" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="IgnoreDependenciesExecutor" method="executeTargets" variable="targetNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="41" endline="63" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="IgnoreDependenciesExecutor" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'executeTargets(Project, String)' is missing an @Override annotation.
</violation>
<violation beginline="42" endline="42" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.helper" class="IgnoreDependenciesExecutor" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="66" endline="68" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="IgnoreDependenciesExecutor" method="getSubProjectExecutor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getSubProjectExecutor()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/helper/ProjectHelper2.java">
<violation beginline="126" endline="126" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parseUnknownElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="150" endline="150" begincolumn="62" endcolumn="75" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="152" endline="152" begincolumn="33" endcolumn="36" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'context' is never used (overwritten on line 153)
</violation>
<violation beginline="200" endline="200" begincolumn="83" endcolumn="96" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="206" endline="206" begincolumn="32" endcolumn="35" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'buildFileName' is never used (overwritten on lines 226 and 234)
</violation>
<violation beginline="239" endline="239" begincolumn="21" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" variable="inputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="240" endline="240" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'inputSource' is never used (overwritten on line 268)
</violation>
<violation beginline="241" endline="241" begincolumn="17" endcolumn="18" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" variable="zf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this ZipFile object are closed after use
</violation>
<violation beginline="243" endline="311" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="249" endline="249" begincolumn="26" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'uri' is never used (overwritten on lines 251 and 254)
</violation>
<violation beginline="291" endline="291" begincolumn="17" endcolumn="25" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="403" endline="404" begincolumn="84" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.helper" class="ProjectHelper2$AntHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="439" endline="440" begincolumn="38" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.helper" class="ProjectHelper2$AntHandler" method="onEndChild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="449" endline="450" begincolumn="81" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.helper" class="ProjectHelper2$AntHandler" method="onEndElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="479" endline="480" begincolumn="51" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.helper" class="ProjectHelper2$AntHandler" method="checkNamespace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="489" endline="489" begincolumn="35" endcolumn="45" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2$RootHandler" variable="antHandlers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'antHandlers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="490" endline="490" begincolumn="28" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.helper" class="ProjectHelper2$RootHandler" variable="currentHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'currentHandler'
</violation>
<violation beginline="490" endline="490" begincolumn="45" endcolumn="48" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2$RootHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'currentHandler' is never used (overwritten on line 500)
</violation>
<violation beginline="491" endline="491" begincolumn="31" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2$RootHandler" variable="context" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'context' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="732" endline="734" begincolumn="29" endcolumn="29" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2$ProjectHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="745" endline="750" begincolumn="33" endcolumn="33" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2$ProjectHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="757" endline="759" begincolumn="29" endcolumn="29" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelper2$ProjectHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="782" endline="782" begincolumn="34" endcolumn="37" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2$ProjectHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'dupFile' is never used (overwritten on lines 786 and 795)
</violation>
<violation beginline="783" endline="783" begincolumn="38" endcolumn="41" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2$ProjectHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'contextFile' is never used (overwritten on lines 793 and 796)
</violation>
<violation beginline="949" endline="949" begincolumn="29" endcolumn="97" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelper2$TargetHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1007" endline="1008" begincolumn="17" endcolumn="62" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.helper" class="ProjectHelper2$TargetHandler" method="onStartElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1112" endline="1113" begincolumn="16" endcolumn="9" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.helper" class="ProjectHelper2$ElementHandler" method="ElementHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="1112" endline="1113" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.helper" class="ProjectHelper2$ElementHandler" method="ElementHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/helper/ProjectHelperImpl.java">
<violation beginline="92" endline="92" begincolumn="20" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" variable="implicitTarget" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'implicitTarget' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="109" endline="109" begincolumn="62" endcolumn="75" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="109" endline="167" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parse(Project, Object)' is missing an @Override annotation.
</violation>
<violation beginline="115" endline="115" begincolumn="21" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" variable="inputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="116" endline="116" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'inputSource' is never used (overwritten on line 130)
</violation>
<violation beginline="122" endline="166" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="149" endline="149" begincolumn="17" endcolumn="25" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="151" endline="151" begincolumn="13" endcolumn="68" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="157" endline="157" begincolumn="13" endcolumn="58" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="196" endline="196" begincolumn="9" endcolumn="37" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$AbstractHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="230" endline="232" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$AbstractHandler" method="startElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startElement(String, AttributeList)' is missing an @Override annotation.
</violation>
<violation beginline="246" endline="252" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$AbstractHandler" method="characters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'characters(char, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="265" endline="268" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$AbstractHandler" method="endElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'endElement(String)' is missing an @Override annotation.
</violation>
<violation beginline="276" endline="276" begincolumn="9" endcolumn="37" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$RootHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="292" endline="317" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$RootHandler" method="resolveEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resolveEntity(String, String)' is missing an @Override annotation.
</violation>
<violation beginline="331" endline="338" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$RootHandler" method="startElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startElement(String, AttributeList)' is missing an @Override annotation.
</violation>
<violation beginline="346" endline="348" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$RootHandler" method="setDocumentLocator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setDocumentLocator(Locator)' is missing an @Override annotation.
</violation>
<violation beginline="461" endline="467" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$ProjectHandler" method="startElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startElement(String, AttributeList)' is missing an @Override annotation.
</violation>
<violation beginline="598" endline="600" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TargetHandler" method="startElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startElement(String, AttributeList)' is missing an @Override annotation.
</violation>
<violation beginline="648" endline="656" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$DescriptionHandler" method="characters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'characters(char, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="665" endline="665" begincolumn="24" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TaskHandler" variable="target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'target' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="671" endline="671" begincolumn="31" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TaskHandler" variable="container" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'container' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="682" endline="682" begincolumn="37" endcolumn="49" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TaskHandler" variable="parentWrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'parentWrapper' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="690" endline="690" begincolumn="37" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TaskHandler" variable="wrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'wrapper'
</violation>
<violation beginline="736" endline="739" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TaskHandler" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="767" endline="769" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TaskHandler" method="characters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'characters(char, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="784" endline="792" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$TaskHandler" method="startElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startElement(String, AttributeList)' is missing an @Override annotation.
</violation>
<violation beginline="809" endline="809" begincolumn="37" endcolumn="49" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$NestedElementHandler" variable="parentWrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'parentWrapper' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="817" endline="817" begincolumn="37" endcolumn="55" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$NestedElementHandler" variable="childWrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'childWrapper'
</violation>
<violation beginline="820" endline="820" begincolumn="24" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$NestedElementHandler" variable="target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'target' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="902" endline="904" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$NestedElementHandler" method="characters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'characters(char, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="919" endline="929" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$NestedElementHandler" method="startElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startElement(String, AttributeList)' is missing an @Override annotation.
</violation>
<violation beginline="937" endline="937" begincolumn="24" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$DataTypeHandler" variable="target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'target' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="943" endline="943" begincolumn="37" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$DataTypeHandler" variable="wrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'wrapper'
</violation>
<violation beginline="1001" endline="1003" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$DataTypeHandler" method="characters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'characters(char, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="1017" endline="1019" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="ProjectHelperImpl$DataTypeHandler" method="startElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'startElement(String, AttributeList)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/helper/SingleCheckExecutor.java">
<violation beginline="34" endline="34" begincolumn="49" endcolumn="68" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="SingleCheckExecutor" method="executeTargets" variable="targetNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="34" endline="38" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="SingleCheckExecutor" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'executeTargets(Project, String)' is missing an @Override annotation.
</violation>
<violation beginline="35" endline="35" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.helper" class="SingleCheckExecutor" method="executeTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="41" endline="43" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.helper" class="SingleCheckExecutor" method="getSubProjectExecutor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getSubProjectExecutor()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/input/DefaultInputHandler.java">
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.input" class="DefaultInputHandler" method="DefaultInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.input" class="DefaultInputHandler" method="DefaultInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="48" endline="48" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.input" class="DefaultInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="48" endline="80" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.input" class="DefaultInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleInput(InputRequest)' is missing an @Override annotation.
</violation>
<violation beginline="52" endline="79" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.input" class="DefaultInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="55" endline="55" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.input" class="DefaultInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="69" endline="79" begincolumn="11" endcolumn="9" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.input" class="DefaultInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/input/GreedyInputHandler.java">
<violation beginline="38" endline="39" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.input" class="GreedyInputHandler" method="GreedyInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="38" endline="39" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.input" class="GreedyInputHandler" method="GreedyInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="47" endline="47" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.input" class="GreedyInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="47" endline="79" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.input" class="GreedyInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleInput(InputRequest)' is missing an @Override annotation.
</violation>
<violation beginline="49" endline="49" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.input" class="GreedyInputHandler" method="handleInput" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="50" endline="78" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.input" class="GreedyInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="52" endline="52" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.input" class="GreedyInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/input/InputHandler.java">
<violation beginline="42" endline="42" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.input" class="InputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/input/InputRequest.java">
<violation beginline="26" endline="93" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.input" class="InputRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'InputRequest' is suspected to be a Data Class (WOC=14.286%, NOPA=0, NOAM=5, WMC=9)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/input/MultipleChoiceInputRequest.java">
<violation beginline="31" endline="31" begincolumn="19" endcolumn="39" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.input" class="MultipleChoiceInputRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'LinkedHashSet'; use the interface instead
</violation>
<violation beginline="40" endline="40" begincolumn="54" endcolumn="67" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.input" class="MultipleChoiceInputRequest" method="MultipleChoiceInputRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="60" endline="60" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.input" class="MultipleChoiceInputRequest" method="getChoices" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="61" endline="61" begincolumn="20" endcolumn="27" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.input" class="MultipleChoiceInputRequest" method="getChoices" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/input/PropertyFileInputHandler.java">
<violation beginline="35" endline="35" begincolumn="24" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.input" class="PropertyFileInputHandler" variable="props" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'props'
</violation>
<violation beginline="45" endline="46" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.input" class="PropertyFileInputHandler" method="PropertyFileInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="45" endline="46" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.input" class="PropertyFileInputHandler" method="PropertyFileInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="55" endline="55" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.input" class="PropertyFileInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="55" endline="68" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.input" class="PropertyFileInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleInput(InputRequest)' is missing an @Override annotation.
</violation>
<violation beginline="73" endline="73" begincolumn="50" endcolumn="63" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.input" class="PropertyFileInputHandler" method="readProps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="73" endline="91" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.input" class="PropertyFileInputHandler" method="readProps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/input/SecureInputHandler.java">
<violation beginline="33" endline="34" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.input" class="SecureInputHandler" method="SecureInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="33" endline="34" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.input" class="SecureInputHandler" method="SecureInputHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="42" endline="42" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.input" class="SecureInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="42" endline="52" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.input" class="SecureInputHandler" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleInput(InputRequest)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/launch/Launcher.java">
<violation beginline="33" endline="411" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.launch" class="Launcher" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="105" endline="105" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="106" endline="109" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.launch" class="Launcher" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="112" endline="112" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="121" endline="121" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.launch" class="Launcher" variable="launchDiag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'launchDiag'
</violation>
<violation beginline="121" endline="121" begincolumn="12" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.launch" class="Launcher" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="149" endline="149" begincolumn="25" endcolumn="42" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="addPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="157" endline="157" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="addPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="173" endline="173" begincolumn="21" endcolumn="39" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="210" endline="210" begincolumn="37" endcolumn="37" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="220" endline="220" begincolumn="35" endcolumn="35" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="232" endline="232" begincolumn="40" endcolumn="40" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="248" endline="248" begincolumn="23" endcolumn="65" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="276" endline="276" begincolumn="30" endcolumn="35" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.launch" class="Launcher" method="run" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this URLClassLoader object are closed after use
</violation>
<violation beginline="286" endline="286" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="289" endline="289" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="293" endline="293" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="296" endline="299" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="301" endline="301" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="302" endline="302" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="303" endline="303" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="304" endline="304" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="330" endline="330" begincolumn="16" endcolumn="63" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.launch" class="Launcher" method="getLibPathURLs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="401" endline="401" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="setProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="408" endline="408" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Launcher" method="logPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/launch/Locator.java">
<violation beginline="121" endline="121" begincolumn="54" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Locator" method="getResourceSource" variable="c" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'c'
</violation>
<violation beginline="142" endline="144" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.launch" class="Locator" method="getResourceSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="215" endline="215" begincolumn="48" endcolumn="50" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Locator" method="fromURIJava13" variable="uri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'uri'
</violation>
<violation beginline="215" endline="215" begincolumn="48" endcolumn="50" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Locator" method="fromURIJava13" variable="uri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'uri'
</violation>
<violation beginline="221" endline="223" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.launch" class="Locator" method="fromURIJava13" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="241" endline="241" begincolumn="23" endcolumn="26" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Locator" method="fromURIJava13" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'path' is never used (overwritten on line 243)
</violation>
<violation beginline="249" endline="249" begincolumn="57" endcolumn="58" rule="AddEmptyString" ruleset="Performance" package="org.apache.tools.ant.launch" class="Locator" method="fromURIJava13" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#addemptystring" priority="3">
Do not add empty strings
</violation>
<violation beginline="256" endline="258" begincolumn="13" endcolumn="36" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Locator" method="fromURIJava13" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="322" endline="322" begincolumn="18" endcolumn="18" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Locator" method="encodeURI" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on lines 325 and 357)
</violation>
<violation beginline="407" endline="407" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.launch" class="Locator" method="getToolsJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="411" endline="411" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.launch" class="Locator" method="getToolsJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="411" endline="413" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.launch" class="Locator" method="getToolsJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="434" endline="434" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.launch" class="Locator" method="getToolsJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/listener/AnsiColorLogger.java">
<violation beginline="149" endline="149" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.listener" class="AnsiColorLogger" variable="colorsSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'colorsSet'
</violation>
<violation beginline="160" endline="160" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="AnsiColorLogger" method="setColors" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="162" endline="199" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="AnsiColorLogger" method="setColors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="195" endline="197" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="AnsiColorLogger" method="setColors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/listener/BigProjectLogger.java">
<violation beginline="35" endline="35" begincolumn="30" endcolumn="58" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.listener" class="BigProjectLogger" variable="subBuildStartedRaised" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'subBuildStartedRaised'
</violation>
<violation beginline="57" endline="59" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="getBuildFailedMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getBuildFailedMessage()' is missing an @Override annotation.
</violation>
<violation beginline="68" endline="70" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="getBuildSuccessfulMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getBuildSuccessfulMessage()' is missing an @Override annotation.
</violation>
<violation beginline="77" endline="80" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="87" endline="90" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'taskStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="97" endline="101" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="108" endline="111" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'messageLogged(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="119" endline="127" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="subBuildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'subBuildStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="146" endline="152" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="BigProjectLogger" method="subBuildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'subBuildFinished(BuildEvent)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/listener/CommonsLoggingListener.java">
<violation beginline="57" endline="57" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" variable="initialized" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initialized'
</violation>
<violation beginline="74" endline="75" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="CommonsLoggingListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="74" endline="75" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="CommonsLoggingListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="77" endline="77" begincolumn="31" endcolumn="33" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="getLog" variable="cat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'cat'
</violation>
<violation beginline="77" endline="77" begincolumn="43" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="getLog" variable="suffix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'suffix'
</violation>
<violation beginline="77" endline="77" begincolumn="43" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="getLog" variable="suffix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'suffix'
</violation>
<violation beginline="83" endline="83" begincolumn="27" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="getLog" variable="tmpOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="84" endline="84" begincolumn="27" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="getLog" variable="tmpErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="257" endline="257" begincolumn="27" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="realLog" variable="tmpOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="258" endline="258" begincolumn="27" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" method="realLog" variable="tmpErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="298" endline="298" begincolumn="5" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="298" endline="298" begincolumn="5" endcolumn="33" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="299" endline="299" begincolumn="5" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="299" endline="299" begincolumn="5" endcolumn="33" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.listener" class="CommonsLoggingListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/listener/Log4jListener.java">
<violation beginline="35" endline="165" begincolumn="8" endcolumn="1" rule="MoreThanOneLogger" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="Log4jListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#morethanonelogger" priority="2">
Class contains more than one logger.
</violation>
<violation beginline="82" endline="82" begincolumn="9" endcolumn="75" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="Log4jListener" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="63" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="Log4jListener" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="96" endline="97" begincolumn="13" endcolumn="66" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="Log4jListener" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="109" endline="109" begincolumn="9" endcolumn="64" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="Log4jListener" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="121" endline="121" begincolumn="13" endcolumn="69" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="Log4jListener" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="123" endline="124" begincolumn="13" endcolumn="66" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="Log4jListener" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/listener/MailLogger.java">
<violation beginline="101" endline="101" begincolumn="26" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.listener" class="MailLogger" variable="buffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'buffer' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="101" endline="101" begincolumn="13" endcolumn="24" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="MailLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="120" endline="120" begincolumn="25" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger" method="buildFinished" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="121" endline="128" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="MailLogger" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="124" endline="126" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="175" endline="175" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.listener" class="MailLogger" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="176" endline="176" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="MailLogger" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="182" endline="182" begincolumn="17" endcolumn="32" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field mailhost has the same name as a method
</violation>
<violation beginline="190" endline="190" begincolumn="17" endcolumn="25" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field port has the same name as a method
</violation>
<violation beginline="190" endline="190" begincolumn="17" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="198" endline="198" begincolumn="17" endcolumn="28" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field user has the same name as a method
</violation>
<violation beginline="198" endline="198" begincolumn="17" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="206" endline="206" begincolumn="17" endcolumn="32" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field password has the same name as a method
</violation>
<violation beginline="206" endline="206" begincolumn="17" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="214" endline="214" begincolumn="17" endcolumn="28" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field ssl has the same name as a method
</violation>
<violation beginline="214" endline="214" begincolumn="17" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="222" endline="222" begincolumn="17" endcolumn="28" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field from has the same name as a method
</violation>
<violation beginline="222" endline="222" begincolumn="17" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="230" endline="230" begincolumn="17" endcolumn="35" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field replytoList has the same name as a method
</violation>
<violation beginline="230" endline="230" begincolumn="17" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="238" endline="238" begincolumn="17" endcolumn="30" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field toList has the same name as a method
</violation>
<violation beginline="238" endline="238" begincolumn="17" endcolumn="30" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="246" endline="246" begincolumn="17" endcolumn="32" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field toCcList has the same name as a method
</violation>
<violation beginline="246" endline="246" begincolumn="17" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="254" endline="254" begincolumn="17" endcolumn="33" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field toBccList has the same name as a method
</violation>
<violation beginline="254" endline="254" begincolumn="17" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="262" endline="262" begincolumn="17" endcolumn="31" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field subject has the same name as a method
</violation>
<violation beginline="262" endline="262" begincolumn="17" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="270" endline="270" begincolumn="17" endcolumn="31" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field charset has the same name as a method
</violation>
<violation beginline="270" endline="270" begincolumn="17" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="278" endline="278" begincolumn="17" endcolumn="32" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field mimeType has the same name as a method
</violation>
<violation beginline="278" endline="278" begincolumn="17" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="286" endline="286" begincolumn="17" endcolumn="28" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field body has the same name as a method
</violation>
<violation beginline="286" endline="286" begincolumn="17" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="294" endline="294" begincolumn="17" endcolumn="33" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field starttls has the same name as a method
</violation>
<violation beginline="294" endline="294" begincolumn="17" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.listener" class="MailLogger$Values" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="335" endline="335" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant.listener" class="MailLogger" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="375" endline="375" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.listener" class="MailLogger" method="sendMail" variable="ps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="387" endline="387" begincolumn="25" endcolumn="28" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="MailLogger" method="sendMimeMail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'mailer' is never used (overwritten on line 389)
</violation>
<violation beginline="421" endline="421" begincolumn="29" endcolumn="36" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.listener" class="MailLogger" method="sendMimeMail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="423" endline="423" begincolumn="31" endcolumn="38" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.listener" class="MailLogger" method="sendMimeMail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="427" endline="427" begincolumn="13" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.listener" class="MailLogger" method="splitEmailAddresses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/listener/ProfileLogger.java">
<violation beginline="34" endline="34" begincolumn="31" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.listener" class="ProfileLogger" variable="profileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'profileData' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/loader/AntClassLoader2.java">
<violation beginline="33" endline="34" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.loader" class="AntClassLoader2" method="AntClassLoader2" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="33" endline="34" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.loader" class="AntClassLoader2" method="AntClassLoader2" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/property/LocalProperties.java">
<violation beginline="28" endline="150" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.property" class="LocalProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="38" endline="47" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.property" class="LocalProperties" method="get" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="66" endline="68" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.property" class="LocalProperties" method="initialValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/property/ParseProperties.java">
<violation beginline="34" endline="34" begincolumn="19" endcolumn="42" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.property" class="ParseProperties" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field getProperty has the same name as a method
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/property/ResolvePropertyMap.java">
<violation beginline="40" endline="40" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.property" class="ResolvePropertyMap" variable="prefixValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'prefixValues'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/AbstractCvsTask.java">
<violation beginline="58" endline="58" begincolumn="25" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="cmd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cmd' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="60" endline="60" begincolumn="26" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="modules" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'modules' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="63" endline="63" begincolumn="31" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="commandlines" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'commandlines' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="63" endline="63" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="93" endline="93" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'command'
</violation>
<violation beginline="98" endline="98" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="quiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quiet'
</violation>
<violation beginline="103" endline="103" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="reallyquiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reallyquiet'
</violation>
<violation beginline="108" endline="108" begincolumn="17" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="compression" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'compression'
</violation>
<violation beginline="113" endline="113" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="noexec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'noexec'
</violation>
<violation beginline="118" endline="118" begincolumn="17" endcolumn="24" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="port" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'port'
</violation>
<violation beginline="123" endline="123" begincolumn="18" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="passFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'passFile'
</violation>
<violation beginline="133" endline="133" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="append" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'append'
</violation>
<violation beginline="149" endline="149" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" variable="failOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnError'
</violation>
<violation beginline="263" endline="263" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" method="runCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="374" endline="379" begincolumn="11" endcolumn="9" rule="IdenticalCatchBranches" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" method="runCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#identicalcatchbranches" priority="3">
'catch' branch identical to 'IOException' branch
</violation>
<violation beginline="374" endline="374" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" method="runCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="388" endline="388" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="405" endline="414" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="465" endline="465" begincolumn="35" endcolumn="38" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" method="setCvsRoot" variable="root" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'root'
</violation>
<violation beginline="489" endline="489" begincolumn="34" endcolumn="36" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AbstractCvsTask" method="setCvsRsh" variable="rsh" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'rsh'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/AbstractJarSignerTask.java">
<violation beginline="39" endline="420" begincolumn="17" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'AbstractJarSignerTask' is suspected to be a Data Class (WOC=21.429%, NOPA=1, NOAM=11, WMC=39)
</violation>
<violation beginline="84" endline="84" begincolumn="23" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" variable="strict" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'strict'
</violation>
<violation beginline="92" endline="92" begincolumn="15" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="92" endline="92" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="103" endline="103" begincolumn="25" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" variable="sysProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'sysProperties' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="110" endline="110" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'path'
</violation>
<violation beginline="263" endline="263" begincolumn="32" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" method="createRedirector" variable="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LineContainsRegExp object are closed after use
</violation>
<violation beginline="323" endline="323" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" method="declareSysProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="374" endline="374" begincolumn="15" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" method="createUnifiedSources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="375" endline="375" begincolumn="39" endcolumn="46" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AbstractJarSignerTask" method="createUnifiedSources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Ant.java">
<violation beginline="68" endline="812" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Ant" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Ant
</violation>
<violation beginline="73" endline="73" begincolumn="18" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" variable="dir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dir'
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" variable="antFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'antFile'
</violation>
<violation beginline="82" endline="82" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" variable="output" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'output'
</violation>
<violation beginline="88" endline="88" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" variable="inheritRefs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inheritRefs'
</violation>
<violation beginline="91" endline="91" begincolumn="28" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" variable="properties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'properties' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="91" endline="91" begincolumn="45" endcolumn="52" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="94" endline="94" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" variable="references" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'references' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="94" endline="94" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="100" endline="100" begincolumn="25" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'out'
</violation>
<violation beginline="103" endline="103" begincolumn="31" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" variable="propertySets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'propertySets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="103" endline="103" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="106" endline="106" begincolumn="26" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" variable="targets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'targets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="106" endline="106" begincolumn="40" endcolumn="47" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="109" endline="109" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" variable="targetAttributeSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetAttributeSet'
</violation>
<violation beginline="118" endline="118" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant" variable="useNativeBasedir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'useNativeBasedir'
</violation>
<violation beginline="338" endline="338" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="342" endline="459" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Ant" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="480" endline="480" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" method="overrideProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="512" endline="512" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" method="addReferences" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="576" endline="576" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" method="copyReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="576" endline="578" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Ant" method="copyReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="589" endline="592" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Ant" method="copyReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="592" endline="592" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ant" method="copyReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="754" endline="754" begincolumn="24" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Ant$Reference" variable="targetid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetid'
</violation>
<violation beginline="788" endline="790" begincolumn="16" endcolumn="9" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Ant$TargetElement" method="TargetElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/AntStructure.java">
<violation beginline="83" endline="83" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AntStructure" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="90" endline="137" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AntStructure" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="91" endline="91" begincolumn="26" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="AntStructure" method="execute" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="103" endline="103" begincolumn="17" endcolumn="61" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="AntStructure" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'out' is reassigned, but the original instance is not closed
</violation>
<violation beginline="103" endline="103" begincolumn="43" endcolumn="52" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="AntStructure" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="157" endline="157" begincolumn="52" endcolumn="78" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AntStructure$StructurePrinter" method="printHead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="158" endline="158" begincolumn="24" endcolumn="50" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AntStructure$StructurePrinter" method="printHead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="190" endline="190" begincolumn="23" endcolumn="47" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AntStructure$DTDPrinter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="216" endline="216" begincolumn="36" endcolumn="40" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="AntStructure$DTDPrinter" method="printHead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " | " appears 5 times in this file; the first occurrence is on line 216
</violation>
<violation beginline="284" endline="291" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="AntStructure$DTDPrinter" method="printElementDecl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="349" endline="349" begincolumn="39" endcolumn="46" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="AntStructure$DTDPrinter" method="printElementDecl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "CDATA " appears 5 times in this file; the first occurrence is on line 349
</violation>
<violation beginline="366" endline="366" begincolumn="36" endcolumn="44" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AntStructure$DTDPrinter" method="printElementDecl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="412" endline="412" begincolumn="49" endcolumn="64" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AntStructure$DTDPrinter" method="areNmtokens" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="439" endline="439" begincolumn="35" endcolumn="50" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AntStructure" method="areNmtokens" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Antlib.java">
<violation beginline="115" endline="115" begincolumn="13" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Antlib" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="116" endline="116" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Antlib" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="117" endline="117" begincolumn="13" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Antlib" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="117" endline="117" begincolumn="24" endcolumn="28" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Antlib" variable="tasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'tasks' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/AntlibDefinition.java">
<violation beginline="31" endline="81" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AntlibDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'AntlibDefinition' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=7)
</violation>
<violation beginline="46" endline="46" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="AntlibDefinition" method="setURI" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="46" endline="46" begincolumn="31" endcolumn="33" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AntlibDefinition" method="setURI" variable="uri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'uri'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/AttributeNamespaceDef.java">
<violation beginline="39" endline="50" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AttributeNamespaceDef" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/AugmentReference.java">
<violation beginline="35" endline="36" begincolumn="54" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="checkProxyClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="35" endline="36" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="checkProxyClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'checkProxyClass(Class)' is missing an @Override annotation.
</violation>
<violation beginline="41" endline="52" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="getProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getProxy()' is missing an @Override annotation.
</violation>
<violation beginline="41" endline="52" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="getProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="57" endline="59" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="setProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProxy(Object)' is missing an @Override annotation.
</violation>
<violation beginline="61" endline="72" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="hijackId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="78" endline="80" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="86" endline="94" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="AugmentReference" method="restoreWrapperId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Available.java">
<violation beginline="56" endline="56" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Available" variable="isTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isTask'
</violation>
<violation beginline="57" endline="57" begincolumn="21" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Available" variable="ignoreSystemclasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreSystemclasses'
</violation>
<violation beginline="58" endline="58" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Available" variable="searchParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'searchParents'
</violation>
<violation beginline="230" endline="230" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Available" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="242" endline="244" begincolumn="21" endcolumn="41" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Available" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="262" endline="262" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Available" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="270" endline="274" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Available" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="381" endline="384" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Available" method="checkFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="428" endline="442" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Available" method="checkResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="501" endline="501" begincolumn="13" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Available$FileDir" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/BUnzip2.java">
<violation beginline="52" endline="54" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="getDefaultExtension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getDefaultExtension()' is missing an @Override annotation.
</violation>
<violation beginline="59" endline="97" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="extract" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'extract()' is missing an @Override annotation.
</violation>
<violation beginline="64" endline="64" begincolumn="26" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="extract" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="65" endline="65" begincolumn="31" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="extract" variable="zIn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this CBZip2InputStream object are closed after use
</violation>
<violation beginline="66" endline="66" begincolumn="25" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="extract" variable="fis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="67" endline="67" begincolumn="33" endcolumn="35" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="extract" variable="bis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedInputStream object are closed after use
</violation>
<violation beginline="68" endline="95" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="extract" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="110" endline="112" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BUnzip2" method="supportsNonFileResources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'supportsNonFileResources()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/BZip2.java">
<violation beginline="43" endline="58" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BZip2" method="pack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'pack()' is missing an @Override annotation.
</violation>
<violation beginline="44" endline="44" begincolumn="28" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="BZip2" method="pack" variable="zOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this CBZip2OutputStream object are closed after use
</violation>
<violation beginline="45" endline="57" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BZip2" method="pack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="46" endline="46" begincolumn="34" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="BZip2" method="pack" variable="bos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedOutputStream object are closed after use
</violation>
<violation beginline="71" endline="73" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BZip2" method="supportsNonFileResources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'supportsNonFileResources()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Basename.java">
<violation beginline="89" endline="89" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Basename" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/BindTargets.java">
<violation beginline="32" endline="83" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="BindTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'BindTargets' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=14)
</violation>
<violation beginline="48" endline="48" begincolumn="13" endcolumn="100" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="BindTargets" method="setOnMissingExtensionPoint" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="62" endline="62" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="BindTargets" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/BuildNumber.java">
<violation beginline="72" endline="72" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="BuildNumber" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="106" endline="106" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="BuildNumber" method="getBuildNumber" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="126" endline="126" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="BuildNumber" method="loadProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="142" endline="142" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="BuildNumber" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/CVSPass.java">
<violation beginline="43" endline="43" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CVSPass" variable="cvsRoot" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cvsRoot'
</violation>
<violation beginline="45" endline="45" begincolumn="18" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CVSPass" variable="passFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'passFile'
</violation>
<violation beginline="45" endline="45" begincolumn="29" endcolumn="32" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CVSPass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'passFile' is never used (overwritten on line 73)
</violation>
<violation beginline="47" endline="47" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CVSPass" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="85" endline="85" begincolumn="40" endcolumn="53" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="97" endline="97" begincolumn="24" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedReader object are closed after use
</violation>
<violation beginline="98" endline="98" begincolumn="24" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" variable="writer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="99" endline="128" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="103" endline="103" begincolumn="49" endcolumn="58" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="105" endline="105" begincolumn="31" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'line' is never used (overwritten on line 107)
</violation>
<violation beginline="107" endline="107" begincolumn="24" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="119" endline="119" begincolumn="45" endcolumn="54" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="131" endline="137" begincolumn="19" endcolumn="5" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="CVSPass" method="mangle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on method 'mangle': private methods cannot be overridden
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/CallTarget.java">
<violation beginline="57" endline="57" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CallTarget" variable="inheritRefs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inheritRefs'
</violation>
<violation beginline="59" endline="59" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CallTarget" variable="targetSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetSet'
</violation>
<violation beginline="83" endline="86" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'init()' is missing an @Override annotation.
</violation>
<violation beginline="93" endline="93" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="93" endline="106" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="177" endline="183" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="handleOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleOutput(String)' is missing an @Override annotation.
</violation>
<violation beginline="199" endline="205" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="handleInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleInput(byte, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="215" endline="221" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="handleFlush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleFlush(String)' is missing an @Override annotation.
</violation>
<violation beginline="232" endline="238" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="handleErrorOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleErrorOutput(String)' is missing an @Override annotation.
</violation>
<violation beginline="248" endline="254" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CallTarget" method="handleErrorFlush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'handleErrorFlush(String)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Checksum.java">
<violation beginline="67" endline="67" begincolumn="23" endcolumn="23" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum$FileUnion" variable="u" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'u' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="70" endline="70" begincolumn="13" endcolumn="24" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Checksum$FileUnion" method="FileUnion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="71" endline="71" begincolumn="13" endcolumn="32" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Checksum$FileUnion" method="FileUnion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="82" endline="82" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'file'
</violation>
<violation beginline="82" endline="82" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="23" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="98" endline="98" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="provider" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'provider'
</violation>
<violation beginline="98" endline="98" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="103" endline="103" begincolumn="13" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="107" endline="107" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="113" endline="113" begincolumn="13" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="113" endline="113" begincolumn="31" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="allDigests" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'allDigests' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="120" endline="120" begincolumn="13" endcolumn="66" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="120" endline="120" begincolumn="31" endcolumn="47" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="relativeFilePaths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'relativeFilePaths' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="124" endline="124" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="129" endline="129" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="133" endline="133" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="137" endline="137" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resources'
</violation>
<violation beginline="137" endline="137" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="141" endline="141" begincolumn="13" endcolumn="35" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="141" endline="141" begincolumn="13" endcolumn="71" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="141" endline="141" begincolumn="37" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="includeFileMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'includeFileMap' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="145" endline="145" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="145" endline="145" begincolumn="13" endcolumn="40" rule="AvoidMessageDigestField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidmessagedigestfield" priority="3">
You shouldnt declare field of MessageDigest type, because unsynchronized access could cause problems
</violation>
<violation beginline="149" endline="149" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="153" endline="153" begincolumn="13" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="158" endline="158" begincolumn="13" endcolumn="74" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Checksum" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="298" endline="298" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="315" endline="315" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="323" endline="323" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" method="validateAndExecute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="422" endline="422" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" method="addToIncludeFileMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="470" endline="470" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" method="generateChecksums" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="472" endline="472" begincolumn="21" endcolumn="23" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Checksum" method="generateChecksums" variable="fis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="473" endline="473" begincolumn="22" endcolumn="24" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Checksum" method="generateChecksums" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="475" endline="572" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum" method="generateChecksums" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="483" endline="483" begincolumn="35" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Checksum" method="generateChecksums" variable="dis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="485" endline="487" begincolumn="64" endcolumn="17" rule="EmptyWhileStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Checksum" method="generateChecksums" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptywhilestmt" priority="3">
Avoid empty while statements
</violation>
<violation beginline="567" endline="567" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" method="generateChecksums" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="596" endline="596" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Checksum" method="decodeHex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="596" endline="596" begincolumn="36" endcolumn="46" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum" method="decodeHex" variable="data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="606" endline="606" begincolumn="14" endcolumn="29" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum" method="decodeHex" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="607" endline="607" begincolumn="42" endcolumn="42" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum" method="decodeHex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'j'
</violation>
<violation beginline="608" endline="608" begincolumn="39" endcolumn="39" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum" method="decodeHex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'j'
</violation>
<violation beginline="622" endline="622" begincolumn="36" endcolumn="45" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Checksum" method="readChecksum" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="653" endline="653" begincolumn="24" endcolumn="53" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Checksum$FormatElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'HashMap'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Chmod.java">
<violation beginline="42" endline="42" begincolumn="21" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Chmod" variable="defaultSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'defaultSet' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="43" endline="43" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Chmod" variable="defaultSetDefined" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultSetDefined'
</violation>
<violation beginline="44" endline="44" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Chmod" variable="havePerm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'havePerm'
</violation>
<violation beginline="52" endline="52" begincolumn="9" endcolumn="40" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Chmod" method="Chmod" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setSkipEmptyFilesets' called during object construction
</violation>
<violation beginline="177" endline="177" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Chmod" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Classloader.java">
<violation beginline="67" endline="67" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Classloader" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="69" endline="69" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Classloader" variable="reset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reset'
</violation>
<violation beginline="71" endline="71" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Classloader" variable="parentName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parentName'
</violation>
<violation beginline="126" endline="126" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Classloader" method="setClasspathRef" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="185" endline="185" begincolumn="28" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Classloader" method="execute" variable="acl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="202" endline="205" begincolumn="35" endcolumn="17" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Classloader" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="236" endline="236" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Classloader" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/CloseResources.java">
<violation beginline="40" endline="40" begincolumn="19" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="CloseResources" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resources' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="46" endline="58" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CloseResources" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="53" endline="55" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="CloseResources" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/CommandLauncherTask.java">
<violation beginline="34" endline="39" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="CommandLauncherTask" method="addConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Concat.java">
<violation beginline="91" endline="208" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'TextElement' is suspected to be a Data Class (WOC=28.571%, NOPA=0, NOAM=5, WMC=23)
</violation>
<violation beginline="93" endline="93" begincolumn="26" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" variable="trimLeading" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'trimLeading'
</violation>
<violation beginline="94" endline="94" begincolumn="26" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" variable="trim" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'trim'
</violation>
<violation beginline="96" endline="96" begincolumn="26" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="110" endline="112" begincolumn="17" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" method="getFiltering" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="129" endline="129" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" method="setFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="135" endline="135" begincolumn="28" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" method="setFile" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedReader object are closed after use
</violation>
<violation beginline="136" endline="149" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" method="setFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="138" endline="138" begincolumn="53" endcolumn="62" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat$TextElement" method="setFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="220" endline="220" begincolumn="24" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reader'
</violation>
<violation beginline="221" endline="221" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" variable="lastPos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lastPos'
</violation>
<violation beginline="223" endline="223" begincolumn="25" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" variable="needAddSeparator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'needAddSeparator'
</violation>
<violation beginline="224" endline="224" begincolumn="29" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" variable="readerSources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'readerSources' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="225" endline="225" begincolumn="34" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" variable="factory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'factory' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="288" endline="288" begincolumn="51" endcolumn="53" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" method="read" variable="len" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'len'
</violation>
<violation beginline="288" endline="288" begincolumn="51" endcolumn="53" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" method="read" variable="len" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'len'
</violation>
<violation beginline="288" endline="288" begincolumn="42" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" method="read" variable="off" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'off'
</violation>
<violation beginline="288" endline="288" begincolumn="42" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Concat$MultiReader" method="read" variable="off" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'off'
</violation>
<violation beginline="377" endline="377" begincolumn="36" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Concat$ConcatResource" variable="c" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'c' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="389" endline="389" begincolumn="20" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Concat$ConcatResource" method="getInputStream" variable="resourceReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this MultiReader object are closed after use
</violation>
<violation beginline="391" endline="391" begincolumn="20" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Concat$ConcatResource" method="getInputStream" variable="rdr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Reader object are closed after use
</violation>
<violation beginline="437" endline="437" begincolumn="13" endcolumn="26" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="444" endline="444" begincolumn="13" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="449" endline="449" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="452" endline="452" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="455" endline="455" begincolumn="13" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="462" endline="462" begincolumn="13" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="462" endline="462" begincolumn="13" endcolumn="24" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Concat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="468" endline="468" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="471" endline="471" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Concat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="471" endline="471" begincolumn="13" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="473" endline="473" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="475" endline="475" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat" variable="force" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'force'
</violation>
<violation beginline="475" endline="475" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="477" endline="477" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="479" endline="479" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="481" endline="481" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat" variable="fixLastLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fixLastLine'
</violation>
<violation beginline="481" endline="481" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="483" endline="483" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="485" endline="485" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat" variable="outputWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputWriter'
</violation>
<violation beginline="485" endline="485" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="488" endline="488" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="490" endline="490" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="492" endline="492" begincolumn="37" endcolumn="57" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Concat" variable="resourceReaderFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resourceReaderFactory' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="495" endline="495" begincolumn="25" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Concat" method="getReader" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="502" endline="502" begincolumn="13" endcolumn="65" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Concat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="502" endline="502" begincolumn="35" endcolumn="55" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Concat" variable="identityReaderFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'identityReaderFactory' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="508" endline="508" begincolumn="9" endcolumn="15" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Concat" method="Concat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'reset' called during object construction
</violation>
<violation beginline="692" endline="692" begincolumn="32" endcolumn="39" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Concat" method="addFilterChain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ConditionTask.java">
<violation beginline="42" endline="42" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ConditionTask" variable="property" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'property'
</violation>
<violation beginline="44" endline="44" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ConditionTask" variable="alternative" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'alternative'
</violation>
<violation beginline="108" endline="108" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ConditionTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Copy.java">
<violation beginline="70" endline="1092" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Copy
</violation>
<violation beginline="74" endline="75" begincolumn="5" endcolumn="62" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="76" endline="76" begincolumn="5" endcolumn="69" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="78" endline="78" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'file'
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="destFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destFile'
</violation>
<violation beginline="80" endline="80" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="81" endline="81" begincolumn="15" endcolumn="40" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="81" endline="81" begincolumn="52" endcolumn="59" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="83" endline="83" begincolumn="15" endcolumn="40" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="85" endline="85" begincolumn="21" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="enableMultipleMappings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'enableMultipleMappings'
</violation>
<violation beginline="86" endline="86" begincolumn="23" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="filtering" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filtering'
</violation>
<violation beginline="87" endline="87" begincolumn="23" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="88" endline="88" begincolumn="23" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="forceOverwrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forceOverwrite'
</violation>
<violation beginline="89" endline="89" begincolumn="23" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="flatten" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'flatten'
</violation>
<violation beginline="94" endline="94" begincolumn="15" endcolumn="41" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="95" endline="95" begincolumn="15" endcolumn="41" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="96" endline="96" begincolumn="15" endcolumn="35" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="98" endline="98" begincolumn="22" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="101" endline="101" begincolumn="19" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="101" endline="101" begincolumn="58" endcolumn="65" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="102" endline="102" begincolumn="19" endcolumn="35" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="102" endline="102" begincolumn="54" endcolumn="61" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="103" endline="103" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="inputEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inputEncoding'
</violation>
<violation beginline="104" endline="104" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="outputEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputEncoding'
</violation>
<violation beginline="105" endline="105" begincolumn="18" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="granularity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'granularity'
</violation>
<violation beginline="105" endline="105" begincolumn="32" endcolumn="32" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'granularity' is never used (overwritten on line 118)
</violation>
<violation beginline="106" endline="106" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="force" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'force'
</violation>
<violation beginline="107" endline="107" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="quiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quiet'
</violation>
<violation beginline="111" endline="111" begincolumn="22" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" variable="singleResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'singleResource'
</violation>
<violation beginline="201" endline="203" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Copy" method="getPreserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="210" endline="210" begincolumn="15" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="getFilterSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="219" endline="219" begincolumn="15" endcolumn="33" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="getFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="259" endline="261" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Copy" method="getForce" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="359" endline="359" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Copy" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="437" endline="437" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Copy" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="453" endline="454" begincolumn="25" endcolumn="62" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="457" endline="457" begincolumn="25" endcolumn="35" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Copy" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Warning: " appears 4 times in this file; the first occurrence is on line 457
</violation>
<violation beginline="580" endline="580" begincolumn="21" endcolumn="83" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="676" endline="676" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Copy" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="738" endline="738" begincolumn="25" endcolumn="43" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="scan" variable="dirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="773" endline="773" begincolumn="64" endcolumn="90" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="buildMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="774" endline="774" begincolumn="27" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="buildMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'toCopy' is never used (overwritten on lines 782 and 785)
</violation>
<violation beginline="782" endline="782" begincolumn="22" endcolumn="52" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" method="buildMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="827" endline="827" begincolumn="22" endcolumn="54" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" method="buildMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="858" endline="858" begincolumn="17" endcolumn="26" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Copy" method="doFileOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Copying " appears 4 times in this file; the first occurrence is on line 858
</violation>
<violation beginline="860" endline="860" begincolumn="19" endcolumn="24" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Copy" method="doFileOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " to " appears 7 times in this file; the first occurrence is on line 860
</violation>
<violation beginline="893" endline="893" begincolumn="31" endcolumn="33" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Copy" method="doFileOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
<violation beginline="896" endline="896" begincolumn="33" endcolumn="34" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" method="doFileOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="977" endline="977" begincolumn="31" endcolumn="33" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Copy" method="doResourceOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
<violation beginline="980" endline="980" begincolumn="33" endcolumn="34" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copy" method="doResourceOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="1014" endline="1014" begincolumn="34" endcolumn="40" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="add" variable="baseDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'baseDir'
</violation>
<violation beginline="1044" endline="1044" begincolumn="33" endcolumn="36" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copy" method="getMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'mapper' is never used (overwritten on lines 1046, 1048 and 1050)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/CopyPath.java">
<violation beginline="67" endline="67" begincolumn="13" endcolumn="72" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="CopyPath" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'granularity' could be replaced by a local variable.
</violation>
<violation beginline="69" endline="69" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CopyPath" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="150" endline="150" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="CopyPath" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="168" endline="168" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="CopyPath" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="168" endline="215" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="CopyPath" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="209" endline="209" begincolumn="29" endcolumn="30" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="CopyPath" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Copydir.java">
<violation beginline="43" endline="43" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copydir" variable="filtering" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filtering'
</violation>
<violation beginline="44" endline="44" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copydir" variable="flatten" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'flatten'
</violation>
<violation beginline="45" endline="45" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copydir" variable="forceOverwrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forceOverwrite'
</violation>
<violation beginline="46" endline="46" begincolumn="33" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Copydir" variable="filecopyList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filecopyList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="99" endline="99" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Copydir" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="125" endline="125" begincolumn="17" endcolumn="33" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copydir" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="147" endline="147" begincolumn="46" endcolumn="59" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copydir" method="scanDir" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Copyfile.java">
<violation beginline="42" endline="42" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copyfile" variable="filtering" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filtering'
</violation>
<violation beginline="43" endline="43" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Copyfile" variable="forceOverwrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forceOverwrite'
</violation>
<violation beginline="85" endline="85" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Copyfile" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="112" endline="114" begincolumn="17" endcolumn="57" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Copyfile" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Cvs.java">
<violation beginline="34" endline="41" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Cvs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Cvs
</violation>
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Cvs" method="Cvs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Cvs" method="Cvs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/DefBase.java">
<violation beginline="158" endline="158" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="DefBase" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="158" endline="160" begincolumn="12" endcolumn="5" rule="UselessOverridingMethod" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="DefBase" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#uselessoverridingmethod" priority="3">
Overriding method merely calls super
</violation>
<violation beginline="158" endline="160" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="DefBase" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'init()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/DefaultExcludes.java">
<violation beginline="39" endline="39" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="DefaultExcludes" variable="defaultrequested" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultrequested'
</violation>
<violation beginline="40" endline="40" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="DefaultExcludes" variable="echo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'echo'
</violation>
<violation beginline="43" endline="43" begincolumn="17" endcolumn="24" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="DefaultExcludes" variable="logLevel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'logLevel' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="51" endline="51" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="DefaultExcludes" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Definer.java">
<violation beginline="63" endline="63" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Definer" variable="restrict" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'restrict'
</violation>
<violation beginline="66" endline="66" begincolumn="23" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Definer" variable="definerSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'definerSet'
</violation>
<violation beginline="81" endline="81" begincolumn="29" endcolumn="80" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Definer$OnError" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="133" endline="133" begincolumn="29" endcolumn="56" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Definer$Format" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="205" endline="205" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Definer" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="327" endline="327" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Definer" method="fileToURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="561" endline="561" begincolumn="57" endcolumn="60" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Definer" method="addDefinition" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="562" endline="562" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Definer" method="addDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="605" endline="605" begincolumn="18" endcolumn="31" rule="ExceptionAsFlowControl" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Definer" method="addDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#exceptionasflowcontrol" priority="3">
Avoid using exceptions as flow control.
</violation>
<violation beginline="605" endline="605" begincolumn="18" endcolumn="31" rule="ExceptionAsFlowControl" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Definer" method="addDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#exceptionasflowcontrol" priority="3">
Avoid using exceptions as flow control.
</violation>
<violation beginline="606" endline="617" begincolumn="13" endcolumn="13" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Definer" method="addDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Delete.java">
<violation beginline="88" endline="88" begincolumn="25" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Delete$ReverseDirs" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'project' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="89" endline="89" begincolumn="22" endcolumn="28" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Delete$ReverseDirs" variable="basedir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'basedir' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="90" endline="90" begincolumn="26" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Delete$ReverseDirs" variable="dirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'dirs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="92" endline="92" begincolumn="52" endcolumn="64" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Delete$ReverseDirs" method="ReverseDirs" variable="dirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="92" endline="92" begincolumn="52" endcolumn="64" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Delete$ReverseDirs" method="ReverseDirs" variable="dirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'dirs' is stored directly.
</violation>
<violation beginline="116" endline="116" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'file'
</violation>
<violation beginline="116" endline="116" begincolumn="15" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="117" endline="117" begincolumn="20" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="dir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dir'
</violation>
<violation beginline="117" endline="117" begincolumn="15" endcolumn="30" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="118" endline="118" begincolumn="15" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Delete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="118" endline="118" begincolumn="15" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="118" endline="118" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="119" endline="119" begincolumn="23" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="usedMatchingTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'usedMatchingTask'
</violation>
<violation beginline="119" endline="119" begincolumn="15" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="121" endline="121" begincolumn="23" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="includeEmpty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeEmpty'
</violation>
<violation beginline="121" endline="121" begincolumn="15" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="124" endline="124" begincolumn="13" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="125" endline="125" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="quiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quiet'
</violation>
<violation beginline="125" endline="125" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="126" endline="126" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="127" endline="127" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="deleteOnExit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'deleteOnExit'
</violation>
<violation beginline="127" endline="127" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="128" endline="128" begincolumn="21" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="removeNotFollowedSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'removeNotFollowedSymlinks'
</violation>
<violation beginline="128" endline="128" begincolumn="13" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="129" endline="129" begincolumn="23" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Delete" variable="rcs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rcs'
</violation>
<violation beginline="129" endline="129" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="130" endline="130" begincolumn="13" endcolumn="55" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="585" endline="585" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Delete" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="612" endline="612" begincolumn="32" endcolumn="55" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Delete" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Unable to delete file " appears 4 times in this file; the first occurrence is on line 612
</violation>
<violation beginline="669" endline="669" begincolumn="17" endcolumn="18" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Delete" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'fs'
</violation>
<violation beginline="751" endline="751" begincolumn="29" endcolumn="39" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Delete" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Deleting " appears 5 times in this file; the first occurrence is on line 751
</violation>
<violation beginline="761" endline="761" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Delete" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="839" endline="839" begincolumn="56" endcolumn="68" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Delete" method="removeFiles" variable="dirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="885" endline="885" begincolumn="9" endcolumn="33" rule="UnnecessaryLocalBeforeReturn" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Delete" method="isDanglingSymlink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn" priority="3">
Consider simply returning the value vs storing it in local variable 'targetFileExists'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Deltree.java">
<violation beginline="54" endline="54" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Deltree" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="54" endline="76" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Deltree" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/DependSet.java">
<violation beginline="101" endline="101" begincolumn="25" endcolumn="26" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="DependSet$HideMissingBasedir" variable="fs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="125" endline="125" begincolumn="19" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="DependSet" variable="sources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sources'
</violation>
<violation beginline="125" endline="125" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="DependSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="126" endline="126" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="DependSet" variable="targets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targets'
</violation>
<violation beginline="126" endline="126" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="DependSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="128" endline="128" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="DependSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="134" endline="137" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="DependSet" method="createSources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="159" endline="162" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="DependSet" method="createTargets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="199" endline="199" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="DependSet" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/DiagnosticsTask.java">
<violation beginline="37" endline="37" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="DiagnosticsTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="37" endline="39" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="DiagnosticsTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Dirname.java">
<violation beginline="72" endline="72" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Dirname" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Ear.java">
<violation beginline="36" endline="156" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Ear" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Ear
</violation>
<violation beginline="102" endline="102" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Ear" method="initZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Echo.java">
<violation beginline="42" endline="167" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Echo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Echo
</violation>
<violation beginline="45" endline="45" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Echo" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'file'
</violation>
<violation beginline="46" endline="46" begincolumn="23" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Echo" variable="append" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'append'
</violation>
<violation beginline="49" endline="49" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Echo" variable="force" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'force'
</violation>
<violation beginline="62" endline="62" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Echo" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="62" endline="72" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Echo" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/EchoXML.java">
<violation beginline="81" endline="81" begincolumn="22" endcolumn="23" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="EchoXML" method="execute" variable="os" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="82" endline="99" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="EchoXML" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="93" endline="95" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="EchoXML" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="95" endline="95" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="EchoXML" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="110" endline="111" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="EchoXML$NamespacePolicy" method="NamespacePolicy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Exec.java">
<violation beginline="48" endline="283" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Exec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Exec
</violation>
<violation beginline="48" endline="283" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Exec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Exec' is suspected to be a Data Class (WOC=28.571%, NOPA=0, NOAM=4, WMC=29)
</violation>
<violation beginline="54" endline="54" begincolumn="27" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Exec" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fos'
</violation>
<violation beginline="56" endline="56" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Exec" variable="failOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnError'
</violation>
<violation beginline="63" endline="63" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Exec" method="Exec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="65" endline="65" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Exec" method="Exec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="67" endline="67" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Exec" method="Exec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="75" endline="75" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Exec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="85" endline="85" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Exec" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="85" endline="85" begincolumn="30" endcolumn="36" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Exec" method="run" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'command'
</violation>
<violation beginline="85" endline="85" begincolumn="30" endcolumn="36" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Exec" method="run" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'command'
</violation>
<violation beginline="85" endline="85" begincolumn="30" endcolumn="36" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Exec" method="run" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'command'
</violation>
<violation beginline="137" endline="137" begincolumn="43" endcolumn="52" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Exec" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="244" endline="244" begincolumn="32" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Exec$StreamPumper" variable="din" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'din' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="245" endline="245" begincolumn="21" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Exec$StreamPumper" variable="messageLevel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'messageLevel' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="246" endline="246" begincolumn="25" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Exec$StreamPumper" variable="endOfStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'endOfStream'
</violation>
<violation beginline="278" endline="280" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Exec$StreamPumper" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ExecTask.java">
<violation beginline="52" endline="52" begincolumn="23" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="failOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnError'
</violation>
<violation beginline="53" endline="53" begincolumn="23" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="newEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newEnvironment'
</violation>
<violation beginline="54" endline="54" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeout'
</violation>
<violation beginline="55" endline="55" begincolumn="25" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="env" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'env' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="60" endline="60" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="resolveExecutable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolveExecutable'
</violation>
<violation beginline="60" endline="60" begincolumn="13" endcolumn="46" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field resolveExecutable has the same name as a method
</violation>
<violation beginline="61" endline="61" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="searchPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'searchPath'
</violation>
<violation beginline="62" endline="62" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="spawn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'spawn'
</violation>
<violation beginline="63" endline="63" begincolumn="21" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecTask" variable="incompatibleWithSpawn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'incompatibleWithSpawn'
</violation>
<violation beginline="86" endline="87" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="ExecTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="309" endline="311" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="getResolveExecutable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="488" endline="488" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="507" endline="507" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="593" endline="593" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="prepareExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="627" endline="627" begincolumn="26" endcolumn="27" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="runExecute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'returnCode' is never used (overwritten on line 630)
</violation>
<violation beginline="663" endline="663" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="runExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="689" endline="689" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="createHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="700" endline="700" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="createWatchdog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="708" endline="709" begincolumn="31" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="ExecTask" method="logFlush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Execute.java">
<violation beginline="56" endline="56" begincolumn="40" endcolumn="61" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" variable="procEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'procEnvironment'
</violation>
<violation beginline="62" endline="62" begincolumn="28" endcolumn="61" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" variable="environmentCaseInSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'environmentCaseInSensitive'
</violation>
<violation beginline="70" endline="70" begincolumn="22" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" variable="cmdl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cmdl'
</violation>
<violation beginline="71" endline="71" begincolumn="22" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" variable="env" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'env'
</violation>
<violation beginline="75" endline="75" begincolumn="18" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" variable="workingDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'workingDirectory'
</violation>
<violation beginline="76" endline="76" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'project'
</violation>
<violation beginline="77" endline="77" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" variable="newEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newEnvironment'
</violation>
<violation beginline="105" endline="167" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="109" endline="109" begincolumn="26" endcolumn="34" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "openvms" appears 6 times in this file; the first occurrence is on line 109
</violation>
<violation beginline="113" endline="113" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="114" endline="114" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="126" endline="128" begincolumn="30" endcolumn="13" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="129" endline="129" begincolumn="28" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this StringReader object are closed after use
</violation>
<violation beginline="138" endline="138" begincolumn="20" endcolumn="49" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="151" endline="151" begincolumn="49" endcolumn="77" rule="InefficientStringBuffering" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#inefficientstringbuffering" priority="3">
Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
</violation>
<violation beginline="163" endline="163" begincolumn="13" endcolumn="33" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironmentVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="177" endline="177" begincolumn="32" endcolumn="45" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="getProcEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="177" endline="181" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Execute" method="getProcEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="178" endline="178" begincolumn="32" endcolumn="39" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" method="getProcEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="190" endline="229" begincolumn="20" endcolumn="5" rule="ReturnEmptyArrayRatherThanNull" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="getProcEnvCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull" priority="1">
Return an empty array rather than null.
</violation>
<violation beginline="245" endline="247" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="251" endline="253" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="286" endline="286" begincolumn="9" endcolumn="39" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="Execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setStreamHandler' called during object construction
</violation>
<violation beginline="311" endline="311" begincolumn="9" endcolumn="20" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="getCommandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'cmdl' may expose an internal array.
</violation>
<violation beginline="319" endline="319" begincolumn="32" endcolumn="51" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="setCommandline" variable="commandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="319" endline="319" begincolumn="32" endcolumn="51" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="setCommandline" variable="commandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'commandline' is stored directly.
</violation>
<violation beginline="338" endline="339" begincolumn="9" endcolumn="39" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="getEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'env' may expose an internal array.
</violation>
<violation beginline="348" endline="348" begincolumn="32" endcolumn="43" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="setEnvironment" variable="env" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="348" endline="348" begincolumn="32" endcolumn="43" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="setEnvironment" variable="env" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'env' is stored directly.
</violation>
<violation beginline="384" endline="384" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Execute" method="setAntRun" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="506" endline="506" begincolumn="22" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="spawn" variable="dummyOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this  object are closed after use
</violation>
<violation beginline="649" endline="649" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Execute" method="runCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="663" endline="664" begincolumn="13" endcolumn="43" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="runCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="693" endline="693" begincolumn="9" endcolumn="58" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Execute" method="getVMSLogicals" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="696" endline="696" begincolumn="16" endcolumn="45" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Execute" method="getVMSLogicals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="701" endline="701" begincolumn="30" endcolumn="31" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Execute" method="getVMSLogicals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ExecuteJava.java">
<violation beginline="48" endline="48" begincolumn="25" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="javaCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'javaCommand'
</violation>
<violation beginline="49" endline="49" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="50" endline="50" begincolumn="43" endcolumn="62" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="sysProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sysProperties'
</violation>
<violation beginline="51" endline="51" begincolumn="26" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="perm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'perm'
</violation>
<violation beginline="52" endline="52" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'main'
</violation>
<violation beginline="53" endline="53" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeout'
</violation>
<violation beginline="54" endline="54" begincolumn="32" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="caught" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'caught'
</violation>
<violation beginline="55" endline="55" begincolumn="30" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="timedOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timedOut'
</violation>
<violation beginline="56" endline="56" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="done" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'done'
</violation>
<violation beginline="57" endline="57" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" variable="thread" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'thread'
</violation>
<violation beginline="101" endline="102" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="setOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="118" endline="118" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="121" endline="121" begincolumn="24" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="execute" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="141" endline="143" begincolumn="17" endcolumn="31" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="191" endline="193" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="191" endline="191" begincolumn="18" endcolumn="31" rule="ExceptionAsFlowControl" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#exceptionasflowcontrol" priority="3">
Avoid using exceptions as flow control.
</violation>
<violation beginline="193" endline="195" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="199" endline="199" begincolumn="26" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'loader' is never used
</violation>
<violation beginline="224" endline="226" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="243" endline="250" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="timeoutOccured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="257" endline="259" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="killedProcess" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="270" endline="270" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="fork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="313" endline="313" begincolumn="60" endcolumn="75" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="setupCommandLineForVMS" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="316" endline="316" begincolumn="34" endcolumn="37" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="setupCommandLineForVMS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'vmsJavaOptionFile' is never used (overwritten on line 320)
</violation>
<violation beginline="329" endline="329" begincolumn="13" endcolumn="92" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteJava" method="setupCommandLineForVMS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ExecuteOn.java">
<violation beginline="67" endline="67" begincolumn="15" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="67" endline="67" begincolumn="54" endcolumn="61" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="69" endline="69" begincolumn="19" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resources'
</violation>
<violation beginline="70" endline="70" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="relative" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'relative'
</violation>
<violation beginline="71" endline="71" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="parallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parallel'
</violation>
<violation beginline="72" endline="72" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="forwardSlash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forwardSlash'
</violation>
<violation beginline="74" endline="74" begincolumn="34" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="srcFilePos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'srcFilePos'
</violation>
<violation beginline="75" endline="75" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="skipEmpty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skipEmpty'
</violation>
<violation beginline="76" endline="76" begincolumn="34" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="targetFilePos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetFilePos'
</violation>
<violation beginline="77" endline="77" begincolumn="22" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="78" endline="78" begincolumn="30" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="mapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapper'
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="82" endline="82" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="84" endline="84" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" variable="force" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'force'
</violation>
<violation beginline="282" endline="282" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="335" endline="335" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="createHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="355" endline="355" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="360" endline="360" begincolumn="44" endcolumn="51" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="361" endline="361" begincolumn="41" endcolumn="48" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="365" endline="370" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="516" endline="516" begincolumn="48" endcolumn="55" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="getCommandline" variable="srcFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'srcFiles'
</violation>
<violation beginline="516" endline="516" begincolumn="58" endcolumn="72" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="getCommandline" variable="baseDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="542" endline="542" begincolumn="32" endcolumn="74" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="getCommandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="620" endline="620" begincolumn="21" endcolumn="21" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="getCommandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="687" endline="687" begincolumn="45" endcolumn="58" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runParallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="688" endline="688" begincolumn="32" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runParallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="689" endline="689" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runParallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="690" endline="690" begincolumn="22" endcolumn="68" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runParallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="691" endline="691" begincolumn="20" endcolumn="62" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteOn" method="runParallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ExecuteWatchdog.java">
<violation beginline="48" endline="48" begincolumn="30" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" variable="watch" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'watch'
</violation>
<violation beginline="51" endline="51" begincolumn="23" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" variable="caught" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'caught'
</violation>
<violation beginline="54" endline="54" begincolumn="30" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" variable="killedProcess" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'killedProcess'
</violation>
<violation beginline="54" endline="54" begincolumn="22" endcolumn="51" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field killedProcess has the same name as a method
</violation>
<violation beginline="88" endline="100" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="90" endline="90" begincolumn="13" endcolumn="63" rule="AvoidThrowingNullPointerException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingnullpointerexception" priority="1">
Avoid throwing null pointer exceptions.
</violation>
<violation beginline="106" endline="109" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="117" endline="136" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="timeoutOccured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="131" endline="131" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="timeoutOccured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="141" endline="144" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="cleanUp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="154" endline="154" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="checkException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="154" endline="159" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ExecuteWatchdog" method="checkException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Exit.java">
<violation beginline="50" endline="237" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Exit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Exit
</violation>
<violation beginline="63" endline="63" begincolumn="13" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Exit" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="64" endline="64" begincolumn="13" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Exit" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="64" endline="64" begincolumn="13" endcolumn="48" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Exit" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="65" endline="65" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Exit" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="66" endline="66" begincolumn="13" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Exit" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="136" endline="136" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Exit" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="153" endline="153" begincolumn="26" endcolumn="27" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Exit" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Expand.java">
<violation beginline="73" endline="73" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Expand" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="74" endline="74" begincolumn="30" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Expand" variable="patternsets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'patternsets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="74" endline="74" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Expand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="75" endline="75" begincolumn="19" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Expand" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resources' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="76" endline="76" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Expand" variable="resourcesSpecified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resourcesSpecified'
</violation>
<violation beginline="77" endline="77" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Expand" variable="failOnEmptyArchive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnEmptyArchive'
</violation>
<violation beginline="80" endline="80" begincolumn="21" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Expand" variable="allowFilesToEscapeDest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'allowFilesToEscapeDest'
</violation>
<violation beginline="117" endline="119" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Expand" method="getFailOnEmptyArchive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="127" endline="127" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Expand" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="196" endline="196" begincolumn="29" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Expand" method="expandFile" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="198" endline="205" begincolumn="17" endcolumn="17" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Expand" method="expandFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="256" endline="256" begincolumn="39" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Expand" method="extractFile" variable="entryName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'entryName'
</violation>
<violation beginline="289" endline="289" begincolumn="33" endcolumn="34" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Expand" method="extractFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="300" endline="300" begincolumn="37" endcolumn="38" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Expand" method="extractFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="363" endline="363" begincolumn="28" endcolumn="77" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Expand" method="extractFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="439" endline="439" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Expand" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="478" endline="478" begincolumn="47" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Expand" method="internalSetEncoding" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'encoding'
</violation>
<violation beginline="529" endline="531" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Expand" method="getScanForUnicodeExtraFields" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Filter.java">
<violation beginline="73" endline="73" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Filter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="98" endline="98" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Filter" method="readFilters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/FixCRLF.java">
<violation beginline="94" endline="94" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="96" endline="96" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="98" endline="98" begincolumn="27" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF" variable="filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filter' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="99" endline="99" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="FixCRLF" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="99" endline="99" begincolumn="33" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF" variable="fcv" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fcv'
</violation>
<violation beginline="104" endline="104" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="109" endline="109" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF" variable="outputEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputEncoding'
</violation>
<violation beginline="194" endline="194" begincolumn="20" endcolumn="25" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="FixCRLF" method="setCr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "asis" appears 4 times in this file; the first occurrence is on line 194
</violation>
<violation beginline="223" endline="223" begincolumn="50" endcolumn="63" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF" method="setTablength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="288" endline="288" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="311" endline="311" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="346" endline="346" begincolumn="50" endcolumn="63" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF" method="processFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="354" endline="354" begincolumn="23" endcolumn="30" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF" method="processFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="406" endline="406" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="407" endline="407" begincolumn="30" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" variable="eofStr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'eofStr' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="407" endline="407" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="410" endline="410" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="411" endline="411" begincolumn="25" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" variable="reachedEof" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reachedEof'
</violation>
<violation beginline="412" endline="412" begincolumn="22" endcolumn="28" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" variable="srcFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'srcFile' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="420" endline="420" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="OneLiner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="424" endline="424" begincolumn="47" endcolumn="56" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="OneLiner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="428" endline="428" begincolumn="17" endcolumn="26" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="OneLiner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'nextLine' called during object construction
</violation>
<violation beginline="440" endline="440" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="nextLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="441" endline="441" begincolumn="22" endcolumn="23" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="nextLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on line 448)
</violation>
<violation beginline="504" endline="504" begincolumn="28" endcolumn="62" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="nextLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="504" endline="506" begincolumn="65" endcolumn="21" rule="EmptyWhileStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="nextLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptywhilestmt" priority="3">
Avoid empty while statements
</violation>
<violation beginline="566" endline="566" begincolumn="20" endcolumn="41" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner" method="nextElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="587" endline="587" begincolumn="25" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner$BufferLine" variable="next" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'next'
</violation>
<violation beginline="587" endline="587" begincolumn="32" endcolumn="32" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner$BufferLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'next' is never used (overwritten on line 595)
</violation>
<violation beginline="588" endline="588" begincolumn="25" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner$BufferLine" variable="column" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'column'
</violation>
<violation beginline="588" endline="588" begincolumn="34" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner$BufferLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'column' is never used (overwritten on line 596)
</violation>
<violation beginline="590" endline="590" begincolumn="28" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner$BufferLine" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'line' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="591" endline="591" begincolumn="28" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner$BufferLine" variable="eolStr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'eolStr' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="594" endline="594" begincolumn="24" endcolumn="37" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="FixCRLF$OneLiner$BufferLine" method="BufferLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="689" endline="699" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="FixCRLF$CrLf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like CrLf
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/GZip.java">
<violation beginline="36" endline="66" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GZip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like GZip
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/GenerateKey.java">
<violation beginline="39" endline="393" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="GenerateKey" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'GenerateKey' is suspected to be a Data Class (WOC=15.385%, NOPA=0, NOAM=11, WMC=41)
</violation>
<violation beginline="45" endline="84" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="GenerateKey$DnameParam" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'DnameParam' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=5)
</violation>
<violation beginline="90" endline="90" begincolumn="34" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="GenerateKey$DistinguishedName" variable="params" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'params' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="90" endline="90" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="GenerateKey$DistinguishedName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="141" endline="141" begincolumn="15" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="146" endline="146" begincolumn="15" endcolumn="30" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="147" endline="147" begincolumn="15" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="148" endline="148" begincolumn="15" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="149" endline="149" begincolumn="15" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="151" endline="151" begincolumn="15" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="152" endline="152" begincolumn="15" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="153" endline="153" begincolumn="15" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="154" endline="154" begincolumn="15" endcolumn="46" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="155" endline="155" begincolumn="15" endcolumn="26" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="156" endline="156" begincolumn="15" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="157" endline="157" begincolumn="15" endcolumn="30" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="GenerateKey" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="167" endline="167" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="createDname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="261" endline="261" begincolumn="57" endcolumn="70" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="setKeysize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="265" endline="265" begincolumn="13" endcolumn="78" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="setKeysize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="275" endline="275" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="setValidity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="279" endline="279" begincolumn="13" endcolumn="79" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="setValidity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="296" endline="296" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="318" endline="318" begincolumn="9" endcolumn="31" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="319" endline="319" begincolumn="9" endcolumn="25" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="320" endline="320" begincolumn="19" endcolumn="23" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="GenerateKey" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "\" " appears 11 times in this file; the first occurrence is on line 320
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Get.java">
<violation beginline="61" endline="917" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Get" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Get
</violation>
<violation beginline="79" endline="79" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="80" endline="80" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="quiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quiet'
</violation>
<violation beginline="81" endline="81" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="useTimestamp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'useTimestamp'
</violation>
<violation beginline="82" endline="82" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="ignoreErrors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreErrors'
</violation>
<violation beginline="83" endline="83" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="uname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'uname'
</violation>
<violation beginline="84" endline="84" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="pword" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'pword'
</violation>
<violation beginline="85" endline="85" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="maxTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'maxTime'
</violation>
<violation beginline="87" endline="87" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="skipExisting" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skipExisting'
</violation>
<violation beginline="89" endline="89" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="tryGzipEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'tryGzipEncoding'
</violation>
<violation beginline="90" endline="90" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="97" endline="97" begincolumn="33" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Get" variable="headers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'headers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="105" endline="105" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Get" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="157" endline="157" begincolumn="49" endcolumn="54" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Get" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " to " appears 4 times in this file; the first occurrence is on line 157
</violation>
<violation beginline="206" endline="206" begincolumn="43" endcolumn="50" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Get" method="doGet" variable="progress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'progress'
</violation>
<violation beginline="511" endline="511" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Get" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="567" endline="568" begincolumn="37" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Get$NullProgress" method="beginDownload" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="575" endline="576" begincolumn="30" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Get$NullProgress" method="onTick" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="582" endline="583" begincolumn="35" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Get$NullProgress" method="endDownload" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="590" endline="590" begincolumn="21" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$VerboseProgress" variable="dots" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dots'
</violation>
<violation beginline="592" endline="592" begincolumn="9" endcolumn="24" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Get$VerboseProgress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="618" endline="618" begincolumn="17" endcolumn="38" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Get$VerboseProgress" method="onTick" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="643" endline="643" begincolumn="25" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="success" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'success'
</violation>
<violation beginline="644" endline="644" begincolumn="29" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="ioexception" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ioexception'
</violation>
<violation beginline="645" endline="645" begincolumn="32" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="exception" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'exception'
</violation>
<violation beginline="646" endline="646" begincolumn="29" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'is'
</violation>
<violation beginline="647" endline="647" begincolumn="30" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="os" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'os'
</violation>
<violation beginline="649" endline="649" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="redirections" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'redirections'
</violation>
<violation beginline="650" endline="650" begincolumn="24" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="userAgent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'userAgent'
</violation>
<violation beginline="650" endline="650" begincolumn="24" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" variable="userAgent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'userAgent' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="650" endline="650" begincolumn="36" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'userAgent' is never used (overwritten on line 660)
</violation>
<violation beginline="674" endline="692" begincolumn="17" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" method="get" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="674" endline="674" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" method="get" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="767" endline="767" begincolumn="28" endcolumn="47" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" method="openConnection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="767" endline="767" begincolumn="28" endcolumn="47" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" method="openConnection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="854" endline="872" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" method="downloadFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="857" endline="857" begincolumn="24" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" method="downloadFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="894" endline="894" begincolumn="53" endcolumn="66" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" method="wasSuccessful" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="894" endline="902" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="908" endline="915" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Get$GetThread" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/HostInfo.java">
<violation beginline="46" endline="46" begincolumn="49" endcolumn="57" rule="AvoidUsingHardCodedIP" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="HostInfo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidusinghardcodedip" priority="3">
Do not hard code the IP address 
</violation>
<violation beginline="48" endline="48" begincolumn="51" endcolumn="55" rule="AvoidUsingHardCodedIP" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="HostInfo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidusinghardcodedip" priority="3">
Do not hard code the IP address 
</violation>
<violation beginline="50" endline="50" begincolumn="51" endcolumn="61" rule="AvoidUsingHardCodedIP" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="HostInfo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidusinghardcodedip" priority="3">
Do not hard code the IP address 
</violation>
<violation beginline="109" endline="109" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="HostInfo" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="140" endline="140" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="HostInfo" method="executeLocal" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="173" endline="175" begincolumn="68" endcolumn="9" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="HostInfo" method="selectBestAddress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="225" endline="225" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="HostInfo" method="executeRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ImportTask.java">
<violation beginline="274" endline="274" begincolumn="44" endcolumn="57" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ImportTask" method="hasAlreadyBeenImported" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Input.java">
<violation beginline="47" endline="121" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Input$Handler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Handler' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=13)
</violation>
<violation beginline="49" endline="49" begincolumn="24" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Input$Handler" variable="refid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'refid'
</violation>
<violation beginline="50" endline="50" begincolumn="29" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Input$Handler" variable="type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'type'
</violation>
<violation beginline="51" endline="51" begincolumn="24" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Input$Handler" variable="classname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classname'
</violation>
<violation beginline="138" endline="138" begincolumn="13" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Input$HandlerType" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
<violation beginline="146" endline="146" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Input" variable="validargs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'validargs'
</violation>
<violation beginline="146" endline="146" begincolumn="13" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Input" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="147" endline="147" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Input" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="148" endline="148" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Input" variable="addproperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'addproperty'
</violation>
<violation beginline="148" endline="148" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Input" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="149" endline="149" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Input" variable="defaultvalue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultvalue'
</violation>
<violation beginline="149" endline="149" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Input" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="150" endline="150" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Input" variable="handler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'handler'
</violation>
<violation beginline="150" endline="150" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Input" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="151" endline="151" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Input" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="212" endline="212" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Input" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="220" endline="220" begincolumn="32" endcolumn="35" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Input" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'request' is never used (overwritten on lines 223 and 225)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/JDBCTask.java">
<violation beginline="100" endline="100" begincolumn="26" endcolumn="58" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JDBCTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="111" endline="111" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="autocommit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'autocommit'
</violation>
<violation beginline="116" endline="116" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="driver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'driver'
</violation>
<violation beginline="121" endline="121" begincolumn="20" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="url" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'url'
</violation>
<violation beginline="126" endline="126" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="userId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'userId'
</violation>
<violation beginline="131" endline="131" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="136" endline="136" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="rdbms" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rdbms'
</violation>
<violation beginline="141" endline="141" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="version" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'version'
</violation>
<violation beginline="154" endline="154" begincolumn="28" endcolumn="47" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="JDBCTask" variable="connectionProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'connectionProperties' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="269" endline="269" begincolumn="36" endcolumn="77" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="JDBCTask" method="isValidRdbms" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="302" endline="302" begincolumn="22" endcolumn="54" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JDBCTask" method="getLoaderMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="335" endline="335" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="JDBCTask" method="getConnection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="389" endline="389" begincolumn="39" endcolumn="52" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="JDBCTask" method="getDriver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Jar.java">
<violation beginline="70" endline="1164" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Jar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Jar
</violation>
<violation beginline="80" endline="80" begincolumn="27" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jar" variable="serviceList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'serviceList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="37" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Jar" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field filesetManifest has the same name as a method
</violation>
<violation beginline="124" endline="124" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" variable="index" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'index'
</violation>
<violation beginline="127" endline="127" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" variable="indexMetaInf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'indexMetaInf'
</violation>
<violation beginline="133" endline="133" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" variable="createEmpty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'createEmpty'
</violation>
<violation beginline="144" endline="144" begincolumn="26" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jar" variable="rootEntries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'rootEntries' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="165" endline="165" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" variable="mergeClassPaths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mergeClassPaths'
</violation>
<violation beginline="170" endline="170" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" variable="flattenClassPaths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'flattenClassPaths'
</violation>
<violation beginline="177" endline="179" begincolumn="42" endcolumn="5" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Jar" variable="JAR_MARKER" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="188" endline="188" begincolumn="27" endcolumn="34" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" method="Jar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="377" endline="377" begincolumn="17" endcolumn="22" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Jar" method="setFilesetmanifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "skip" appears 4 times in this file; the first occurrence is on line 377
</violation>
<violation beginline="461" endline="461" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jar" method="initZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="471" endline="471" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jar" method="createManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="535" endline="535" begincolumn="21" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Jar" method="writeManifest" variable="writer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStreamWriter object are closed after use
</violation>
<violation beginline="544" endline="551" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="writeManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="564" endline="564" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jar" method="finalizeZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="714" endline="729" begincolumn="16" endcolumn="9" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Jar" method="filesetManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="757" endline="757" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="757" endline="757" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="757" endline="757" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="757" endline="757" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="757" endline="757" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="757" endline="757" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="758" endline="758" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="795" endline="800" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Jar" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="826" endline="826" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jar" method="createEmptyZip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="905" endline="905" begincolumn="27" endcolumn="58" rule="ConsecutiveLiteralAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" method="checkJarSpec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveliteralappends" priority="3">
StringBuffer (or StringBuilder).append is called 3 consecutive times with literals. Use a single append with a single combined String.
</violation>
<violation beginline="979" endline="979" begincolumn="13" endcolumn="15" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="writeIndexLikeList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'dir'
</violation>
<violation beginline="981" endline="981" begincolumn="17" endcolumn="19" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="writeIndexLikeList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'dir'
</violation>
<violation beginline="984" endline="984" begincolumn="17" endcolumn="19" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="writeIndexLikeList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'dir'
</violation>
<violation beginline="988" endline="988" begincolumn="17" endcolumn="19" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="writeIndexLikeList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'dir'
</violation>
<violation beginline="1026" endline="1026" begincolumn="48" endcolumn="55" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="findJarName" variable="fileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'fileName'
</violation>
<violation beginline="1027" endline="1027" begincolumn="47" endcolumn="64" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="findJarName" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1084" endline="1084" begincolumn="40" endcolumn="63" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jar" method="grabManifests" variable="rcs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1103" endline="1103" begincolumn="36" endcolumn="37" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" method="grabManifests" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="1105" endline="1105" begincolumn="30" endcolumn="30" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jar" method="grabManifests" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="1137" endline="1138" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Jar$StrictMode" method="StrictMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Java.java">
<violation beginline="52" endline="1049" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Java" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Java
</violation>
<violation beginline="56" endline="56" begincolumn="29" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" variable="cmdl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cmdl' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="57" endline="57" begincolumn="25" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" variable="env" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'env' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="58" endline="58" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="fork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fork'
</violation>
<violation beginline="58" endline="58" begincolumn="13" endcolumn="33" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Java" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field fork has the same name as a method
</violation>
<violation beginline="59" endline="59" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="newEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newEnvironment'
</violation>
<violation beginline="60" endline="60" begincolumn="18" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="dir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dir'
</violation>
<violation beginline="61" endline="61" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="failOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnError'
</violation>
<violation beginline="62" endline="62" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeout'
</violation>
<violation beginline="76" endline="76" begincolumn="25" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="perm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'perm'
</violation>
<violation beginline="78" endline="78" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="spawn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'spawn'
</violation>
<violation beginline="78" endline="78" begincolumn="13" endcolumn="34" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Java" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field spawn has the same name as a method
</violation>
<violation beginline="79" endline="79" begincolumn="21" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Java" variable="incompatibleWithSpawn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'incompatibleWithSpawn'
</violation>
<violation beginline="84" endline="85" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Java" method="Java" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="101" endline="101" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="105" endline="105" begincolumn="19" endcolumn="20" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Java" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'err' is never used (overwritten on line 108)
</violation>
<violation beginline="134" endline="134" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="executeJava" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="142" endline="142" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="249" endline="251" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="executeJava" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="251" endline="257" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Java" method="executeJava" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="365" endline="365" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="setJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="381" endline="381" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="setClassname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="397" endline="397" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="setModule" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="414" endline="414" begincolumn="63" endcolumn="76" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="setSourceFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="852" endline="852" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="875" endline="875" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="fork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="875" endline="875" begincolumn="22" endcolumn="37" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Java" method="fork" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="896" endline="896" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="spawn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="896" endline="896" begincolumn="24" endcolumn="39" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Java" method="spawn" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="913" endline="913" begincolumn="47" endcolumn="62" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Java" method="setupExecutable" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="958" endline="958" begincolumn="48" endcolumn="63" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Java" method="setupCommandLine" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="977" endline="977" begincolumn="54" endcolumn="69" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Java" method="setupCommandLineForVMS" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="989" endline="989" begincolumn="70" endcolumn="83" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="989" endline="989" begincolumn="42" endcolumn="55" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Java" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1012" endline="1012" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Java" method="createWatchdog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Javac.java">
<violation beginline="118" endline="118" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="debug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'debug'
</violation>
<violation beginline="119" endline="119" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="optimize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'optimize'
</violation>
<violation beginline="120" endline="120" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="deprecation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'deprecation'
</violation>
<violation beginline="121" endline="121" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="depend" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'depend'
</violation>
<violation beginline="122" endline="122" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="128" endline="128" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="includeJavaRuntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeJavaRuntime'
</violation>
<violation beginline="129" endline="129" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="fork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fork'
</violation>
<violation beginline="130" endline="130" begincolumn="20" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="forkedExecutable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forkedExecutable'
</violation>
<violation beginline="131" endline="131" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="nowarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nowarn'
</violation>
<violation beginline="134" endline="134" begincolumn="30" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="facade" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'facade'
</violation>
<violation beginline="134" endline="134" begincolumn="30" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javac" variable="facade" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'facade' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="134" endline="134" begincolumn="39" endcolumn="42" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javac" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'facade' is never used (overwritten on line 158)
</violation>
<violation beginline="138" endline="138" begincolumn="23" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="listFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'listFiles'
</violation>
<violation beginline="150" endline="150" begincolumn="29" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" variable="nestedAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nestedAdapter'
</violation>
<violation beginline="612" endline="614" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getListfiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="637" endline="639" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getFailonerror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="654" endline="656" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getDeprecation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="725" endline="727" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getDebug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="741" endline="743" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getOptimize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="758" endline="760" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getDepend" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="774" endline="776" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getVerbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="836" endline="838" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getIncludeantruntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="853" endline="855" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getIncludejavaruntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="928" endline="930" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getNowarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1074" endline="1076" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" method="getTaskSuccess" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1120" endline="1120" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javac" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1157" endline="1157" begincolumn="67" endcolumn="86" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javac" method="scanDir" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1344" endline="1344" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javac" method="checkParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1448" endline="1448" begincolumn="57" endcolumn="77" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javac" method="lookForPackageInfos" variable="newFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1549" endline="1564" begincolumn="21" endcolumn="21" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javac" method="expandGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
<violation beginline="1565" endline="1565" begincolumn="21" endcolumn="21" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javac" method="expandGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="1589" endline="1602" begincolumn="13" endcolumn="13" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javac" method="resolveGroup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="1621" endline="1631" begincolumn="13" endcolumn="13" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javac" method="getGroupEndIndex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="1621" endline="1631" begincolumn="13" endcolumn="13" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javac" method="getGroupEndIndex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="1645" endline="1645" begincolumn="20" endcolumn="26" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javac" method="findModules" variable="pattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pattern'
</violation>
<violation beginline="1700" endline="1706" begincolumn="26" endcolumn="6" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1708" endline="1714" begincolumn="26" endcolumn="6" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javac" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Javadoc.java">
<violation beginline="99" endline="144" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javadoc$DocletParam" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'DocletParam' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=4)
</violation>
<violation beginline="229" endline="229" begincolumn="54" endcolumn="61" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc$DocletInfo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="335" endline="356" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc$Html" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Html
</violation>
<violation beginline="337" endline="337" begincolumn="23" endcolumn="34" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc$Html" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="404" endline="404" begincolumn="26" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="407" endline="407" begincolumn="19" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="442" endline="442" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="failOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnError'
</violation>
<violation beginline="442" endline="442" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="447" endline="447" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="failOnWarning" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnWarning'
</violation>
<violation beginline="447" endline="447" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="448" endline="448" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="sourcePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sourcePath'
</violation>
<violation beginline="448" endline="448" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="449" endline="449" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="449" endline="449" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="450" endline="450" begincolumn="19" endcolumn="64" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="450" endline="450" begincolumn="54" endcolumn="61" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="451" endline="451" begincolumn="19" endcolumn="66" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="451" endline="451" begincolumn="56" endcolumn="63" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="452" endline="452" begincolumn="19" endcolumn="74" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="452" endline="452" begincolumn="63" endcolumn="70" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="453" endline="453" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="454" endline="454" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="455" endline="455" begincolumn="24" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="doclet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'doclet'
</violation>
<violation beginline="455" endline="455" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="456" endline="456" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="456" endline="456" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="457" endline="457" begincolumn="18" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="bootclasspath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'bootclasspath'
</violation>
<violation beginline="457" endline="457" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="458" endline="458" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="group" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'group'
</violation>
<violation beginline="458" endline="458" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="459" endline="459" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="packageList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'packageList'
</violation>
<violation beginline="459" endline="459" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="460" endline="460" begincolumn="19" endcolumn="60" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="460" endline="460" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="461" endline="461" begincolumn="19" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="461" endline="461" begincolumn="52" endcolumn="59" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="462" endline="462" begincolumn="19" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="462" endline="462" begincolumn="43" endcolumn="50" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="463" endline="463" begincolumn="13" endcolumn="46" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="464" endline="464" begincolumn="18" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="doctitle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'doctitle'
</violation>
<violation beginline="464" endline="464" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="465" endline="465" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="header" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'header'
</violation>
<violation beginline="465" endline="465" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="466" endline="466" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="footer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'footer'
</violation>
<violation beginline="466" endline="466" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="467" endline="467" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="bottom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'bottom'
</violation>
<violation beginline="467" endline="467" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="468" endline="468" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="useExternalFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'useExternalFile'
</violation>
<violation beginline="468" endline="468" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="469" endline="469" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="source" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'source'
</violation>
<violation beginline="469" endline="469" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="470" endline="470" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="linksource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'linksource'
</violation>
<violation beginline="470" endline="470" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="471" endline="471" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="breakiterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'breakiterator'
</violation>
<violation beginline="471" endline="471" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="472" endline="472" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="473" endline="473" begincolumn="21" endcolumn="51" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="includeNoSourcePackages" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeNoSourcePackages'
</violation>
<violation beginline="473" endline="473" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="474" endline="474" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="executable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'executable'
</violation>
<violation beginline="474" endline="474" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="475" endline="475" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="docFilesSubDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'docFilesSubDirs'
</violation>
<violation beginline="475" endline="475" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="476" endline="476" begincolumn="20" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="excludeDocFilesSubDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'excludeDocFilesSubDir'
</violation>
<violation beginline="476" endline="476" begincolumn="13" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="477" endline="477" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="docEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'docEncoding'
</violation>
<violation beginline="477" endline="477" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="478" endline="478" begincolumn="13" endcolumn="56" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field postProcessGeneratedJavadocs has the same name as a method
</violation>
<violation beginline="478" endline="478" begincolumn="13" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="480" endline="481" begincolumn="19" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="482" endline="482" begincolumn="19" endcolumn="60" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="482" endline="482" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1206" endline="1300" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javadoc$LinkArgument" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'LinkArgument' is suspected to be a Data Class (WOC=18.182%, NOPA=0, NOAM=8, WMC=11)
</violation>
<violation beginline="1208" endline="1208" begincolumn="25" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc$LinkArgument" variable="offline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'offline'
</violation>
<violation beginline="1211" endline="1211" begincolumn="25" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc$LinkArgument" variable="resolveLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolveLink'
</violation>
<violation beginline="1214" endline="1216" begincolumn="16" endcolumn="9" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc$LinkArgument" method="LinkArgument" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="1320" endline="1323" begincolumn="18" endcolumn="6" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1320" endline="1323" begincolumn="5" endcolumn="6" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1330" endline="1330" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc$TagArgument" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="1341" endline="1343" begincolumn="16" endcolumn="9" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc$TagArgument" method="TagArgument" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="1371" endline="1371" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javadoc$TagArgument" method="setScope" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1371" endline="1371" begincolumn="37" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc$TagArgument" method="setScope" variable="verboseScope" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'verboseScope'
</violation>
<violation beginline="1446" endline="1446" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javadoc$TagArgument" method="getParameter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1477" endline="1477" begincolumn="56" endcolumn="63" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc$GroupArgument" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1701" endline="1701" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1704" endline="1704" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1750" endline="1750" begincolumn="20" endcolumn="21" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" variable="wr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this FileWriter object are closed after use
</violation>
<violation beginline="1751" endline="1780" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1756" endline="1756" begincolumn="28" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" variable="srcListWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="1761" endline="1761" begincolumn="26" endcolumn="35" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="1789" endline="1789" begincolumn="35" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JavadocOutputStream object are closed after use
</violation>
<violation beginline="1790" endline="1790" begincolumn="35" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" variable="err" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JavadocOutputStream object are closed after use
</violation>
<violation beginline="1801" endline="1825" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1818" endline="1818" begincolumn="27" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'tmpList' is never used
</violation>
<violation beginline="1888" endline="1888" begincolumn="57" endcolumn="64" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="generalJavadocArguments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "ignore" appears 4 times in this file; the first occurrence is on line 1,888
</violation>
<violation beginline="1945" endline="1945" begincolumn="21" endcolumn="30" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="writeExternalArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="2120" endline="2121" begincolumn="30" endcolumn="59" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="doJava14" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'in': resource specifications are implicitly final
</violation>
<violation beginline="2121" endline="2121" begincolumn="37" endcolumn="46" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="doJava14" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="2300" endline="2300" begincolumn="21" endcolumn="22" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="addSourceFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'rc'
</violation>
<violation beginline="2366" endline="2366" begincolumn="28" endcolumn="54" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="parsePackages" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="2404" endline="2404" begincolumn="27" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="postProcessGeneratedJavadocs" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="2411" endline="2418" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="postProcessGeneratedJavadocs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="2455" endline="2456" begincolumn="22" endcolumn="85" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc" method="postProcess" variable="w" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'w': resource specifications are implicitly final
</violation>
<violation beginline="2491" endline="2491" begincolumn="24" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc$JavadocOutputStream" variable="queuedLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'queuedLine'
</violation>
<violation beginline="2491" endline="2491" begincolumn="17" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc$JavadocOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="2492" endline="2492" begincolumn="25" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Javadoc$JavadocOutputStream" variable="sawWarnings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sawWarnings'
</violation>
<violation beginline="2492" endline="2492" begincolumn="17" endcolumn="44" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Javadoc$JavadocOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field sawWarnings has the same name as a method
</violation>
<violation beginline="2492" endline="2492" begincolumn="17" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Javadoc$JavadocOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Jikes.java">
<violation beginline="61" endline="61" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jikes" method="Jikes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="63" endline="63" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jikes" method="Jikes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="65" endline="65" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jikes" method="Jikes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="76" endline="76" begincolumn="28" endcolumn="40" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jikes" method="compile" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="88" endline="88" begincolumn="32" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Jikes" method="compile" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="89" endline="105" begincolumn="17" endcolumn="17" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Jikes" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="92" endline="92" begincolumn="50" endcolumn="59" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Jikes" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="127" endline="129" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Jikes" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/JikesOutputParser.java">
<violation beginline="45" endline="45" begincolumn="23" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" variable="errorFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errorFlag'
</violation>
<violation beginline="48" endline="48" begincolumn="23" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" variable="error" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'error'
</violation>
<violation beginline="58" endline="59" begincolumn="56" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="setProcessInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="58" endline="59" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="setProcessInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProcessInputStream(OutputStream)' is missing an @Override annotation.
</violation>
<violation beginline="65" endline="66" begincolumn="55" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="setProcessErrorStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="65" endline="66" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="setProcessErrorStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProcessErrorStream(InputStream)' is missing an @Override annotation.
</violation>
<violation beginline="73" endline="75" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProcessOutputStream(InputStream)' is missing an @Override annotation.
</violation>
<violation beginline="81" endline="83" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'start()' is missing an @Override annotation.
</violation>
<violation beginline="88" endline="89" begincolumn="24" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="88" endline="89" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'stop()' is missing an @Override annotation.
</violation>
<violation beginline="99" endline="99" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="JikesOutputParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="101" endline="101" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="JikesOutputParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="103" endline="103" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="JikesOutputParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="134" endline="134" begincolumn="16" endcolumn="49" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="parseStandardOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="135" endline="135" begincolumn="21" endcolumn="38" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="parseStandardOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="181" endline="183" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="JikesOutputParser" method="getErrorFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/KeySubst.java">
<violation beginline="48" endline="48" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="KeySubst" variable="source" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'source'
</violation>
<violation beginline="49" endline="49" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="KeySubst" variable="dest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dest'
</violation>
<violation beginline="51" endline="51" begincolumn="13" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="51" endline="51" begincolumn="39" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="KeySubst" variable="replacements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'replacements' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="57" endline="57" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="57" endline="91" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="64" endline="64" begincolumn="24" endcolumn="25" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" variable="br" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedReader object are closed after use
</violation>
<violation beginline="65" endline="65" begincolumn="24" endcolumn="25" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" variable="bw" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="66" endline="90" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="67" endline="67" begincolumn="41" endcolumn="50" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="69" endline="69" begincolumn="41" endcolumn="50" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="71" endline="71" begincolumn="27" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'line' is never used (overwritten on line 73)
</violation>
<violation beginline="72" endline="72" begincolumn="30" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'newline' is never used (overwritten on line 78)
</violation>
<violation beginline="156" endline="156" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="158" endline="158" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="159" endline="159" begincolumn="13" endcolumn="31" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="170" endline="170" begincolumn="53" endcolumn="77" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="replace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="171" endline="171" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="replace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="173" endline="173" begincolumn="21" endcolumn="21" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="replace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'index' is never used (overwritten on line 177)
</violation>
<violation beginline="175" endline="175" begincolumn="22" endcolumn="25" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="replace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'key' is never used (overwritten on line 178)
</violation>
<violation beginline="177" endline="177" begincolumn="16" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="KeySubst" method="replace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Length.java">
<violation beginline="58" endline="58" begincolumn="13" endcolumn="24" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Length" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="65" endline="67" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="73" endline="75" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="81" endline="83" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="89" endline="91" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="98" endline="104" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="110" endline="112" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="119" endline="121" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setWhen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="129" endline="131" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setWhen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="137" endline="139" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="145" endline="148" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="154" endline="156" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length" method="setTrim" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="162" endline="164" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Length" method="getTrim" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="175" endline="175" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Length" method="execute" variable="ps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="177" endline="188" begincolumn="9" endcolumn="9" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Length" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="258" endline="258" begincolumn="31" endcolumn="62" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Length$FileMode" variable="MODES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="258" endline="258" begincolumn="9" endcolumn="63" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Length$FileMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="266" endline="266" begincolumn="13" endcolumn="25" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Length$FileMode" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'MODES' may expose an internal array.
</violation>
<violation beginline="274" endline="276" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Length$When" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like When
</violation>
<violation beginline="279" endline="279" begincolumn="29" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Length$Handler" variable="ps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ps' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="291" endline="293" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Length$Handler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="316" endline="316" begincolumn="22" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Length$AccumHandler" variable="accum" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'accum'
</violation>
<violation beginline="331" endline="338" begincolumn="32" endcolumn="9" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Length$AccumHandler" method="handle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="346" endline="350" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Length$AllHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/LoadProperties.java">
<violation beginline="55" endline="55" begincolumn="22" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadProperties" variable="src" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'src'
</violation>
<violation beginline="60" endline="60" begincolumn="56" endcolumn="63" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="65" endline="65" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadProperties" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="70" endline="70" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadProperties" variable="prefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'prefix'
</violation>
<violation beginline="164" endline="164" begincolumn="40" endcolumn="53" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="LoadProperties" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="219" endline="228" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="LoadProperties" method="addConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="230" endline="238" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="LoadProperties" method="getRequiredJavaResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/LoadResource.java">
<violation beginline="56" endline="56" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadResource" variable="quiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quiet'
</violation>
<violation beginline="62" endline="62" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadResource" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="67" endline="67" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadResource" variable="property" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'property'
</violation>
<violation beginline="72" endline="72" begincolumn="56" endcolumn="63" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="LoadResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="128" endline="128" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="LoadResource" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Local.java">
<violation beginline="41" endline="46" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Local" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/LogOutputStream.java">
<violation beginline="75" endline="82" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="LogOutputStream" method="processBuffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'processBuffer()' is missing an @Override annotation.
</violation>
<violation beginline="80" endline="80" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="LogOutputStream" method="processBuffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="80" endline="80" begincolumn="13" endcolumn="78" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="LogOutputStream" method="processBuffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="89" endline="91" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="LogOutputStream" method="processLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'processLine(String)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/MacroDef.java">
<violation beginline="48" endline="48" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroDef" variable="attributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'attributes' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="49" endline="49" begincolumn="42" endcolumn="49" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroDef" variable="elements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'elements' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="50" endline="50" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroDef" variable="textName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'textName'
</violation>
<violation beginline="51" endline="51" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroDef" variable="text" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'text'
</violation>
<violation beginline="52" endline="52" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroDef" variable="hasImplicitElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'hasImplicitElement'
</violation>
<violation beginline="114" endline="116" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="MacroDef" method="getBackTrace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="136" endline="136" begincolumn="28" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroDef$NestedSequential" variable="nested" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nested' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="184" endline="184" begincolumn="49" endcolumn="60" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="MacroDef" method="getNestedTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "sequential" appears 4 times in this file; the first occurrence is on line 184
</violation>
<violation beginline="446" endline="563" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="MacroDef$Text" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Text
</violation>
<violation beginline="485" endline="487" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="MacroDef$Text" method="getOptional" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="502" endline="504" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="MacroDef$Text" method="getTrim" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="568" endline="687" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroDef$TemplateElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'TemplateElement' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=8, WMC=18)
</violation>
<violation beginline="572" endline="572" begincolumn="25" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroDef$TemplateElement" variable="optional" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'optional'
</violation>
<violation beginline="573" endline="573" begincolumn="25" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroDef$TemplateElement" variable="implicit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'implicit'
</violation>
<violation beginline="767" endline="767" begincolumn="26" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroDef$MyAntTypeDefinition" variable="macroDef" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'macroDef' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/MacroInstance.java">
<violation beginline="51" endline="51" begincolumn="33" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="map" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'map' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="52" endline="52" begincolumn="51" endcolumn="67" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="nsElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nsElements'
</violation>
<violation beginline="55" endline="55" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="text" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'text'
</violation>
<violation beginline="56" endline="56" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="implicitTag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'implicitTag'
</violation>
<violation beginline="57" endline="57" begincolumn="24" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="unknownElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'unknownElements' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="94" endline="94" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroInstance" method="createDynamicElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="145" endline="145" begincolumn="28" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MacroInstance$Element" variable="unknownElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'unknownElements' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="165" endline="165" begincolumn="26" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="166" endline="166" begincolumn="26" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="167" endline="167" begincolumn="26" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="MacroInstance" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/MakeUrl.java">
<violation beginline="70" endline="70" begincolumn="27" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MakeUrl" variable="filesets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filesets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="75" endline="75" begincolumn="24" endcolumn="28" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MakeUrl" variable="paths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'paths' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="80" endline="80" begincolumn="13" endcolumn="36" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="MakeUrl" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field validate has the same name as a method
</violation>
<violation beginline="229" endline="229" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="MakeUrl" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="253" endline="253" begincolumn="21" endcolumn="22" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="MakeUrl" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Manifest.java">
<violation beginline="131" endline="131" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="134" endline="134" begincolumn="17" endcolumn="30" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="134" endline="134" begincolumn="32" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" variable="values" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'values' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="134" endline="134" begincolumn="45" endcolumn="52" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="140" endline="140" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" variable="currentIndex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'currentIndex'
</violation>
<violation beginline="144" endline="145" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" method="Attribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="155" endline="155" begincolumn="13" endcolumn="23" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" method="Attribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'parse' called during object construction
</violation>
<violation beginline="166" endline="166" begincolumn="13" endcolumn="27" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest$Attribute" method="Attribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setValue' called during object construction
</violation>
<violation beginline="387" endline="387" begincolumn="30" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" variable="warnings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'warnings' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="387" endline="387" begincolumn="45" endcolumn="52" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="393" endline="393" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="396" endline="396" begincolumn="40" endcolumn="49" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" variable="attributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'attributes' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="446" endline="446" begincolumn="30" endcolumn="31" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="676" endline="683" begincolumn="16" endcolumn="9" rule="ProperCloneImplementation" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#propercloneimplementation" priority="2">
Object clone() should be implemented with super.clone()
</violation>
<violation beginline="676" endline="683" begincolumn="16" endcolumn="9" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="676" endline="683" begincolumn="16" endcolumn="9" rule="CloneMethodMustImplementCloneable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodmustimplementcloneable" priority="3">
clone() method should be implemented only if implementing Cloneable interface
</violation>
<violation beginline="676" endline="683" begincolumn="16" endcolumn="9" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest$Section" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="738" endline="738" begincolumn="13" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Manifest" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="741" endline="741" begincolumn="13" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Manifest" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="744" endline="744" begincolumn="13" endcolumn="66" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Manifest" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="744" endline="744" begincolumn="34" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Manifest" variable="sections" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'sections' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="753" endline="753" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Manifest" method="getDefaultManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="756" endline="783" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Manifest" method="getDefaultManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="774" endline="774" begincolumn="17" endcolumn="48" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest" method="getDefaultManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'insr' is reassigned, but the original instance is not closed
</violation>
<violation beginline="812" endline="812" begincolumn="16" endcolumn="49" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest" method="Manifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="837" endline="837" begincolumn="13" endcolumn="41" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest" method="Manifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'addConfiguredSection' called during object construction
</violation>
<violation beginline="987" endline="989" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Manifest" method="write" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ManifestClassPath.java">
<violation beginline="86" endline="86" begincolumn="30" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ManifestClassPath" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'relPath' is never used (overwritten on lines 90 and 92)
</violation>
<violation beginline="87" endline="87" begincolumn="36" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ManifestClassPath" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'canonicalPath' is never used (overwritten on line 95)
</violation>
<violation beginline="101" endline="101" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ManifestClassPath" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="115" endline="115" begincolumn="25" endcolumn="26" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ManifestClassPath" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ManifestTask.java">
<violation beginline="56" endline="56" begincolumn="22" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ManifestTask" variable="nestedManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nestedManifest' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="76" endline="76" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ManifestTask" variable="mergeClassPaths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mergeClassPaths'
</violation>
<violation beginline="81" endline="81" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ManifestTask" variable="flattenClassPaths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'flattenClassPaths'
</violation>
<violation beginline="86" endline="96" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="ManifestTask$Mode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Mode
</violation>
<violation beginline="150" endline="150" begincolumn="70" endcolumn="83" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ManifestTask" method="checkAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="220" endline="220" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ManifestTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Mkdir.java">
<violation beginline="50" endline="50" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Mkdir" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Move.java">
<violation beginline="52" endline="381" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Move" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Move
</violation>
<violation beginline="83" endline="83" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Move" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="113" endline="113" begincolumn="35" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Move" method="doFileOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'renamed' is never used (overwritten on line 116)
</violation>
<violation beginline="115" endline="115" begincolumn="66" endcolumn="71" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Move" method="doFileOperations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " to " appears 9 times in this file; the first occurrence is on line 115
</violation>
<violation beginline="210" endline="210" begincolumn="25" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Move" method="moveFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'moved' is never used (overwritten on line 213)
</violation>
<violation beginline="340" endline="340" begincolumn="56" endcolumn="63" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Move" method="renameFile" variable="destFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'destFile'
</violation>
<violation beginline="340" endline="340" begincolumn="39" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Move" method="renameFile" variable="sourceFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'sourceFile'
</violation>
<violation beginline="341" endline="341" begincolumn="73" endcolumn="86" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Move" method="renameFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Nice.java">
<violation beginline="39" endline="98" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Nice" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Nice
</violation>
<violation beginline="56" endline="56" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Nice" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Pack.java">
<violation beginline="39" endline="213" begincolumn="17" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Pack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Pack
</violation>
<violation beginline="43" endline="43" begincolumn="15" endcolumn="27" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Pack" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field zipFile has the same name as a method
</violation>
<violation beginline="111" endline="111" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Pack" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="133" endline="133" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Pack" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Parallel.java">
<violation beginline="57" endline="57" begincolumn="28" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Parallel$TaskList" variable="tasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'tasks' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="72" endline="72" begincolumn="13" endcolumn="24" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Parallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="72" endline="72" begincolumn="13" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="72" endline="72" begincolumn="26" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="nestedTasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nestedTasks' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="72" endline="72" begincolumn="44" endcolumn="51" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Parallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="75" endline="75" begincolumn="19" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="78" endline="78" begincolumn="17" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="numThreads" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'numThreads'
</violation>
<violation beginline="78" endline="78" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="81" endline="81" begincolumn="17" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="numThreadsPerProcessor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'numThreadsPerProcessor'
</violation>
<violation beginline="81" endline="81" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="84" endline="84" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="87" endline="87" begincolumn="22" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="90" endline="90" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="96" endline="96" begincolumn="13" endcolumn="30" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="99" endline="99" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="102" endline="102" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="102" endline="102" begincolumn="13" endcolumn="24" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Parallel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="105" endline="105" begincolumn="17" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="numExceptions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'numExceptions'
</violation>
<violation beginline="105" endline="105" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="108" endline="108" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="111" endline="111" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="114" endline="114" begincolumn="13" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="133" endline="134" begincolumn="51" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Parallel" method="setPollInterval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="204" endline="204" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Parallel" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="222" endline="222" begincolumn="36" endcolumn="59" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Parallel" method="processExceptions" variable="runnables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="256" endline="256" begincolumn="39" endcolumn="52" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Parallel" method="spinThreads" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="268" endline="268" begincolumn="33" endcolumn="43" rule="AvoidThreadGroup" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Parallel" method="spinThreads" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidthreadgroup" priority="3">
Avoid using java.lang.ThreadGroup; it is not thread safe
</violation>
<violation beginline="275" endline="281" begincolumn="34" endcolumn="9" rule="EmptySynchronizedBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Parallel" method="spinThreads" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptysynchronizedblock" priority="3">
Avoid empty synchronized blocks
</violation>
<violation beginline="307" endline="324" begincolumn="41" endcolumn="21" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Parallel" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="408" endline="408" begincolumn="26" endcolumn="47" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Parallel" method="killAll" variable="running" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="432" endline="432" begincolumn="22" endcolumn="25" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Parallel$TaskRunnable" variable="task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'task' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="455" endline="460" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Parallel$TaskRunnable" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="480" endline="482" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel$TaskRunnable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="484" endline="486" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Parallel$TaskRunnable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Patch.java">
<violation beginline="41" endline="41" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Patch" variable="havePatchfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'havePatchfile'
</violation>
<violation beginline="42" endline="42" begincolumn="25" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Patch" variable="cmd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cmd' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="47" endline="47" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Patch" variable="failOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnError'
</violation>
<violation beginline="113" endline="113" begincolumn="42" endcolumn="55" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Patch" method="setStrip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="162" endline="162" begincolumn="26" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Patch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="162" endline="162" begincolumn="26" endcolumn="48" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Patch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="169" endline="169" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Patch" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/PathConvert.java">
<violation beginline="59" endline="59" begincolumn="23" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'path'
</violation>
<violation beginline="63" endline="63" begincolumn="23" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="refid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'refid'
</violation>
<violation beginline="67" endline="67" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="targetOS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetOS'
</violation>
<violation beginline="71" endline="71" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="targetWindows" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetWindows'
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="property" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'property'
</violation>
<violation beginline="83" endline="83" begincolumn="28" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="prefixMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'prefixMap' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="83" endline="83" begincolumn="44" endcolumn="51" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="87" endline="87" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="pathSep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'pathSep'
</violation>
<violation beginline="91" endline="91" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="dirSep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dirSep'
</violation>
<violation beginline="94" endline="94" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" variable="mapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapper'
</violation>
<violation beginline="108" endline="108" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert$MapEntry" variable="from" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'from'
</violation>
<violation beginline="109" endline="109" begincolumn="24" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert$MapEntry" variable="to" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'to'
</violation>
<violation beginline="144" endline="144" begincolumn="29" endcolumn="65" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="PathConvert$MapEntry" method="apply" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="146" endline="146" begincolumn="29" endcolumn="65" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="PathConvert$MapEntry" method="apply" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="195" endline="201" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="PathConvert" method="getPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="329" endline="329" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PathConvert" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="365" endline="365" begincolumn="21" endcolumn="38" rule="UseArraysAsList" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraysaslist" priority="3">
Use asList instead of tight loops
</violation>
<violation beginline="365" endline="365" begincolumn="21" endcolumn="38" rule="UseArraysAsList" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="PathConvert" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraysaslist" priority="3">
Use asList instead of tight loops
</violation>
<violation beginline="423" endline="423" begincolumn="17" endcolumn="31" rule="UseEqualsToCompareStrings" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="PathConvert" method="mapElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#useequalstocomparestrings" priority="3">
Use equals() to compare strings instead of '==' or '!='
</violation>
<violation beginline="459" endline="459" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PathConvert" method="validateSetup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/PreSetDef.java">
<violation beginline="110" endline="110" begincolumn="35" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PreSetDef$PreSetDefinition" variable="parent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'parent' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="111" endline="111" begincolumn="35" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PreSetDef$PreSetDefinition" variable="element" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'element' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="119" endline="119" begincolumn="51" endcolumn="56" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="PreSetDef$PreSetDefinition" method="PreSetDefinition" variable="parent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'parent'
</violation>
<violation beginline="136" endline="136" begincolumn="38" endcolumn="52" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="PreSetDef$PreSetDefinition" method="setClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Not supported" appears 5 times in this file; the first occurrence is on line 136
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ProcessDestroyer.java">
<violation beginline="32" endline="32" begincolumn="51" endcolumn="55" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 20000 should separate every third digit with an underscore
</violation>
<violation beginline="38" endline="38" begincolumn="34" endcolumn="60" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" variable="destroyProcessThread" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destroyProcessThread'
</violation>
<violation beginline="42" endline="42" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" variable="added" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'added'
</violation>
<violation beginline="45" endline="45" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" variable="running" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'running'
</violation>
<violation beginline="85" endline="87" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="ProcessDestroyer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="87" endline="87" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="ProcessDestroyer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="88" endline="88" begincolumn="13" endcolumn="31" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="ProcessDestroyer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="103" endline="103" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="addShutdownHook" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="110" endline="110" begincolumn="21" endcolumn="39" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="addShutdownHook" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="125" endline="125" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="removeShutdownHook" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="128" endline="128" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="removeShutdownHook" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="135" endline="135" begincolumn="21" endcolumn="39" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="ProcessDestroyer" method="removeShutdownHook" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/ProjectHelperTask.java">
<violation beginline="35" endline="35" begincolumn="33" endcolumn="46" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ProjectHelperTask" variable="projectHelpers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'projectHelpers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="37" endline="39" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="ProjectHelperTask" method="addConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="42" endline="42" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="ProjectHelperTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Property.java">
<violation beginline="97" endline="97" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Property" variable="valueAttributeUsed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'valueAttributeUsed'
</violation>
<violation beginline="98" endline="98" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Property" variable="relative" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'relative'
</violation>
<violation beginline="100" endline="100" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Property" variable="prefixValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'prefixValues'
</violation>
<violation beginline="219" endline="219" begincolumn="32" endcolumn="34" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Property" method="addText" variable="msg" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'msg'
</violation>
<violation beginline="219" endline="219" begincolumn="32" endcolumn="34" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Property" method="addText" variable="msg" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'msg'
</violation>
<violation beginline="317" endline="319" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Property" method="getPrefixValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="501" endline="501" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Property" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="537" endline="537" begincolumn="26" endcolumn="34" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Property" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="585" endline="585" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Property" method="loadUrl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="626" endline="626" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Property" method="loadFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="651" endline="651" begincolumn="26" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Property" method="loadResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'cL' is never used (overwritten on lines 655 and 657)
</violation>
<violation beginline="659" endline="659" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Property" method="loadResource" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="660" endline="680" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Property" method="loadResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="687" endline="687" begincolumn="43" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Property" method="loadEnvironment" variable="prefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'prefix'
</violation>
<violation beginline="705" endline="705" begincolumn="39" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Property" method="loadRuntime" variable="prefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'prefix'
</violation>
<violation beginline="770" endline="770" begincolumn="73" endcolumn="86" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Property" method="resolveAllProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/PropertyHelperTask.java">
<violation beginline="70" endline="70" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="PropertyHelperTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="71" endline="71" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="PropertyHelperTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="77" endline="82" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="PropertyHelperTask" method="addConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="88" endline="90" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="PropertyHelperTask" method="addConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="107" endline="107" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PropertyHelperTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="138" endline="143" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="PropertyHelperTask" method="getAddDelegateList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/PumpStreamHandler.java">
<violation beginline="56" endline="56" begincolumn="13" endcolumn="67" rule="AvoidThrowingNullPointerException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="PumpStreamHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingnullpointerexception" priority="1">
Avoid throwing null pointer exceptions.
</violation>
<violation beginline="59" endline="59" begincolumn="13" endcolumn="67" rule="AvoidThrowingNullPointerException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="PumpStreamHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingnullpointerexception" priority="1">
Avoid throwing null pointer exceptions.
</violation>
<violation beginline="107" endline="109" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProcessOutputStream(InputStream)' is missing an @Override annotation.
</violation>
<violation beginline="116" endline="118" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="setProcessErrorStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProcessErrorStream(InputStream)' is missing an @Override annotation.
</violation>
<violation beginline="125" endline="131" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="setProcessInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProcessInputStream(OutputStream)' is missing an @Override annotation.
</violation>
<violation beginline="136" endline="140" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'start()' is missing an @Override annotation.
</violation>
<violation beginline="145" endline="160" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'stop()' is missing an @Override annotation.
</violation>
<violation beginline="150" endline="152" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="155" endline="157" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="162" endline="162" begincolumn="26" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="PumpStreamHandler" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Recorder.java">
<violation beginline="55" endline="55" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Recorder" variable="filename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filename'
</violation>
<violation beginline="59" endline="59" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Recorder" variable="append" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'append'
</violation>
<violation beginline="64" endline="64" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Recorder" variable="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'start'
</violation>
<violation beginline="68" endline="68" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Recorder" variable="emacsMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'emacsMode'
</violation>
<violation beginline="80" endline="82" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'init()' is missing an @Override annotation.
</violation>
<violation beginline="104" endline="104" begincolumn="13" endcolumn="55" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="setAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="146" endline="146" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Recorder" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="146" endline="168" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="184" endline="186" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder$ActionChoices" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
<violation beginline="185" endline="185" begincolumn="13" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder$ActionChoices" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
<violation beginline="207" endline="207" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Recorder" method="getRecorder" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="231" endline="232" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Recorder" method="buildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="231" endline="232" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="buildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="239" endline="240" begincolumn="51" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Recorder" method="subBuildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="239" endline="240" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="subBuildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'subBuildStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="247" endline="248" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Recorder" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="247" endline="248" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="255" endline="256" begincolumn="50" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Recorder" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="255" endline="256" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'targetFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="263" endline="264" begincolumn="47" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Recorder" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="263" endline="264" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'taskStarted(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="271" endline="272" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Recorder" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="271" endline="272" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'taskFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="279" endline="280" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Recorder" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="279" endline="280" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'messageLogged(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="287" endline="289" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildFinished(BuildEvent)' is missing an @Override annotation.
</violation>
<violation beginline="297" endline="301" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Recorder" method="subBuildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'subBuildFinished(BuildEvent)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Redirector.java">
<violation beginline="67" endline="67" begincolumn="25" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector$PropertyOutputStream" variable="closed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'closed'
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="95" endline="95" begincolumn="13" endcolumn="23" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="100" endline="100" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="107" endline="107" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="logError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'logError'
</violation>
<violation beginline="107" endline="107" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="112" endline="112" begincolumn="34" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="baos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'baos'
</violation>
<violation beginline="112" endline="112" begincolumn="13" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="117" endline="117" begincolumn="34" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="errorBaos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errorBaos'
</violation>
<violation beginline="117" endline="117" begincolumn="13" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="120" endline="120" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="123" endline="123" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="126" endline="126" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="129" endline="129" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="appendOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'appendOut'
</violation>
<violation beginline="129" endline="129" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="131" endline="131" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="appendErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'appendErr'
</violation>
<violation beginline="131" endline="131" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="134" endline="134" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="alwaysLogOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'alwaysLogOut'
</violation>
<violation beginline="134" endline="134" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="136" endline="136" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="alwaysLogErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'alwaysLogErr'
</violation>
<violation beginline="136" endline="136" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="139" endline="139" begincolumn="13" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="141" endline="141" begincolumn="13" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="144" endline="144" begincolumn="19" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="147" endline="147" begincolumn="26" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="outputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputStream'
</violation>
<violation beginline="147" endline="147" begincolumn="13" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="150" endline="150" begincolumn="26" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="errorStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errorStream'
</violation>
<violation beginline="150" endline="150" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="153" endline="153" begincolumn="25" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="inputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inputStream'
</violation>
<violation beginline="153" endline="153" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="156" endline="156" begincolumn="25" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="outPrintStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outPrintStream'
</violation>
<violation beginline="156" endline="156" begincolumn="13" endcolumn="46" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="159" endline="159" begincolumn="25" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="errorPrintStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errorPrintStream'
</violation>
<violation beginline="159" endline="159" begincolumn="13" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="162" endline="162" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="162" endline="162" begincolumn="13" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="165" endline="165" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="165" endline="165" begincolumn="13" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="168" endline="168" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="168" endline="168" begincolumn="13" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="171" endline="171" begincolumn="13" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="174" endline="174" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="177" endline="177" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="180" endline="180" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="183" endline="183" begincolumn="49" endcolumn="59" rule="AvoidThreadGroup" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Redirector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidthreadgroup" priority="3">
Avoid using java.lang.ThreadGroup; it is not thread safe
</violation>
<violation beginline="183" endline="183" begincolumn="19" endcolumn="74" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="186" endline="186" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="189" endline="189" begincolumn="19" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="192" endline="192" begincolumn="19" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="195" endline="195" begincolumn="19" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="198" endline="198" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="outputIsBinary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputIsBinary'
</violation>
<violation beginline="198" endline="198" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="237" endline="237" begincolumn="26" endcolumn="43" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="setInput" variable="input" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="278" endline="282" begincolumn="17" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Redirector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="302" endline="302" begincolumn="27" endcolumn="42" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="setOutput" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="402" endline="402" begincolumn="26" endcolumn="43" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="setError" variable="error" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="501" endline="501" begincolumn="44" endcolumn="62" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="setInputFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="513" endline="513" begincolumn="45" endcolumn="63" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="setOutputFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="525" endline="525" begincolumn="44" endcolumn="62" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="setErrorFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="555" endline="555" begincolumn="30" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="setPropertyFromBAOS" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this StringReader object are closed after use
</violation>
<violation beginline="569" endline="569" begincolumn="36" endcolumn="44" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="outputLog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LogOutputStream object are closed after use
</violation>
<violation beginline="575" endline="575" begincolumn="48" endcolumn="70" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="578" endline="578" begincolumn="47" endcolumn="49" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="snk" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LeadPipeInputStream object are closed after use
</violation>
<violation beginline="581" endline="581" begincolumn="33" endcolumn="41" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="outPumpIn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LeadPipeInputStream object are closed after use
</violation>
<violation beginline="583" endline="583" begincolumn="28" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="587" endline="587" begincolumn="32" endcolumn="54" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="611" endline="611" begincolumn="36" endcolumn="43" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="errorLog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LogOutputStream object are closed after use
</violation>
<violation beginline="617" endline="617" begincolumn="47" endcolumn="68" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="620" endline="620" begincolumn="47" endcolumn="49" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="snk" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LeadPipeInputStream object are closed after use
</violation>
<violation beginline="623" endline="623" begincolumn="33" endcolumn="41" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="errPumpIn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LeadPipeInputStream object are closed after use
</violation>
<violation beginline="625" endline="625" begincolumn="28" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="629" endline="629" begincolumn="32" endcolumn="53" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="678" endline="678" begincolumn="24" endcolumn="45" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createStreams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="710" endline="710" begincolumn="32" endcolumn="46" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="outStreams" variable="keepAliveOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PropertyOutputStream object are closed after use
</violation>
<violation beginline="747" endline="747" begincolumn="32" endcolumn="45" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="errorStreams" variable="keepAliveError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PropertyOutputStream object are closed after use
</violation>
<violation beginline="764" endline="764" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Redirector" method="createHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="938" endline="938" begincolumn="40" endcolumn="59" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="complete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="938" endline="938" begincolumn="40" endcolumn="59" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Redirector" method="complete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="938" endline="940" begincolumn="27" endcolumn="25" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Redirector" method="complete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Rename.java">
<violation beginline="75" endline="75" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Rename" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="75" endline="96" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Rename" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Replace.java">
<violation beginline="64" endline="64" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="sourceFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sourceFile'
</violation>
<violation beginline="65" endline="65" begincolumn="26" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="token" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'token'
</violation>
<violation beginline="66" endline="66" begincolumn="26" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'value' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="68" endline="68" begincolumn="22" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="propertyResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'propertyResource'
</violation>
<violation beginline="69" endline="69" begincolumn="22" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="replaceFilterResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'replaceFilterResource'
</violation>
<violation beginline="70" endline="70" begincolumn="24" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="properties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'properties'
</violation>
<violation beginline="73" endline="73" begincolumn="18" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="dir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dir'
</violation>
<violation beginline="77" endline="77" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="summary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'summary'
</violation>
<violation beginline="80" endline="80" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="84" endline="84" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="85" endline="85" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace" variable="failOnNoReplacements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnNoReplacements'
</violation>
<violation beginline="92" endline="92" begincolumn="25" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Replace$NestedString" variable="expandProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'expandProperties'
</violation>
<violation beginline="93" endline="93" begincolumn="30" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace$NestedString" variable="buf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'buf' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="93" endline="93" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace$NestedString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="131" endline="345" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Replacefilter' is suspected to be a Data Class (WOC=30.000%, NOPA=0, NOAM=7, WMC=35)
</violation>
<violation beginline="137" endline="137" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="138" endline="138" begincolumn="30" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" variable="outputBuffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'outputBuffer' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="138" endline="138" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="144" endline="144" begincolumn="39" endcolumn="52" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="279" endline="281" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="291" endline="293" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="303" endline="313" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="320" endline="324" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$Replacefilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="355" endline="355" begincolumn="30" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace$FileInput" variable="outputBuffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'outputBuffer' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="355" endline="355" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace$FileInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="358" endline="358" begincolumn="24" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace$FileInput" variable="buffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'buffer' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="369" endline="377" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace$FileInput" method="FileInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="385" endline="387" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$FileInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="394" endline="401" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$FileInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="420" endline="420" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace$FileOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="431" endline="439" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace$FileOutput" method="FileOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="450" endline="452" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$FileOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="461" endline="465" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$FileOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="471" endline="474" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Replace$FileOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="492" endline="492" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="570" endline="570" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="600" endline="600" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace" method="validateReplacefilters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="610" endline="610" begincolumn="63" endcolumn="76" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace" method="getProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="622" endline="622" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace" method="getProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="628" endline="629" begincolumn="13" endcolumn="44" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Replace" method="getProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="642" endline="642" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Replace" method="processFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Retry.java">
<violation beginline="44" endline="44" begincolumn="17" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Retry" variable="retryDelay" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'retryDelay'
</violation>
<violation beginline="51" endline="57" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Retry" method="addTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="84" endline="84" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Retry" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="90" endline="90" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Retry" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="93" endline="95" begincolumn="21" endcolumn="97" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Retry" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Rmic.java">
<violation beginline="89" endline="838" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Rmic
</violation>
<violation beginline="119" endline="119" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="verify" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verify'
</violation>
<violation beginline="120" endline="120" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="filtering" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filtering'
</violation>
<violation beginline="122" endline="122" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="iiop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'iiop'
</violation>
<violation beginline="124" endline="124" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="idl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'idl'
</violation>
<violation beginline="126" endline="126" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="debug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'debug'
</violation>
<violation beginline="128" endline="128" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="includeJavaRuntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeJavaRuntime'
</violation>
<violation beginline="130" endline="130" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Rmic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="130" endline="130" begincolumn="28" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="compileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'compileList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="130" endline="130" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="132" endline="132" begincolumn="28" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'loader'
</violation>
<violation beginline="134" endline="134" begincolumn="30" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="facade" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'facade' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="135" endline="135" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="executable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'executable'
</violation>
<violation beginline="137" endline="137" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="listFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'listFiles'
</violation>
<violation beginline="139" endline="139" begincolumn="25" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Rmic" variable="nestedAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nestedAdapter'
</violation>
<violation beginline="257" endline="259" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getFiltering" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="274" endline="276" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getDebug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="282" endline="288" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Rmic" method="setClasspath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="294" endline="299" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Rmic" method="createClasspath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="333" endline="335" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getVerify" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="351" endline="353" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getIiop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="385" endline="387" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getIdl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="409" endline="409" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getFileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="428" endline="430" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getIncludeantruntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="448" endline="450" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getIncludejavaruntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="457" endline="463" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Rmic" method="setExtdirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="469" endline="474" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Rmic" method="createExtdirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="488" endline="488" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Rmic" method="getCompileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="598" endline="598" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Rmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="634" endline="634" begincolumn="23" endcolumn="30" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Rmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal ".class" appears 5 times in this file; the first occurrence is on line 634
</violation>
<violation beginline="702" endline="702" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Rmic" method="moveGeneratedFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="782" endline="786" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Rmic" method="isValidRmiRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/SQLExec.java">
<violation beginline="90" endline="90" begincolumn="29" endcolumn="66" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SQLExec$DelimiterType" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="98" endline="98" begincolumn="17" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="goodSql" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'goodSql'
</violation>
<violation beginline="98" endline="98" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="100" endline="100" begincolumn="17" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="totalSql" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'totalSql'
</violation>
<violation beginline="100" endline="100" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="105" endline="105" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="conn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'conn'
</violation>
<violation beginline="105" endline="105" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="110" endline="110" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="115" endline="115" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="statement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'statement'
</violation>
<violation beginline="115" endline="115" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="120" endline="120" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="srcFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'srcFile'
</violation>
<violation beginline="120" endline="120" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="125" endline="125" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="130" endline="130" begincolumn="13" endcolumn="60" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="130" endline="130" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="135" endline="135" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="141" endline="141" begincolumn="13" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="146" endline="146" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="print" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'print'
</violation>
<violation beginline="146" endline="146" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="151" endline="151" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="156" endline="156" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="161" endline="161" begincolumn="22" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="output" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'output'
</violation>
<violation beginline="161" endline="161" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="166" endline="166" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="outputEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputEncoding'
</violation>
<violation beginline="166" endline="166" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="171" endline="171" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="171" endline="171" begincolumn="30" endcolumn="36" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SQLExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "abort" appears 5 times in this file; the first occurrence is on line 171
</violation>
<violation beginline="176" endline="176" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="176" endline="176" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="181" endline="181" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="append" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'append'
</violation>
<violation beginline="181" endline="181" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="186" endline="186" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="keepformat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepformat'
</violation>
<violation beginline="186" endline="186" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="193" endline="193" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="201" endline="201" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="207" endline="207" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="213" endline="213" begincolumn="13" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="219" endline="219" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="showWarnings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'showWarnings'
</violation>
<violation beginline="219" endline="219" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="228" endline="228" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="248" endline="248" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="csvQuoteChar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'csvQuoteChar'
</violation>
<violation beginline="248" endline="248" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="254" endline="254" begincolumn="21" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="treatWarningsAsErrors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'treatWarningsAsErrors'
</violation>
<violation beginline="254" endline="254" begincolumn="13" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="260" endline="260" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="errorProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errorProperty'
</violation>
<violation beginline="260" endline="260" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="266" endline="266" begincolumn="20" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="warningProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'warningProperty'
</violation>
<violation beginline="266" endline="266" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="273" endline="273" begincolumn="20" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="rowCountProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rowCountProperty'
</violation>
<violation beginline="273" endline="273" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="278" endline="278" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="forceCsvQuoteChar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forceCsvQuoteChar'
</violation>
<violation beginline="278" endline="278" begincolumn="13" endcolumn="46" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="305" endline="307" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="getExpandProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="615" endline="615" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="616" endline="616" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="623" endline="627" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="654" endline="713" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="655" endline="655" begincolumn="29" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="656" endline="699" begincolumn="17" endcolumn="17" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="659" endline="659" begincolumn="38" endcolumn="39" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" variable="os" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="709" endline="711" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="736" endline="736" begincolumn="16" endcolumn="45" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="runStatements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="791" endline="791" begincolumn="19" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execSQL" variable="resultSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this ResultSet object are closed after use
</violation>
<violation beginline="792" endline="843" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execSQL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="797" endline="797" begincolumn="31" endcolumn="31" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execSQL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'updateCount' is never used (overwritten on line 800)
</violation>
<violation beginline="797" endline="797" begincolumn="13" endcolumn="53" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="execSQL" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="933" endline="935" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="closeQuietly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1000" endline="1000" begincolumn="26" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SQLExec$Transaction" variable="tSrcResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'tSrcResource'
</violation>
<violation beginline="1107" endline="1107" begincolumn="43" endcolumn="49" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SQLExec" method="printWarnings" variable="warning" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'warning'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Sequential.java">
<violation beginline="44" endline="44" begincolumn="24" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sequential" variable="nestedTasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nestedTasks' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="44" endline="44" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Sequential" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="62" endline="62" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sequential" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/SetPermissions.java">
<violation beginline="57" endline="57" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SetPermissions" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resources'
</violation>
<violation beginline="145" endline="145" begincolumn="36" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="SetPermissions" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'currentResource' is never used (overwritten on line 148)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/SignJar.java">
<violation beginline="151" endline="151" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SignJar" variable="force" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'force'
</violation>
<violation beginline="403" endline="403" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SignJar" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="492" endline="492" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SignJar" method="signOneJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Sleep.java">
<violation beginline="51" endline="51" begincolumn="17" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Sleep" variable="seconds" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'seconds'
</violation>
<violation beginline="56" endline="56" begincolumn="17" endcolumn="25" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Sleep" variable="hours" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'hours'
</violation>
<violation beginline="60" endline="60" begincolumn="17" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Sleep" variable="minutes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'minutes'
</violation>
<violation beginline="65" endline="65" begincolumn="17" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Sleep" variable="milliseconds" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'milliseconds'
</violation>
<violation beginline="70" endline="71" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Sleep" method="Sleep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="70" endline="71" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Sleep" method="Sleep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="150" endline="150" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sleep" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="163" endline="163" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sleep" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="170" endline="170" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sleep" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/StreamPumper.java">
<violation beginline="42" endline="42" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="StreamPumper" variable="autoflush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'autoflush'
</violation>
<violation beginline="43" endline="43" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="StreamPumper" variable="exception" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'exception'
</violation>
<violation beginline="45" endline="45" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="StreamPumper" variable="started" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'started'
</violation>
<violation beginline="107" endline="109" begincolumn="17" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="StreamPumper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="125" endline="163" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="150" endline="150" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="179" endline="183" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="waitFor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="190" endline="195" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="setBufferSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="202" endline="204" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="getBufferSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="210" endline="212" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="getException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="226" endline="231" begincolumn="18" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="226" endline="231" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="StreamPumper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="233" endline="233" begincolumn="26" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="StreamPumper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="260" endline="260" begincolumn="24" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="StreamPumper" method="doPostStop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="294" endline="296" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="StreamPumper$PostStopHandle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="307" endline="309" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="StreamPumper$PostStopHandle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/SubAnt.java">
<violation beginline="65" endline="65" begincolumn="17" endcolumn="26" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="ant" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ant'
</violation>
<violation beginline="66" endline="66" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="subTarget" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'subTarget'
</violation>
<violation beginline="68" endline="68" begincolumn="18" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="genericantfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'genericantfile'
</violation>
<violation beginline="69" endline="69" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="70" endline="70" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="inheritAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inheritAll'
</violation>
<violation beginline="71" endline="71" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="inheritRefs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inheritRefs'
</violation>
<violation beginline="73" endline="73" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="output" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'output'
</violation>
<violation beginline="75" endline="75" begincolumn="28" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="properties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'properties' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="75" endline="75" begincolumn="45" endcolumn="52" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="76" endline="76" begincolumn="33" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="references" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'references' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="76" endline="76" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="77" endline="77" begincolumn="31" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="propertySets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'propertySets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="77" endline="77" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="80" endline="80" begincolumn="33" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SubAnt" variable="targets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'targets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="80" endline="80" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="SubAnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="227" endline="227" begincolumn="25" endcolumn="45" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SubAnt" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Leaving directory: " appears 4 times in this file; the first occurrence is on line 227
</violation>
<violation beginline="229" endline="229" begincolumn="22" endcolumn="37" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SubAnt" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="237" endline="245" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SubAnt" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="287" endline="287" begincolumn="24" endcolumn="37" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="SubAnt" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="314" endline="322" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="SubAnt" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Sync.java">
<violation beginline="59" endline="596" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Sync" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Sync
</violation>
<violation beginline="67" endline="67" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Sync" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resources'
</violation>
<violation beginline="77" endline="77" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sync" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="103" endline="103" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sync" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="142" endline="142" begincolumn="35" endcolumn="35" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Sync" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'removedDirCount' is never used (overwritten on lines 145 and 148)
</violation>
<violation beginline="191" endline="191" begincolumn="15" endcolumn="45" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Sync" method="removeOrphanFiles" variable="removedCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="455" endline="455" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sync$MyCopy" variable="nonOrphans" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nonOrphans' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="497" endline="499" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Sync$MyCopy" method="getIncludeEmptyDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="529" endline="531" begincolumn="16" endcolumn="9" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Sync$SyncTarget" method="SyncTarget" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="540" endline="540" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Sync$SyncTarget" method="setDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Tar.java">
<violation beginline="67" endline="1030" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Tar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Tar
</violation>
<violation beginline="107" endline="107" begincolumn="5" endcolumn="17" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Tar" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field tarFile has the same name as a method
</violation>
<violation beginline="107" endline="107" begincolumn="5" endcolumn="17" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Tar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="108" endline="108" begincolumn="5" endcolumn="17" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Tar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="113" endline="113" begincolumn="5" endcolumn="22" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="113" endline="113" begincolumn="39" endcolumn="46" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="113" endline="113" begincolumn="5" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Tar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="116" endline="116" begincolumn="70" endcolumn="77" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="123" endline="123" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar" variable="longWarningGiven" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'longWarningGiven'
</violation>
<violation beginline="260" endline="260" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Tar" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="276" endline="276" begincolumn="54" endcolumn="61" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="390" endline="390" begincolumn="85" endcolumn="89" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" method="tarResource" variable="vPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'vPath'
</violation>
<violation beginline="390" endline="390" begincolumn="85" endcolumn="89" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" method="tarResource" variable="vPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'vPath'
</violation>
<violation beginline="390" endline="390" begincolumn="85" endcolumn="89" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" method="tarResource" variable="vPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'vPath'
</violation>
<violation beginline="390" endline="390" begincolumn="85" endcolumn="89" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" method="tarResource" variable="vPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'vPath'
</violation>
<violation beginline="502" endline="502" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Tar" method="tarResource" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="503" endline="520" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" method="tarResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="531" endline="531" begincolumn="41" endcolumn="60" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" method="archiveIsUpToDate" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="608" endline="608" begincolumn="87" endcolumn="94" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar" method="check" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="637" endline="637" begincolumn="49" endcolumn="68" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar" method="check" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="663" endline="663" begincolumn="31" endcolumn="69" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar" method="check" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="794" endline="794" begincolumn="26" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar$TarFileSet" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'files'
</violation>
<violation beginline="796" endline="796" begincolumn="25" endcolumn="54" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tar$TarFileSet" variable="preserveLeadingSlashes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLeadingSlashes'
</violation>
<violation beginline="826" endline="826" begincolumn="13" endcolumn="25" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar$TarFileSet" method="getFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'files' may expose an internal array.
</violation>
<violation beginline="859" endline="861" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Tar$TarFileSet" method="getPreserveLeadingSlashes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="894" endline="894" begincolumn="13" endcolumn="31" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tar$TarLongFileMode" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_MODES' may expose an internal array.
</violation>
<violation beginline="1008" endline="1008" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Tar$TarCompressionMethod" method="newXZOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/TaskOutputStream.java">
<violation beginline="44" endline="44" begincolumn="18" endcolumn="21" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="TaskOutputStream" variable="task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'task' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="45" endline="45" begincolumn="13" endcolumn="24" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="TaskOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="46" endline="46" begincolumn="17" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="TaskOutputStream" variable="msgOutputLevel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'msgOutputLevel' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="54" endline="54" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="TaskOutputStream" method="TaskOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="56" endline="56" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="TaskOutputStream" method="TaskOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="58" endline="58" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="TaskOutputStream" method="TaskOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="74" endline="84" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="TaskOutputStream" method="write" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'write(int)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/TempFile.java">
<violation beginline="43" endline="161" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="TempFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'TempFile' is suspected to be a Data Class (WOC=11.111%, NOPA=0, NOAM=8, WMC=13)
</violation>
<violation beginline="55" endline="55" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="TempFile" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="150" endline="150" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="TempFile" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Touch.java">
<violation beginline="79" endline="79" begincolumn="26" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="81" endline="81" begincolumn="13" endcolumn="22" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="82" endline="82" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="83" endline="83" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="84" endline="84" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="84" endline="84" begincolumn="27" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Touch" variable="filesets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filesets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="84" endline="84" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Touch" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="85" endline="85" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="86" endline="86" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="87" endline="87" begincolumn="13" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="88" endline="88" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="89" endline="89" begincolumn="28" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Touch" variable="fileNameMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fileNameMapper'
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="90" endline="90" begincolumn="13" endcolumn="61" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Touch" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="154" endline="154" begincolumn="24" endcolumn="52" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Touch" method="getPrimaryFormat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="178" endline="178" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Touch" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="208" endline="211" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Touch" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="218" endline="218" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Touch" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="218" endline="262" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Touch" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="271" endline="271" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Touch" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="280" endline="280" begincolumn="35" endcolumn="48" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Touch" method="touch" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Truncate.java">
<violation beginline="57" endline="57" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Truncate" variable="mkdirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mkdirs'
</violation>
<violation beginline="117" endline="134" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Truncate" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="168" endline="168" begincolumn="32" endcolumn="35" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Truncate" method="process" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'raf' is never used (overwritten on line 170)
</violation>
<violation beginline="171" endline="171" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Truncate" method="process" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="174" endline="195" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Truncate" method="process" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="198" endline="203" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Truncate" method="getPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Tstamp.java">
<violation beginline="53" endline="53" begincolumn="32" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Tstamp" variable="customFormats" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'customFormats' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="53" endline="53" begincolumn="52" endcolumn="59" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tstamp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="75" endline="75" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Tstamp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="81" endline="81" begincolumn="39" endcolumn="70" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Tstamp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="84" endline="84" begincolumn="39" endcolumn="66" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Tstamp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="91" endline="91" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Tstamp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="150" endline="150" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Tstamp" method="getNow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="173" endline="173" begincolumn="21" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Tstamp$CustomFormat" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'offset'
</violation>
<violation beginline="285" endline="285" begincolumn="51" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tstamp$CustomFormat" method="execute" variable="date" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'date'
</violation>
<violation beginline="296" endline="296" begincolumn="23" endcolumn="51" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Tstamp$CustomFormat" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="318" endline="372" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Tstamp$Unit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Unit
</violation>
<violation beginline="340" endline="340" begincolumn="38" endcolumn="51" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Tstamp$Unit" variable="calendarFields" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'calendarFields' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="370" endline="370" begincolumn="13" endcolumn="25" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Tstamp$Unit" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'UNITS' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Unpack.java">
<violation beginline="128" endline="128" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Unpack" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="167" endline="167" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Unpack" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Untar.java">
<violation beginline="152" endline="152" begincolumn="20" endcolumn="52" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Untar" method="expandStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="222" endline="222" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Untar$UntarCompressionMethod" method="decompress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="231" endline="231" begincolumn="30" endcolumn="60" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Untar$UntarCompressionMethod" method="decompress" variable="magic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="243" endline="243" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Untar$UntarCompressionMethod" method="newXZInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/UpToDate.java">
<violation beginline="53" endline="53" begincolumn="27" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="UpToDate" variable="sourceFileSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'sourceFileSets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="53" endline="53" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="UpToDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="54" endline="54" begincolumn="19" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="UpToDate" variable="sourceResources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'sourceResources' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="57" endline="57" begincolumn="22" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="UpToDate" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="129" endline="129" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="UpToDate" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="231" endline="231" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="UpToDate" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="255" endline="255" begincolumn="44" endcolumn="57" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="UpToDate" method="scanDir" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/VerifyJar.java">
<violation beginline="59" endline="59" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="VerifyJar" variable="certificates" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'certificates'
</violation>
<violation beginline="60" endline="60" begincolumn="35" endcolumn="45" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="VerifyJar" variable="outputCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'outputCache' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="62" endline="62" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="VerifyJar" variable="savedStorePass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'savedStorePass'
</violation>
<violation beginline="77" endline="77" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="VerifyJar" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="226" endline="226" begincolumn="24" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="VerifyJar$BufferingOutputFilterReader" variable="next" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'next' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="228" endline="228" begincolumn="17" endcolumn="28" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="VerifyJar$BufferingOutputFilterReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/WaitFor.java">
<violation beginline="147" endline="147" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="WaitFor" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="224" endline="272" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="WaitFor$Unit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Unit
</violation>
<violation beginline="243" endline="243" begincolumn="35" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="WaitFor$Unit" variable="timeTable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'timeTable' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="270" endline="270" begincolumn="13" endcolumn="25" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="WaitFor$Unit" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'UNITS' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/War.java">
<violation beginline="49" endline="225" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="War" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like War
</violation>
<violation beginline="151" endline="154" begincolumn="15" endcolumn="5" rule="UselessOverridingMethod" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="War" method="initZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#uselessoverridingmethod" priority="3">
Overriding method merely calls super
</violation>
<violation beginline="152" endline="152" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="War" method="initZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/WhichResource.java">
<violation beginline="124" endline="124" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="WhichResource" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="140" endline="140" begincolumn="26" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="WhichResource" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'loc' is never used (overwritten on line 158)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/XSLTLiaison.java">
<violation beginline="47" endline="47" begincolumn="48" endcolumn="56" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTLiaison" method="setStylesheet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="57" endline="57" begincolumn="58" endcolumn="66" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTLiaison" method="addParam" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="67" endline="67" begincolumn="54" endcolumn="62" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTLiaison" method="transform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/XSLTLiaison3.java">
<violation beginline="34" endline="34" begincolumn="52" endcolumn="60" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTLiaison3" method="setStylesheet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/XSLTLiaison4.java">
<violation beginline="41" endline="41" begincolumn="53" endcolumn="61" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTLiaison4" method="addParam" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/XSLTProcess.java">
<violation beginline="85" endline="85" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="88" endline="88" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="baseDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'baseDir'
</violation>
<violation beginline="91" endline="91" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="xslFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'xslFile'
</violation>
<violation beginline="94" endline="94" begincolumn="22" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="xslResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'xslResource'
</violation>
<violation beginline="100" endline="100" begincolumn="20" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="fileNameParameter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fileNameParameter'
</violation>
<violation beginline="103" endline="103" begincolumn="20" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="fileDirParameter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fileDirParameter'
</violation>
<violation beginline="109" endline="109" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="inFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inFile'
</violation>
<violation beginline="112" endline="112" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="outFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outFile'
</violation>
<violation beginline="118" endline="118" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="126" endline="126" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="stylesheetLoaded" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'stylesheetLoaded'
</violation>
<violation beginline="129" endline="129" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="force" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'force'
</violation>
<violation beginline="132" endline="132" begincolumn="63" endcolumn="70" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="148" endline="148" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="factory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'factory'
</violation>
<violation beginline="166" endline="166" begincolumn="28" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'loader'
</violation>
<violation beginline="173" endline="173" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="194" endline="194" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="suppressWarnings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressWarnings'
</violation>
<violation beginline="223" endline="223" begincolumn="13" endcolumn="38" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'xpathFactory' could be replaced by a local variable.
</violation>
<violation beginline="323" endline="323" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="336" endline="336" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="609" endline="611" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="getSuppressWarnings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="699" endline="699" begincolumn="61" endcolumn="69" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="resolveProcessor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="804" endline="804" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="process" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="838" endline="838" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="process" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="858" endline="858" begincolumn="99" endcolumn="112" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="process" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="875" endline="875" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="process" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="890" endline="890" begincolumn="67" endcolumn="80" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="ensureDirectoryFor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="936" endline="936" begincolumn="32" endcolumn="40" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="getLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="942" endline="945" begincolumn="19" endcolumn="17" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="getLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="967" endline="967" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Param" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="970" endline="970" begincolumn="24" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Param" variable="expression" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'expression'
</violation>
<violation beginline="1025" endline="1025" begincolumn="40" endcolumn="53" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Param" method="getName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1039" endline="1039" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Param" method="getExpression" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1177" endline="1214" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$OutputProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'OutputProperty' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=4)
</violation>
<violation beginline="1222" endline="1222" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1240" endline="1240" begincolumn="67" endcolumn="80" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="configureLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1254" endline="1254" begincolumn="71" endcolumn="84" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="configureLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1301" endline="1301" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="configureLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1367" endline="1367" begincolumn="62" endcolumn="70" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="setLiaisonDynamicFileParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="1386" endline="1386" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess" method="createFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1548" endline="1548" begincolumn="74" endcolumn="87" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Factory$Attribute" method="createDynamicElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1560" endline="1560" begincolumn="91" endcolumn="104" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Factory$Attribute" method="setDynamicAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1595" endline="1634" begincolumn="23" endcolumn="9" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Factory$Feature" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Feature' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=6)
</violation>
<violation beginline="1599" endline="1600" begincolumn="20" endcolumn="13" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Factory$Feature" method="Feature" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="1631" endline="1633" begincolumn="20" endcolumn="13" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$Factory$Feature" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1648" endline="1649" begincolumn="48" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$StyleMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1652" endline="1653" begincolumn="44" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$StyleMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1656" endline="1656" begincolumn="44" endcolumn="50" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$StyleMapper" method="mapFileName" variable="xmlFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'xmlFile'
</violation>
<violation beginline="1671" endline="1671" begincolumn="17" endcolumn="78" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$TraceConfiguration" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="1689" endline="1691" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$TraceConfiguration" method="getElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1709" endline="1711" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$TraceConfiguration" method="getExtension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1729" endline="1731" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$TraceConfiguration" method="getGeneration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1749" endline="1751" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$TraceConfiguration" method="getSelection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1769" endline="1771" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XSLTProcess$TraceConfiguration" method="getTemplates" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/XmlProperty.java">
<violation beginline="187" endline="189" begincolumn="35" endcolumn="5" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" variable="ATTRIBUTES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="196" endline="196" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XmlProperty" variable="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'validate'
</violation>
<violation beginline="197" endline="197" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XmlProperty" variable="collapseAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'collapseAttributes'
</violation>
<violation beginline="198" endline="198" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XmlProperty" variable="semanticAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'semanticAttributes'
</violation>
<violation beginline="199" endline="199" begincolumn="21" endcolumn="52" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XmlProperty" variable="includeSemanticAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeSemanticAttribute'
</violation>
<violation beginline="200" endline="200" begincolumn="18" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XmlProperty" variable="rootDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rootDirectory'
</violation>
<violation beginline="202" endline="202" begincolumn="24" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XmlProperty" variable="xmlCatalog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'xmlCatalog' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="228" endline="228" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="278" endline="278" begincolumn="13" endcolumn="65" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="296" endline="296" begincolumn="24" endcolumn="25" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="addNodeRecursively" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="315" endline="315" begincolumn="29" endcolumn="44" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="addNodeRecursively" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'org.w3c.dom.Node' due to existing import 'org.w3c.dom.Node'
</violation>
<violation beginline="315" endline="317" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="462" endline="462" begincolumn="50" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="addProperty" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'value'
</violation>
<violation beginline="692" endline="694" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="getKeeproot" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="699" endline="701" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="getValidate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="706" endline="708" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="getCollapseAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="713" endline="715" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="getSemanticAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="725" endline="727" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="getIncludeSementicAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="731" endline="733" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="XmlProperty" method="getIncludeSemanticAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/Zip.java">
<violation beginline="78" endline="2238" begincolumn="8" endcolumn="2" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Zip
</violation>
<violation beginline="98" endline="98" begincolumn="15" endcolumn="27" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field zipFile has the same name as a method
</violation>
<violation beginline="102" endline="102" begincolumn="15" endcolumn="39" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="103" endline="103" begincolumn="53" endcolumn="60" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="104" endline="104" begincolumn="68" endcolumn="75" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="107" endline="107" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="doUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'doUpdate'
</violation>
<violation beginline="109" endline="109" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="savedDoUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'savedDoUpdate'
</violation>
<violation beginline="110" endline="110" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="doFilesonly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'doFilesonly'
</violation>
<violation beginline="111" endline="111" begincolumn="36" endcolumn="40" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "zip" appears 4 times in this file; the first occurrence is on line 111
</violation>
<violation beginline="113" endline="113" begincolumn="38" endcolumn="43" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "skip" appears 4 times in this file; the first occurrence is on line 113
</violation>
<violation beginline="114" endline="114" begincolumn="60" endcolumn="67" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="115" endline="115" begincolumn="15" endcolumn="39" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="116" endline="116" begincolumn="49" endcolumn="56" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="118" endline="118" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="fixedModTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fixedModTime'
</violation>
<violation beginline="119" endline="119" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="modTimeMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'modTimeMillis'
</violation>
<violation beginline="130" endline="130" begincolumn="23" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="doubleFilePass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'doubleFilePass'
</violation>
<violation beginline="138" endline="138" begincolumn="23" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="skipWriting" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skipWriting'
</violation>
<violation beginline="156" endline="156" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="updatedFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'updatedFile'
</violation>
<violation beginline="156" endline="156" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="162" endline="162" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="addingNewFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'addingNewFiles'
</violation>
<violation beginline="162" endline="162" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="168" endline="168" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="176" endline="176" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="keepCompression" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepCompression'
</violation>
<violation beginline="176" endline="176" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="184" endline="184" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="190" endline="190" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="192" endline="192" begincolumn="13" endcolumn="60" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="198" endline="198" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="preserve0Permissions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserve0Permissions'
</violation>
<violation beginline="198" endline="198" begincolumn="13" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="205" endline="205" begincolumn="13" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="212" endline="213" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="221" endline="221" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" variable="fallBackToUTF8" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fallBackToUTF8'
</violation>
<violation beginline="221" endline="221" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="228" endline="228" begincolumn="13" endcolumn="72" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="388" endline="388" begincolumn="34" endcolumn="39" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Zip$WhenEmpty" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "fail" appears 4 times in this file; the first occurrence is on line 388
</violation>
<violation beginline="509" endline="511" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" method="getPreserve0Permissions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="527" endline="529" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" method="getUseLanguageEnodingFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="569" endline="571" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" method="getFallBackToUTF8" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="620" endline="620" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="647" endline="647" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="executeMain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="668" endline="668" begincolumn="13" endcolumn="61" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="executeMain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="705" endline="705" begincolumn="29" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Zip" method="executeMain" variable="zOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this ZipOutputStream object are closed after use
</violation>
<violation beginline="765" endline="768" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="executeMain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="789" endline="789" begincolumn="25" endcolumn="26" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="executeMain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="807" endline="809" begincolumn="13" endcolumn="43" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="renameFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="855" endline="855" begincolumn="17" endcolumn="90" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="checkAttributesAndElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="957" endline="1015" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="addResources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1023" endline="1023" begincolumn="64" endcolumn="67" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="addDirectoryResource" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="1078" endline="1078" begincolumn="22" endcolumn="98" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" method="addResource" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'is': resource specifications are implicitly final
</violation>
<violation beginline="1086" endline="1086" begincolumn="18" endcolumn="91" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" method="addResource" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'is': resource specifications are implicitly final
</violation>
<violation beginline="1160" endline="1160" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="initZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1160" endline="1161" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Zip" method="initZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1170" endline="1170" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="finalizeZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1170" endline="1171" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Zip" method="finalizeZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1179" endline="1179" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="createEmptyZip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1184" endline="1184" begincolumn="57" endcolumn="67" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Zip" method="createEmptyZip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " archive " appears 4 times in this file; the first occurrence is on line 1,184
</violation>
<violation beginline="1209" endline="1216" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs" class="Zip" method="getZipScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="1249" endline="1249" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1260" endline="1260" begincolumn="13" endcolumn="61" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1264" endline="1264" begincolumn="30" endcolumn="75" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1298" endline="1298" begincolumn="26" endcolumn="128" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1324" endline="1324" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="1324" endline="1324" begincolumn="54" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="getResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="1325" endline="1325" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1435" endline="1435" begincolumn="32" endcolumn="33" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="1485" endline="1485" begincolumn="64" endcolumn="74" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="getNonFileSetResourcesToAdd" variable="needsUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'needsUpdate'
</violation>
<violation beginline="1486" endline="1486" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs" class="Zip" method="getNonFileSetResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1580" endline="1580" begincolumn="42" endcolumn="65" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="grabResources" variable="filesets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1594" endline="1594" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="grabResources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1607" endline="1607" begincolumn="25" endcolumn="73" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="grabResources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1620" endline="1620" begincolumn="52" endcolumn="81" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="grabNonFileSetResources" variable="rcs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1637" endline="1637" begincolumn="25" endcolumn="59" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs" class="Zip" method="grabNonFileSetResources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="1668" endline="1668" begincolumn="43" endcolumn="69" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="zipDir" variable="extra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1685" endline="1685" begincolumn="43" endcolumn="69" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="zipDir" variable="extra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1734" endline="1734" begincolumn="26" endcolumn="94" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1752" endline="1752" begincolumn="48" endcolumn="74" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="setCurrentExtraFields" variable="extra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1869" endline="1869" begincolumn="34" endcolumn="60" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="zipFile" variable="extra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="1900" endline="1900" begincolumn="14" endcolumn="105" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip" method="zipFile" variable="bIn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'bIn': resource specifications are implicitly final
</violation>
<violation beginline="1926" endline="1926" begincolumn="20" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs" class="Zip" method="addParentDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="2001" endline="2001" begincolumn="44" endcolumn="63" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="isEmpty" variable="r" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="2016" endline="2016" begincolumn="46" endcolumn="66" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="selectFileResources" variable="orig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="2039" endline="2039" begincolumn="51" endcolumn="71" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip" method="selectDirectoryResources" variable="orig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="2099" endline="2099" begincolumn="43" endcolumn="62" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip$ArchiveState" method="ArchiveState" variable="r" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="2099" endline="2099" begincolumn="43" endcolumn="62" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip$ArchiveState" method="ArchiveState" variable="r" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'r' is stored directly.
</violation>
<violation beginline="2117" endline="2117" begincolumn="13" endcolumn="34" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs" class="Zip$ArchiveState" method="getResourcesToAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'resourcesToAdd' may expose an internal array.
</violation>
<violation beginline="2163" endline="2164" begincolumn="29" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip$UnicodeExtraField" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="2170" endline="2171" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Zip$UnicodeExtraField" method="UnicodeExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="2221" endline="2222" begincolumn="29" endcolumn="46" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip$Zip64ModeAttribute" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="2223" endline="2224" begincolumn="29" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs" class="Zip$Zip64ModeAttribute" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="2230" endline="2231" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs" class="Zip$Zip64ModeAttribute" method="Zip64ModeAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapter.java">
<violation beginline="51" endline="51" begincolumn="30" endcolumn="43" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="CompilerAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/CompilerAdapterFactory.java">
<violation beginline="66" endline="66" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="CompilerAdapterFactory" method="getCompiler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="98" endline="98" begincolumn="54" endcolumn="65" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.compilers" class="CompilerAdapterFactory" method="getCompiler" variable="compilerType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'compilerType'
</violation>
<violation beginline="99" endline="99" begincolumn="32" endcolumn="45" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="CompilerAdapterFactory" method="getCompiler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="169" endline="171" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.compilers" class="CompilerAdapterFactory" method="doesModernCompilerExist" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="187" endline="187" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="CompilerAdapterFactory" method="resolveClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/DefaultCompilerAdapter.java">
<violation beginline="73" endline="73" begincolumn="23" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.compilers" class="DefaultCompilerAdapter" variable="debug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'debug'
</violation>
<violation beginline="74" endline="74" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.compilers" class="DefaultCompilerAdapter" variable="optimize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'optimize'
</violation>
<violation beginline="75" endline="75" begincolumn="23" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.compilers" class="DefaultCompilerAdapter" variable="deprecation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'deprecation'
</violation>
<violation beginline="76" endline="76" begincolumn="23" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.compilers" class="DefaultCompilerAdapter" variable="depend" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'depend'
</violation>
<violation beginline="77" endline="77" begincolumn="23" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.compilers" class="DefaultCompilerAdapter" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="550" endline="550" begincolumn="48" endcolumn="57" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.compilers" class="DefaultCompilerAdapter" method="executeExternalCompile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="816" endline="816" begincolumn="51" endcolumn="51" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.compilers" class="DefaultCompilerAdapter" method="mustSetSourceForTarget" variable="t" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 't'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/Gcj.java">
<violation beginline="33" endline="156" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.compilers" class="Gcj" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Gcj
</violation>
<violation beginline="42" endline="42" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Gcj" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/Javac12.java">
<violation beginline="49" endline="49" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Javac12" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="49" endline="84" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.compilers" class="Javac12" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="53" endline="53" begincolumn="22" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.compilers" class="Javac12" method="execute" variable="logstr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LogOutputStream object are closed after use
</violation>
<violation beginline="54" endline="83" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.compilers" class="Javac12" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="65" endline="73" begincolumn="13" endcolumn="50" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.compilers" class="Javac12" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="74" endline="74" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Javac12" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="75" endline="75" begincolumn="17" endcolumn="18" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.compilers" class="Javac12" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/Javac13.java">
<violation beginline="48" endline="48" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Javac13" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="60" endline="60" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Javac13" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="61" endline="61" begincolumn="17" endcolumn="18" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.compilers" class="Javac13" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/JavacExternal.java">
<violation beginline="44" endline="44" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="JavacExternal" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="86" endline="87" begincolumn="13" endcolumn="71" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.compilers" class="JavacExternal" method="execOnVMS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/Jikes.java">
<violation beginline="47" endline="47" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Jikes" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="72" endline="77" begincolumn="16" endcolumn="9" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.compilers" class="Jikes" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/Jvc.java">
<violation beginline="33" endline="117" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.compilers" class="Jvc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Jvc
</violation>
<violation beginline="41" endline="41" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Jvc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/Kjc.java">
<violation beginline="34" endline="118" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.compilers" class="Kjc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Kjc
</violation>
<violation beginline="42" endline="42" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Kjc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/compilers/Sj.java">
<violation beginline="31" endline="62" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.compilers" class="Sj" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Sj
</violation>
<violation beginline="39" endline="39" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.compilers" class="Sj" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/And.java">
<violation beginline="32" endline="43" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.condition" class="And" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like And
</violation>
<violation beginline="39" endline="39" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="And" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/AntVersion.java">
<violation beginline="31" endline="31" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" variable="atLeast" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'atLeast'
</violation>
<violation beginline="32" endline="32" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" variable="exactly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'exactly'
</violation>
<violation beginline="33" endline="33" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" variable="propertyname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'propertyname'
</violation>
<violation beginline="40" endline="40" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="61" endline="61" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="74" endline="74" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="86" endline="88" begincolumn="17" endcolumn="29" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="95" endline="97" begincolumn="17" endcolumn="29" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="AntVersion" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Condition.java">
<violation beginline="33" endline="33" begincolumn="27" endcolumn="40" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Condition" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/ConditionBase.java">
<violation beginline="43" endline="43" begincolumn="31" endcolumn="41" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="ConditionBase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'taskName' is never used (overwritten on lines 54 and 63)
</violation>
<violation beginline="48" endline="48" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="ConditionBase" variable="conditions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'conditions' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="48" endline="48" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="ConditionBase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Contains.java">
<violation beginline="31" endline="31" begincolumn="13" endcolumn="37" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="Contains" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="67" endline="67" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Contains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="75" endline="75" begincolumn="15" endcolumn="68" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="Contains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="75" endline="75" begincolumn="45" endcolumn="67" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="Contains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Equals.java">
<violation beginline="31" endline="31" begincolumn="13" endcolumn="30" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="Equals" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="32" endline="32" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="Equals" variable="trim" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'trim'
</violation>
<violation beginline="35" endline="35" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="Equals" variable="forcestring" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forcestring'
</violation>
<violation beginline="124" endline="124" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Equals" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="124" endline="147" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="Equals" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'eval()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/FilesMatch.java">
<violation beginline="43" endline="43" begincolumn="13" endcolumn="30" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="FilesMatch" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="45" endline="45" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="FilesMatch" variable="textfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'textfile'
</violation>
<violation beginline="81" endline="81" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="FilesMatch" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="90" endline="90" begincolumn="27" endcolumn="31" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="FilesMatch" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'matches' is never used (overwritten on line 92)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/HasFreeSpace.java">
<violation beginline="34" endline="102" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="HasFreeSpace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'HasFreeSpace' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=14)
</violation>
<violation beginline="45" endline="45" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="HasFreeSpace" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="57" endline="57" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="HasFreeSpace" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="62" endline="62" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="HasFreeSpace" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/HasMethod.java">
<violation beginline="38" endline="38" begincolumn="21" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="HasMethod" variable="ignoreSystemClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreSystemClasses'
</violation>
<violation beginline="134" endline="135" begincolumn="13" endcolumn="59" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="HasMethod" method="loadClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="137" endline="139" begincolumn="13" endcolumn="77" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="HasMethod" method="loadClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="145" endline="145" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="HasMethod" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="149" endline="149" begincolumn="21" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="HasMethod" method="eval" variable="preLoadClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Http.java">
<violation beginline="40" endline="129" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.condition" class="Http" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Http
</violation>
<violation beginline="44" endline="44" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="Http" variable="spec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'spec'
</violation>
<violation beginline="100" endline="100" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Http" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsFailure.java">
<violation beginline="50" endline="52" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="IsFailure" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'eval()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsFalse.java">
<violation beginline="33" endline="33" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="IsFalse" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'value'
</violation>
<violation beginline="47" endline="47" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsFalse" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="47" endline="52" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="IsFalse" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'eval()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsFileSelected.java">
<violation beginline="56" endline="61" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="IsFileSelected" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'validate()' is missing an @Override annotation.
</violation>
<violation beginline="67" endline="80" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="IsFileSelected" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'eval()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsLastModified.java">
<violation beginline="41" endline="41" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="IsLastModified" variable="dateTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dateTime'
</violation>
<violation beginline="74" endline="74" begincolumn="24" endcolumn="52" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="IsLastModified" method="getPrimaryFormat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="107" endline="107" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsLastModified" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="126" endline="126" begincolumn="39" endcolumn="52" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsLastModified" method="getMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="158" endline="158" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsLastModified" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsReachable.java">
<violation beginline="54" endline="204" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsReachable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'IsReachable' is suspected to be a Data Class (WOC=25.000%, NOPA=9, NOAM=3, WMC=23)
</violation>
<violation beginline="143" endline="143" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsReachable" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="186" endline="186" begincolumn="17" endcolumn="76" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="IsReachable" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsReference.java">
<violation beginline="60" endline="60" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsReference" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsSet.java">
<violation beginline="45" endline="45" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsSet" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsSigned.java">
<violation beginline="71" endline="71" begincolumn="57" endcolumn="60" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="IsSigned" method="isSigned" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="80" endline="80" begincolumn="27" endcolumn="44" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="IsSigned" method="isSigned" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="86" endline="86" begincolumn="23" endcolumn="70" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="IsSigned" method="isSigned" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/IsTrue.java">
<violation beginline="33" endline="33" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="IsTrue" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'value'
</violation>
<violation beginline="48" endline="48" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="IsTrue" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/JavaVersion.java">
<violation beginline="28" endline="115" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'JavaVersion' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=19)
</violation>
<violation beginline="30" endline="30" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" variable="atLeast" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'atLeast'
</violation>
<violation beginline="31" endline="31" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" variable="exactly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'exactly'
</violation>
<violation beginline="38" endline="38" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="38" endline="49" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'eval()' is missing an @Override annotation.
</violation>
<violation beginline="51" endline="51" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="63" endline="65" begincolumn="17" endcolumn="31" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="72" endline="74" begincolumn="17" endcolumn="31" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="JavaVersion" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Matches.java">
<violation beginline="35" endline="35" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="Matches" variable="multiLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'multiLine'
</violation>
<violation beginline="36" endline="36" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="Matches" variable="singleLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'singleLine'
</violation>
<violation beginline="107" endline="107" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Matches" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="107" endline="118" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="Matches" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'eval()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Not.java">
<violation beginline="31" endline="51" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.condition" class="Not" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Not
</violation>
<violation beginline="40" endline="40" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Not" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Or.java">
<violation beginline="32" endline="43" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.condition" class="Or" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Or
</violation>
<violation beginline="39" endline="39" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Or" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Os.java">
<violation beginline="31" endline="336" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.condition" class="Os" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Os
</violation>
<violation beginline="124" endline="124" begincolumn="9" endcolumn="25" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="Os" method="Os" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setFamily' called during object construction
</violation>
<violation beginline="184" endline="184" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Os" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="292" endline="292" begincolumn="36" endcolumn="55" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="Os" method="isOs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="302" endline="302" begincolumn="36" endcolumn="55" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="Os" method="isOs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="324" endline="324" begincolumn="26" endcolumn="45" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="Os" method="isOs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/ParserSupports.java">
<violation beginline="87" endline="87" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="ParserSupports" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/ResourceContains.java">
<violation beginline="37" endline="162" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="ResourceContains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'ResourceContains' is suspected to be a Data Class (WOC=14.286%, NOPA=0, NOAM=6, WMC=29)
</violation>
<violation beginline="135" endline="135" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="ResourceContains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="135" endline="161" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.condition" class="ResourceContains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="154" endline="154" begincolumn="28" endcolumn="49" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="ResourceContains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="155" endline="155" begincolumn="23" endcolumn="39" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.condition" class="ResourceContains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="159" endline="159" begincolumn="13" endcolumn="93" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="ResourceContains" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/ResourceExists.java">
<violation beginline="48" endline="48" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="ResourceExists" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="54" endline="54" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="ResourceExists" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="54" endline="57" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.condition" class="ResourceExists" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'eval()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/ResourcesMatch.java">
<violation beginline="39" endline="39" begincolumn="19" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="ResourcesMatch" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resources'
</violation>
<violation beginline="40" endline="40" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="ResourcesMatch" variable="asText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'asText'
</violation>
<violation beginline="69" endline="69" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="ResourcesMatch" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Socket.java">
<violation beginline="35" endline="35" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="Socket" variable="server" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'server'
</violation>
<violation beginline="36" endline="36" begincolumn="17" endcolumn="24" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.condition" class="Socket" variable="port" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'port'
</violation>
<violation beginline="61" endline="61" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Socket" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/TypeFound.java">
<violation beginline="84" endline="84" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="TypeFound" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/condition/Xor.java">
<violation beginline="28" endline="43" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.condition" class="Xor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Xor
</violation>
<violation beginline="37" endline="37" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.condition" class="Xor" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/CVSEntry.java">
<violation beginline="28" endline="28" begincolumn="18" endcolumn="21" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CVSEntry" variable="date" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'date' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="31" endline="31" begincolumn="19" endcolumn="33" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="CVSEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="31" endline="31" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="CVSEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="100" endline="100" begincolumn="12" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="CVSEntry" method="getFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogParser.java">
<violation beginline="88" endline="88" begincolumn="23" endcolumn="61" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogParser" method="ChangeLogParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="280" endline="280" begincolumn="17" endcolumn="80" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogParser" method="parseDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="280" endline="280" begincolumn="17" endcolumn="80" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogParser" method="parseDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java">
<violation beginline="72" endline="72" begincolumn="27" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" variable="cvsUsers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cvsUsers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="72" endline="72" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="87" endline="87" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" variable="remote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'remote'
</violation>
<violation beginline="100" endline="100" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="215" endline="215" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="263" endline="263" begincolumn="21" endcolumn="54" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="319" endline="319" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="349" endline="349" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="loadUserlist" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="365" endline="365" begincolumn="39" endcolumn="63" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="filterEntrySet" variable="entrySet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="399" endline="399" begincolumn="16" endcolumn="60" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="filterEntrySet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="406" endline="406" begincolumn="42" endcolumn="66" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="replaceAuthorIdWithName" variable="entrySet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="420" endline="420" begincolumn="33" endcolumn="57" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="writeChangeLog" variable="entrySet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="421" endline="421" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="writeChangeLog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="423" endline="424" begincolumn="14" endcolumn="86" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogTask" method="writeChangeLog" variable="writer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'writer': resource specifications are implicitly final
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogWriter.java">
<violation beginline="38" endline="38" begincolumn="11" endcolumn="44" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="41" endline="41" begincolumn="30" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogWriter" variable="outputTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'outputTime' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="42" endline="42" begincolumn="11" endcolumn="39" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="60" endline="60" begincolumn="32" endcolumn="55" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="ChangeLogWriter" method="printChangeLog" variable="entries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/CvsTagDiff.java">
<violation beginline="86" endline="86" begincolumn="5" endcolumn="46" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="90" endline="90" begincolumn="5" endcolumn="63" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="94" endline="94" begincolumn="5" endcolumn="43" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="98" endline="98" begincolumn="5" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="102" endline="102" begincolumn="5" endcolumn="47" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="107" endline="107" begincolumn="5" endcolumn="69" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="112" endline="112" begincolumn="5" endcolumn="57" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="147" endline="147" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" variable="ignoreRemoved" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreRemoved'
</violation>
<violation beginline="152" endline="152" begincolumn="26" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" variable="packageNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'packageNames' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="157" endline="157" begincolumn="22" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" variable="packageNamePrefixes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'packageNamePrefixes'
</violation>
<violation beginline="162" endline="162" begincolumn="19" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" variable="packageNamePrefixLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'packageNamePrefixLengths'
</violation>
<violation beginline="235" endline="235" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="294" endline="294" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="parseRDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="298" endline="298" begincolumn="36" endcolumn="45" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="parseRDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="332" endline="332" begincolumn="20" endcolumn="67" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="parseRDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="405" endline="405" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="writeTagDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="405" endline="405" begincolumn="31" endcolumn="51" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="writeTagDiff" variable="entries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="470" endline="470" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="531" endline="531" begincolumn="45" endcolumn="63" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsTagDiff" method="removePackageName" variable="prefixLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/CvsUser.java">
<violation beginline="26" endline="84" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsUser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'CvsUser' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=9)
</violation>
<violation beginline="75" endline="75" begincolumn="35" endcolumn="48" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsUser" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/CvsVersion.java">
<violation beginline="44" endline="44" begincolumn="40" endcolumn="44" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 11102 should separate every third digit with an underscore
</violation>
<violation beginline="44" endline="44" begincolumn="5" endcolumn="45" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="45" endline="45" begincolumn="5" endcolumn="37" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="CvsVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/RCSFile.java">
<violation beginline="47" endline="49" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="RCSFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="55" endline="57" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="RCSFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="63" endline="65" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="RCSFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/cvslib/RedirectingStreamHandler.java">
<violation beginline="36" endline="45" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.cvslib" class="RedirectingStreamHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="42" endline="42" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.cvslib" class="RedirectingStreamHandler" method="getErrors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/email/EmailAddress.java">
<violation beginline="31" endline="32" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.email" class="EmailAddress" method="EmailAddress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="55" endline="59" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailAddress" method="EmailAddress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/email/EmailTask.java">
<violation beginline="68" endline="68" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="70" endline="70" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="71" endline="71" begincolumn="21" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="port" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'port'
</violation>
<violation beginline="71" endline="71" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="73" endline="73" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="subject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'subject'
</violation>
<violation beginline="73" endline="73" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="75" endline="75" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="message" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'message'
</violation>
<violation beginline="75" endline="75" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="77" endline="77" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="78" endline="78" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="includeFileNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeFileNames'
</violation>
<violation beginline="78" endline="78" begincolumn="13" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="messageMimeType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'messageMimeType'
</violation>
<violation beginline="79" endline="79" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="80" endline="80" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="83" endline="83" begincolumn="26" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="from" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'from'
</violation>
<violation beginline="83" endline="83" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="85" endline="85" begincolumn="13" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="85" endline="85" begincolumn="13" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="85" endline="85" begincolumn="34" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="replyToList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'replyToList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="85" endline="85" begincolumn="52" endcolumn="59" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="87" endline="87" begincolumn="13" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="87" endline="87" begincolumn="13" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="87" endline="87" begincolumn="34" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="toList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'toList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="87" endline="87" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="89" endline="89" begincolumn="34" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="ccList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ccList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="89" endline="89" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="91" endline="91" begincolumn="13" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="91" endline="91" begincolumn="13" endcolumn="58" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="91" endline="91" begincolumn="34" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="bccList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'bccList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="91" endline="91" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="94" endline="94" begincolumn="28" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="headers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'headers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="94" endline="94" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="97" endline="97" begincolumn="18" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="attachments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'attachments'
</violation>
<violation beginline="97" endline="97" begincolumn="13" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="99" endline="99" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="charset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'charset'
</violation>
<violation beginline="99" endline="99" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="101" endline="101" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="user" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'user'
</violation>
<violation beginline="101" endline="101" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="103" endline="103" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="103" endline="103" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="105" endline="105" begincolumn="21" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="ssl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ssl'
</violation>
<violation beginline="105" endline="105" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="107" endline="107" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="starttls" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'starttls'
</violation>
<violation beginline="107" endline="107" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="110" endline="110" begincolumn="21" endcolumn="51" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="ignoreInvalidRecipients" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreInvalidRecipients'
</violation>
<violation beginline="110" endline="110" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="233" endline="233" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" method="addMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="421" endline="423" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" method="getIncludeFileNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="498" endline="498" begincolumn="29" endcolumn="32" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'autoFound' is never used
</violation>
<violation beginline="539" endline="539" begincolumn="38" endcolumn="45" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="593" endline="593" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="EmailTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/email/Header.java">
<violation beginline="27" endline="63" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="Header" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Header' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=4)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/email/Mailer.java">
<violation beginline="32" endline="281" begincolumn="17" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="Mailer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Mailer' is suspected to be a Data Class (WOC=5.263%, NOPA=0, NOAM=18, WMC=23)
</violation>
<violation beginline="34" endline="34" begincolumn="22" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="host" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'host'
</violation>
<violation beginline="36" endline="36" begincolumn="22" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="user" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'user'
</violation>
<violation beginline="37" endline="37" begincolumn="22" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="39" endline="39" begincolumn="23" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="SSL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'SSL'
</violation>
<violation beginline="43" endline="43" begincolumn="15" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="43" endline="43" begincolumn="36" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="replyToList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'replyToList'
</violation>
<violation beginline="44" endline="44" begincolumn="15" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="44" endline="44" begincolumn="36" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="toList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'toList'
</violation>
<violation beginline="45" endline="45" begincolumn="15" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="45" endline="45" begincolumn="36" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="ccList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ccList'
</violation>
<violation beginline="46" endline="46" begincolumn="15" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="46" endline="46" begincolumn="36" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="bccList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'bccList'
</violation>
<violation beginline="47" endline="47" begincolumn="15" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="47" endline="47" begincolumn="28" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'files'
</violation>
<violation beginline="48" endline="48" begincolumn="22" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="subject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'subject'
</violation>
<violation beginline="50" endline="50" begincolumn="23" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="includeFileNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeFileNames'
</violation>
<violation beginline="51" endline="51" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="51" endline="51" begincolumn="30" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="headers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'headers'
</violation>
<violation beginline="53" endline="53" begincolumn="21" endcolumn="51" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="ignoreInvalidRecipients" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreInvalidRecipients'
</violation>
<violation beginline="54" endline="54" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="starttls" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'starttls'
</violation>
<violation beginline="55" endline="55" begincolumn="21" endcolumn="51" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Mailer" variable="portExplicitlySpecified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'portExplicitlySpecified'
</violation>
<violation beginline="163" endline="163" begincolumn="32" endcolumn="51" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" method="setReplyToList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="172" endline="172" begincolumn="27" endcolumn="46" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" method="setToList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="181" endline="181" begincolumn="27" endcolumn="46" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" method="setCcList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="190" endline="190" begincolumn="28" endcolumn="47" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" method="setBccList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="199" endline="199" begincolumn="26" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" method="setFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="235" endline="235" begincolumn="28" endcolumn="41" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Mailer" method="setHeaders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="245" endline="245" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="Mailer" method="send" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/email/Message.java">
<violation beginline="40" endline="40" begincolumn="18" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Message" variable="messageSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'messageSource'
</violation>
<violation beginline="41" endline="41" begincolumn="26" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="Message" variable="buffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'buffer' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="41" endline="41" begincolumn="13" endcolumn="24" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Message" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="43" endline="43" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Message" variable="specified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'specified'
</violation>
<violation beginline="44" endline="44" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Message" variable="charset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'charset'
</violation>
<violation beginline="48" endline="49" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.email" class="Message" method="Message" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="57" endline="57" begincolumn="9" endcolumn="21" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.email" class="Message" method="Message" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'addText' called during object construction
</violation>
<violation beginline="116" endline="116" begincolumn="24" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.email" class="Message" method="print" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="116" endline="116" begincolumn="30" endcolumn="33" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="Message" method="print" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'out' is never used (overwritten on line 118)
</violation>
<violation beginline="125" endline="125" begincolumn="28" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.email" class="Message" method="print" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="135" endline="137" begincolumn="11" endcolumn="9" rule="EmptyFinallyBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.email" class="Message" method="print" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyfinallyblock" priority="3">
Avoid empty finally blocks
</violation>
<violation beginline="189" endline="189" begincolumn="20" endcolumn="29" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="Message" method="getReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/email/MimeMailer.java">
<violation beginline="79" endline="79" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$StringDataSource" variable="data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'data'
</violation>
<violation beginline="80" endline="80" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$StringDataSource" variable="type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'type'
</violation>
<violation beginline="81" endline="81" begincolumn="24" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$StringDataSource" variable="charset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'charset'
</violation>
<violation beginline="156" endline="156" begincolumn="32" endcolumn="40" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer" method="send" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="157" endline="158" begincolumn="21" endcolumn="115" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer" method="send" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="229" endline="229" begincolumn="31" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer" method="send" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="286" endline="286" begincolumn="62" endcolumn="81" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer" method="internetAddresses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="297" endline="297" begincolumn="16" endcolumn="63" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer" method="internetAddresses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="314" endline="315" begincolumn="18" endcolumn="56" rule="UnusedPrivateMethod" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer" method="didntReach" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedprivatemethod" priority="3">
Avoid unused private methods such as 'didntReach(Address,String,MessagingException)'.
</violation>
<violation beginline="321" endline="321" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer" method="didntReach" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="326" endline="326" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$SimpleAuthenticator" variable="user" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'user'
</violation>
<violation beginline="326" endline="326" begincolumn="24" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$SimpleAuthenticator" variable="user" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'user' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="326" endline="326" begincolumn="31" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$SimpleAuthenticator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'user' is never used (overwritten on line 330)
</violation>
<violation beginline="327" endline="327" begincolumn="24" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$SimpleAuthenticator" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="327" endline="327" begincolumn="24" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$SimpleAuthenticator" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'password' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="327" endline="327" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="MimeMailer$SimpleAuthenticator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'password' is never used (overwritten on line 331)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/email/PlainMailer.java">
<violation beginline="97" endline="97" begincolumn="25" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.email" class="PlainMailer" method="send" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="147" endline="147" begincolumn="20" endcolumn="48" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.email" class="PlainMailer" method="attach" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="160" endline="160" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.email" class="PlainMailer" method="badRecipient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/launcher/CommandLauncher.java">
<violation beginline="41" endline="41" begincolumn="36" endcolumn="52" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.launcher" class="CommandLauncher" variable="vmLauncher" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'vmLauncher'
</violation>
<violation beginline="42" endline="42" begincolumn="36" endcolumn="55" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.launcher" class="CommandLauncher" variable="shellLauncher" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'shellLauncher'
</violation>
<violation beginline="42" endline="42" begincolumn="52" endcolumn="55" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.launcher" class="CommandLauncher" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'shellLauncher' is never used (overwritten on lines 51, 54, 60, 64, 71, 74 and 77)
</violation>
<violation beginline="96" endline="96" begincolumn="56" endcolumn="67" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.launcher" class="CommandLauncher" method="exec" variable="env" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="180" endline="180" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.launcher" class="CommandLauncher" method="getSystemLauncher" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/launcher/Java13CommandLauncher.java">
<violation beginline="59" endline="61" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs.launcher" class="Java13CommandLauncher" method="exec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="61" endline="61" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.launcher" class="Java13CommandLauncher" method="exec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/launcher/VmsCommandLauncher.java">
<violation beginline="94" endline="94" begincolumn="50" endcolumn="61" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.launcher" class="VmsCommandLauncher" method="createCommandFile" variable="env" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="97" endline="97" begincolumn="58" endcolumn="67" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.launcher" class="VmsCommandLauncher" method="createCommandFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ANTLR.java">
<violation beginline="49" endline="49" begincolumn="29" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" variable="commandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'commandline' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="79" endline="79" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" variable="workingdir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'workingdir'
</violation>
<violation beginline="82" endline="82" begincolumn="35" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" variable="bos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'bos' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="205" endline="206" begincolumn="36" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="setFork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="241" endline="241" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="253" endline="253" begincolumn="45" endcolumn="52" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="addClasspathEntry" variable="resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'resource'
</violation>
<violation beginline="253" endline="253" begincolumn="45" endcolumn="52" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="addClasspathEntry" variable="resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'resource'
</violation>
<violation beginline="285" endline="285" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="359" endline="359" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="372" endline="372" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="getGeneratedFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="375" endline="375" begincolumn="36" endcolumn="45" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="getGeneratedFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="377" endline="377" begincolumn="20" endcolumn="49" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="getGeneratedFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="385" endline="385" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="getGeneratedFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="396" endline="396" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="396" endline="396" begincolumn="21" endcolumn="36" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="run" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="410" endline="416" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="ANTLR" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/Cab.java">
<violation beginline="47" endline="339" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="Cab" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Cab
</violation>
<violation beginline="53" endline="53" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Cab" variable="doVerbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'doVerbose'
</violation>
<violation beginline="55" endline="55" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Cab" variable="filesetAdded" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filesetAdded'
</violation>
<violation beginline="124" endline="124" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="149" endline="149" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="createExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="158" endline="158" begincolumn="34" endcolumn="47" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="isUpToDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="174" endline="174" begincolumn="35" endcolumn="48" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="createListFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="179" endline="179" begincolumn="36" endcolumn="45" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="createListFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="194" endline="194" begincolumn="32" endcolumn="45" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="appendFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="205" endline="205" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="getFileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="205" endline="205" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="getFileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="206" endline="206" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="getFileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="223" endline="223" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="250" endline="250" begincolumn="30" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="execute" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="255" endline="255" begincolumn="33" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="execute" variable="outLog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LogOutputStream object are closed after use
</violation>
<violation beginline="256" endline="256" begincolumn="33" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="execute" variable="errLog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LogOutputStream object are closed after use
</violation>
<violation beginline="289" endline="291" begincolumn="17" endcolumn="35" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="333" endline="335" begincolumn="17" endcolumn="35" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Cab" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/EchoProperties.java">
<violation beginline="117" endline="117" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" variable="inFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inFile'
</violation>
<violation beginline="123" endline="123" begincolumn="18" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" variable="destfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destfile'
</violation>
<violation beginline="132" endline="132" begincolumn="31" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" variable="propertySets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'propertySets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="132" endline="132" begincolumn="50" endcolumn="57" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="243" endline="243" begincolumn="26" endcolumn="63" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties$FormatAttribute" variable="formats" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="243" endline="243" begincolumn="26" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties$FormatAttribute" variable="formats" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'formats' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="251" endline="251" begincolumn="13" endcolumn="27" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties$FormatAttribute" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'formats' may expose an internal array.
</violation>
<violation beginline="261" endline="261" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="344" endline="344" begincolumn="35" endcolumn="59" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" method="saveProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="345" endline="345" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" method="saveProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="386" endline="386" begincolumn="24" endcolumn="26" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties$Tuple" variable="key" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'key' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="387" endline="387" begincolumn="24" endcolumn="28" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties$Tuple" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'value' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="476" endline="488" begincolumn="8" endcolumn="8" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" method="jdkSaveProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="523" endline="523" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="EchoProperties" method="getDocumentBuilder" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/Javah.java">
<violation beginline="73" endline="73" begincolumn="33" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="classes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'classes' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="73" endline="73" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="76" endline="76" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="77" endline="77" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="outputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputFile'
</violation>
<violation beginline="78" endline="78" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="79" endline="79" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="force" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'force'
</violation>
<violation beginline="80" endline="80" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="old" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'old'
</violation>
<violation beginline="81" endline="81" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="stubs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'stubs'
</violation>
<violation beginline="83" endline="83" begincolumn="30" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="facade" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'facade'
</violation>
<violation beginline="83" endline="83" begincolumn="30" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="facade" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'facade' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="83" endline="83" begincolumn="39" endcolumn="42" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Javah" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'facade' is never used (overwritten on line 91)
</violation>
<violation beginline="84" endline="84" begincolumn="13" endcolumn="27" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Javah" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="84" endline="84" begincolumn="29" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'files' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="84" endline="84" begincolumn="41" endcolumn="48" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="85" endline="85" begincolumn="26" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Javah" variable="nestedAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nestedAdapter'
</violation>
<violation beginline="297" endline="299" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="Javah" method="getForce" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="317" endline="319" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="Javah" method="getOld" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="334" endline="336" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="Javah" method="getStubs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="352" endline="354" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="Javah" method="getVerbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="421" endline="421" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Javah" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/Native2Ascii.java">
<violation beginline="44" endline="44" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="reverse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reverse'
</violation>
<violation beginline="45" endline="45" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="46" endline="46" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="srcDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'srcDir'
</violation>
<violation beginline="47" endline="47" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="48" endline="48" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="extension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'extension'
</violation>
<violation beginline="51" endline="51" begincolumn="30" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="facade" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'facade'
</violation>
<violation beginline="51" endline="51" begincolumn="30" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="facade" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'facade' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="51" endline="51" begincolumn="39" endcolumn="42" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'facade' is never used (overwritten on line 56)
</violation>
<violation beginline="52" endline="52" begincolumn="33" endcolumn="52" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" variable="nestedAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nestedAdapter'
</violation>
<violation beginline="76" endline="78" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" method="getReverse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="150" endline="150" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="213" endline="213" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="215" endline="215" begincolumn="36" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'scanner' is never used (overwritten on line 247)
</violation>
<violation beginline="273" endline="273" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii" method="convert" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="321" endline="322" begincolumn="39" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii$ExtMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="325" endline="326" begincolumn="37" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional" class="Native2Ascii$ExtMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/NetRexxC.java">
<violation beginline="129" endline="129" begincolumn="21" endcolumn="57" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="suppressMethodArgumentNotUsed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressMethodArgumentNotUsed'
</violation>
<violation beginline="130" endline="130" begincolumn="21" endcolumn="58" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="suppressPrivatePropertyNotUsed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressPrivatePropertyNotUsed'
</violation>
<violation beginline="131" endline="131" begincolumn="21" endcolumn="51" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="suppressVariableNotUsed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressVariableNotUsed'
</violation>
<violation beginline="132" endline="132" begincolumn="21" endcolumn="57" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="suppressExceptionNotSignalled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressExceptionNotSignalled'
</violation>
<violation beginline="133" endline="133" begincolumn="21" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="suppressDeprecation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressDeprecation'
</violation>
<violation beginline="134" endline="134" begincolumn="21" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="removeKeepExtension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'removeKeepExtension'
</violation>
<violation beginline="137" endline="138" begincolumn="5" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="139" endline="140" begincolumn="5" endcolumn="62" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="141" endline="142" begincolumn="5" endcolumn="50" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="143" endline="144" begincolumn="5" endcolumn="70" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="145" endline="145" begincolumn="5" endcolumn="64" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="148" endline="148" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="148" endline="148" begincolumn="28" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="compileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'compileList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="148" endline="148" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="149" endline="149" begincolumn="13" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="149" endline="149" begincolumn="39" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" variable="filecopyList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filecopyList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="550" endline="550" begincolumn="13" endcolumn="73" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="554" endline="554" begincolumn="13" endcolumn="75" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="557" endline="557" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="560" endline="560" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="563" endline="563" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="566" endline="566" begincolumn="13" endcolumn="75" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="569" endline="569" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="573" endline="573" begincolumn="13" endcolumn="71" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="576" endline="576" begincolumn="13" endcolumn="75" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="579" endline="579" begincolumn="13" endcolumn="73" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="582" endline="582" begincolumn="13" endcolumn="71" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="585" endline="585" begincolumn="13" endcolumn="71" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="588" endline="588" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="591" endline="591" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="595" endline="595" begincolumn="13" endcolumn="76" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="598" endline="598" begincolumn="13" endcolumn="77" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="601" endline="601" begincolumn="13" endcolumn="79" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="604" endline="604" begincolumn="13" endcolumn="77" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="607" endline="607" begincolumn="13" endcolumn="79" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="610" endline="610" begincolumn="13" endcolumn="78" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="613" endline="613" begincolumn="13" endcolumn="79" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="616" endline="616" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="619" endline="619" begincolumn="13" endcolumn="71" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="622" endline="622" begincolumn="13" endcolumn="72" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="625" endline="625" begincolumn="13" endcolumn="71" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="628" endline="628" begincolumn="13" endcolumn="74" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="631" endline="631" begincolumn="13" endcolumn="96" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="634" endline="634" begincolumn="13" endcolumn="97" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="637" endline="637" begincolumn="13" endcolumn="90" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="640" endline="640" begincolumn="13" endcolumn="96" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="643" endline="643" begincolumn="13" endcolumn="86" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="646" endline="646" begincolumn="13" endcolumn="86" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="656" endline="656" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="676" endline="676" begincolumn="20" endcolumn="25" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " to " appears 5 times in this file; the first occurrence is on line 676
</violation>
<violation beginline="688" endline="688" begincolumn="53" endcolumn="66" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="scanDir" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="696" endline="696" begincolumn="17" endcolumn="55" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="scanDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="762" endline="762" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="doNetRexxCompile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="795" endline="795" begincolumn="25" endcolumn="25" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="doNetRexxCompile" variable="w" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintWriter object are closed after use
</violation>
<violation beginline="803" endline="803" begincolumn="28" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="doNetRexxCompile" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this StringReader object are closed after use
</violation>
<violation beginline="809" endline="809" begincolumn="20" endcolumn="46" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="doNetRexxCompile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="812" endline="812" begincolumn="24" endcolumn="67" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="doNetRexxCompile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="908" endline="908" begincolumn="16" endcolumn="58" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="NetRexxC" method="getCompileOptionsAsArray" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/PropertyFile.java">
<violation beginline="146" endline="146" begincolumn="13" endcolumn="45" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="149" endline="149" begincolumn="13" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="149" endline="149" begincolumn="27" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" variable="entries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'entries' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="149" endline="149" begincolumn="41" endcolumn="48" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="166" endline="166" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="183" endline="183" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" method="executeOperation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="187" endline="187" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" method="readFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="212" endline="212" begincolumn="13" endcolumn="53" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" method="readFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="216" endline="216" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" method="checkParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="248" endline="248" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile" method="writeFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="281" endline="281" begincolumn="24" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" variable="key" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'key'
</violation>
<violation beginline="284" endline="284" begincolumn="24" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'value'
</violation>
<violation beginline="285" endline="285" begincolumn="24" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" variable="defaultValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultValue'
</violation>
<violation beginline="286" endline="286" begincolumn="24" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" variable="newValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newValue'
</violation>
<violation beginline="287" endline="287" begincolumn="24" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" variable="pattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'pattern'
</violation>
<violation beginline="369" endline="369" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeOn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="389" endline="389" begincolumn="22" endcolumn="41" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeOn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="389" endline="389" begincolumn="22" endcolumn="41" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeOn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="392" endline="392" begincolumn="17" endcolumn="37" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeOn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="410" endline="410" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="416" endline="416" begincolumn="30" endcolumn="58" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="428" endline="430" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="434" endline="434" begincolumn="30" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'offset' is never used (overwritten on line 436)
</violation>
<violation beginline="441" endline="441" begincolumn="21" endcolumn="79" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="456" endline="456" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeInteger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="469" endline="471" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeInteger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="480" endline="482" begincolumn="23" endcolumn="21" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeInteger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="502" endline="502" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="executeString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="524" endline="524" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry" method="checkParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="629" endline="659" begincolumn="23" endcolumn="9" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Entry$Type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Type
</violation>
<violation beginline="667" endline="709" begincolumn="19" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Unit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Unit
</violation>
<violation beginline="681" endline="681" begincolumn="38" endcolumn="51" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Unit" variable="calendarFields" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'calendarFields' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="701" endline="701" begincolumn="39" endcolumn="62" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Unit" method="getCalendarField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="707" endline="707" begincolumn="13" endcolumn="25" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="PropertyFile$Unit" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'UNITS' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/RenameExtensions.java">
<violation beginline="47" endline="147" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="RenameExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'RenameExtensions' is suspected to be a Data Class (WOC=16.667%, NOPA=0, NOAM=4, WMC=10)
</violation>
<violation beginline="51" endline="51" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="RenameExtensions" variable="replace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'replace'
</violation>
<violation beginline="54" endline="54" begincolumn="31" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="RenameExtensions" variable="globType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'globType' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="107" endline="107" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="RenameExtensions" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="107" endline="145" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="RenameExtensions" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java">
<violation beginline="129" endline="129" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="ReplaceRegExp" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="134" endline="134" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="ReplaceRegExp" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="360" endline="360" begincolumn="24" endcolumn="24" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="ReplaceRegExp" method="doReplace" variable="r" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Reader object are closed after use
</violation>
<violation beginline="361" endline="361" begincolumn="24" endcolumn="24" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="ReplaceRegExp" method="doReplace" variable="w" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Writer object are closed after use
</violation>
<violation beginline="362" endline="431" begincolumn="17" endcolumn="17" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="ReplaceRegExp" method="doReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="462" endline="462" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ReplaceRegExp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="497" endline="497" begincolumn="30" endcolumn="38" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="ReplaceRegExp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/Rpm.java">
<violation beginline="45" endline="368" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Rpm
</violation>
<violation beginline="45" endline="368" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Rpm' is suspected to be a Data Class (WOC=8.333%, NOPA=0, NOAM=11, WMC=45)
</violation>
<violation beginline="70" endline="70" begincolumn="20" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" variable="rpmBuildCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rpmBuildCommand'
</violation>
<violation beginline="75" endline="75" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" variable="cleanBuildDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cleanBuildDir'
</violation>
<violation beginline="80" endline="80" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" variable="removeSpec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'removeSpec'
</violation>
<violation beginline="85" endline="85" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" variable="removeSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'removeSource'
</violation>
<violation beginline="100" endline="100" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" variable="failOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failOnError'
</violation>
<violation beginline="106" endline="106" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" variable="quiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quiet'
</violation>
<violation beginline="114" endline="114" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="139" endline="139" begincolumn="46" endcolumn="49" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'streamhandler' is never used (overwritten on lines 144, 147 and 181)
</violation>
<violation beginline="140" endline="140" begincolumn="22" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" variable="outputstream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="141" endline="141" begincolumn="22" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" variable="errorstream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="152" endline="152" begincolumn="30" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="155" endline="155" begincolumn="42" endcolumn="44" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" variable="bos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="167" endline="167" begincolumn="30" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="170" endline="170" begincolumn="42" endcolumn="44" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" variable="bos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="185" endline="201" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Rpm" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/SchemaValidate.java">
<violation beginline="76" endline="76" begincolumn="41" endcolumn="55" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="SchemaValidate" variable="schemaLocations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'schemaLocations' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="84" endline="84" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="SchemaValidate" variable="disableDTD" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'disableDTD'
</violation>
<violation beginline="98" endline="98" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="SchemaValidate" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="253" endline="253" begincolumn="28" endcolumn="31" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="SchemaValidate" method="createDefaultReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'reader' is never used (overwritten on line 256)
</violation>
<violation beginline="428" endline="428" begincolumn="50" endcolumn="63" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="SchemaValidate$SchemaLocation" method="getURIandLocation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/Script.java">
<violation beginline="36" endline="36" begincolumn="32" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Script" variable="helper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'helper' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="42" endline="45" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Script" method="setProject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setProject(Project)' is missing an @Override annotation.
</violation>
<violation beginline="52" endline="52" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="Script" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="52" endline="54" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="Script" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/TraXLiaison.java">
<violation beginline="95" endline="95" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" variable="factoryName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'factoryName'
</violation>
<violation beginline="98" endline="98" begincolumn="32" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" variable="tfactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'tfactory'
</violation>
<violation beginline="124" endline="124" begincolumn="19" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="124" endline="124" begincolumn="59" endcolumn="66" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="127" endline="127" begincolumn="19" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="136" endline="136" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" variable="suppressWarnings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressWarnings'
</violation>
<violation beginline="139" endline="139" begincolumn="44" endcolumn="68" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" variable="traceConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'traceConfiguration'
</violation>
<violation beginline="145" endline="145" begincolumn="33" endcolumn="41" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="TraXLiaison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="153" endline="153" begincolumn="61" endcolumn="69" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="setStylesheet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="153" endline="158" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="setStylesheet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setStylesheet(File)' is missing an @Override annotation.
</violation>
<violation beginline="165" endline="165" begincolumn="65" endcolumn="73" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="setStylesheet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="165" endline="177" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="setStylesheet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setStylesheet(Resource)' is missing an @Override annotation.
</violation>
<violation beginline="185" endline="185" begincolumn="73" endcolumn="81" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="transform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="185" endline="212" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="transform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'transform(File, File)' is missing an @Override annotation.
</violation>
<violation beginline="190" endline="190" begincolumn="21" endcolumn="23" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="transform" variable="fis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="191" endline="191" begincolumn="22" endcolumn="24" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="transform" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="192" endline="211" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="transform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="228" endline="228" begincolumn="22" endcolumn="25" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="getSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'src' is never used (overwritten on lines 235 and 243)
</violation>
<violation beginline="254" endline="254" begincolumn="22" endcolumn="25" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="getSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'src' is never used (overwritten on lines 261 and 269)
</violation>
<violation beginline="346" endline="346" begincolumn="32" endcolumn="40" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="createTransformer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="351" endline="351" begincolumn="25" endcolumn="42" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="createTransformer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="360" endline="360" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="createTransformer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="381" endline="381" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="getFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="405" endline="405" begincolumn="25" endcolumn="42" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="getFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="413" endline="413" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="getFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="459" endline="459" begincolumn="24" endcolumn="55" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="setAttribute" variable="pair" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="483" endline="483" begincolumn="24" endcolumn="55" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="setOutputProperty" variable="pair" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="508" endline="510" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="addParam" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addParam(String, String)' is missing an @Override annotation.
</violation>
<violation beginline="518" endline="520" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="addParam" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addParam(String, Object)' is missing an @Override annotation.
</violation>
<violation beginline="526" endline="528" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="setLogger" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setLogger(XSLTLogger)' is missing an @Override annotation.
</violation>
<violation beginline="534" endline="536" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="error" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'error(TransformerException)' is missing an @Override annotation.
</violation>
<violation beginline="542" endline="545" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="fatalError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'fatalError(TransformerException)' is missing an @Override annotation.
</violation>
<violation beginline="551" endline="555" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="warning" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'warning(TransformerException)' is missing an @Override annotation.
</violation>
<violation beginline="586" endline="586" begincolumn="9" endcolumn="25" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="logError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="587" endline="587" begincolumn="9" endcolumn="25" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="logError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="588" endline="588" begincolumn="9" endcolumn="25" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="logError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="616" endline="642" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'configure(XSLTProcess)' is missing an @Override annotation.
</violation>
<violation beginline="651" endline="651" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="TraXLiaison" method="applyReflectionHackForExtensionMethods" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/XMLValidateTask.java">
<violation beginline="71" endline="71" begincolumn="23" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" variable="lenient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lenient'
</violation>
<violation beginline="72" endline="72" begincolumn="22" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" variable="readerClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'readerClassName'
</violation>
<violation beginline="75" endline="75" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'file'
</violation>
<violation beginline="77" endline="77" begincolumn="15" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="77" endline="77" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="86" endline="86" begincolumn="25" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" variable="xmlReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'xmlReader'
</violation>
<violation beginline="93" endline="93" begincolumn="13" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="93" endline="93" begincolumn="31" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" variable="attributeList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'attributeList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="93" endline="93" begincolumn="51" endcolumn="58" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="98" endline="98" begincolumn="19" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="98" endline="98" begincolumn="55" endcolumn="62" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="100" endline="100" begincolumn="24" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" variable="xmlCatalog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'xmlCatalog' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="105" endline="105" begincolumn="28" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" variable="readerLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'readerLoader'
</violation>
<violation beginline="248" endline="248" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="248" endline="251" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'init()' is missing an @Override annotation.
</violation>
<violation beginline="288" endline="288" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="288" endline="322" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="379" endline="379" begincolumn="25" endcolumn="28" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="createXmlReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'reader' is never used (overwritten on lines 381 and 395)
</violation>
<violation beginline="384" endline="384" begincolumn="36" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="createXmlReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'readerClass' is never used (overwritten on lines 389 and 392)
</violation>
<violation beginline="470" endline="470" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="setFeature" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="476" endline="476" begincolumn="17" endcolumn="25" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="setFeature" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Parser " appears 4 times in this file; the first occurrence is on line 476
</violation>
<violation beginline="501" endline="501" begincolumn="66" endcolumn="79" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="setProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="547" endline="548" begincolumn="17" endcolumn="60" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask" method="doValidate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="578" endline="578" begincolumn="24" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" variable="currentFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'currentFile'
</violation>
<violation beginline="579" endline="579" begincolumn="26" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" variable="lastErrorMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lastErrorMessage'
</violation>
<violation beginline="580" endline="580" begincolumn="27" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" variable="failed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'failed'
</violation>
<violation beginline="594" endline="596" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" method="getFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="602" endline="605" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" method="fatalError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'fatalError(SAXParseException)' is missing an @Override annotation.
</violation>
<violation beginline="610" endline="613" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" method="error" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'error(SAXParseException)' is missing an @Override annotation.
</violation>
<violation beginline="618" endline="624" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" method="warning" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'warning(SAXParseException)' is missing an @Override annotation.
</violation>
<violation beginline="638" endline="638" begincolumn="30" endcolumn="38" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" method="getMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="638" endline="640" begincolumn="23" endcolumn="21" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$ValidatorErrorHandler" method="getMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="665" endline="665" begincolumn="24" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$Attribute" variable="attributeName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'attributeName'
</violation>
<violation beginline="699" endline="701" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$Attribute" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="710" endline="744" begincolumn="25" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional" class="XMLValidateTask$Property" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Property' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=4)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/Xalan2TraceSupport.java">
<violation beginline="40" endline="40" begincolumn="31" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional" class="Xalan2TraceSupport" method="configureTrace" variable="w" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintWriter object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ccm/CCMCheck.java">
<violation beginline="36" endline="196" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCheck" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'CCMCheck' is suspected to be a Data Class (WOC=25.000%, NOPA=2, NOAM=6, WMC=28)
</violation>
<violation beginline="47" endline="47" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCheck" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'file'
</violation>
<violation beginline="48" endline="48" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCheck" variable="comment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'comment'
</violation>
<violation beginline="49" endline="49" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCheck" variable="task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'task'
</violation>
<violation beginline="53" endline="53" begincolumn="15" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCheck" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="53" endline="53" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCheck" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="125" endline="125" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCheck" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ccm/CCMCreateTask.java">
<violation beginline="40" endline="327" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'CCMCreateTask' is suspected to be a Data Class (WOC=31.579%, NOPA=6, NOAM=12, WMC=35)
</violation>
<violation beginline="71" endline="71" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" variable="comment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'comment'
</violation>
<violation beginline="72" endline="72" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" variable="platform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'platform'
</violation>
<violation beginline="73" endline="73" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" variable="resolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolver'
</violation>
<violation beginline="74" endline="74" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" variable="release" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'release'
</violation>
<violation beginline="75" endline="75" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" variable="subSystem" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'subSystem'
</violation>
<violation beginline="76" endline="76" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" variable="task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'task'
</violation>
<violation beginline="96" endline="96" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="265" endline="266" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="272" endline="273" begincolumn="24" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="281" endline="282" begincolumn="79" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="setProcessInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="316" endline="316" begincolumn="18" endcolumn="37" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="316" endline="316" begincolumn="18" endcolumn="37" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="320" endline="320" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="322" endline="322" begincolumn="13" endcolumn="53" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMCreateTask" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ccm/CCMReconfigure.java">
<violation beginline="30" endline="152" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMReconfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'CCMReconfigure' is suspected to be a Data Class (WOC=12.500%, NOPA=3, NOAM=6, WMC=14)
</violation>
<violation beginline="47" endline="47" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMReconfigure" variable="ccmProject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ccmProject'
</violation>
<violation beginline="48" endline="48" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMReconfigure" variable="recurse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'recurse'
</violation>
<violation beginline="49" endline="49" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMReconfigure" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="66" endline="66" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="CCMReconfigure" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ccm/Continuus.java">
<violation beginline="43" endline="142" begincolumn="17" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ccm" class="Continuus" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Continuus' is suspected to be a Data Class (WOC=0.000%, NOPA=5, NOAM=3, WMC=10)
</violation>
<violation beginline="110" endline="110" begincolumn="18" endcolumn="19" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ccm" class="Continuus" method="getCcmCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCCheckin.java">
<violation beginline="117" endline="117" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="118" endline="118" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="119" endline="119" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" variable="mNwarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNwarn'
</violation>
<violation beginline="120" endline="120" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" variable="mPtime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mPtime'
</violation>
<violation beginline="121" endline="121" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" variable="mKeep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mKeep'
</violation>
<violation beginline="132" endline="132" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="250" endline="252" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" method="getNoWarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="268" endline="270" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" method="getPreserveTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="286" endline="288" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" method="getKeepCopy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="305" endline="307" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckin" method="getIdentical" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCCheckout.java">
<violation beginline="149" endline="149" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" variable="mOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mOut'
</violation>
<violation beginline="150" endline="150" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" variable="mNdata" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNdata'
</violation>
<violation beginline="151" endline="151" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" variable="mBranch" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mBranch'
</violation>
<violation beginline="152" endline="152" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" variable="mVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mVersion'
</violation>
<violation beginline="153" endline="153" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" variable="mNwarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNwarn'
</violation>
<violation beginline="154" endline="154" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="155" endline="155" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="166" endline="166" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="287" endline="289" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" method="getReserved" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="307" endline="309" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" method="getNotco" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="344" endline="346" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" method="getNoData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="380" endline="382" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" method="getVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="398" endline="400" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCCheckout" method="getNoWarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCLock.java">
<violation beginline="114" endline="114" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" variable="mReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mReplace'
</violation>
<violation beginline="115" endline="115" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" variable="mObsolete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mObsolete'
</violation>
<violation beginline="116" endline="116" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="117" endline="117" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" variable="mNusers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNusers'
</violation>
<violation beginline="118" endline="118" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" variable="mPname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mPname'
</violation>
<violation beginline="119" endline="119" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" variable="mObjselect" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mObjselect'
</violation>
<violation beginline="129" endline="129" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="203" endline="205" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" method="getReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="221" endline="223" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCLock" method="getObsolete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkattr.java">
<violation beginline="112" endline="112" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" variable="mReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mReplace'
</violation>
<violation beginline="113" endline="113" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" variable="mRecurse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mRecurse'
</violation>
<violation beginline="114" endline="114" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" variable="mVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mVersion'
</violation>
<violation beginline="115" endline="115" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" variable="mTypeName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mTypeName'
</violation>
<violation beginline="116" endline="116" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" variable="mTypeValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mTypeValue'
</violation>
<violation beginline="117" endline="117" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="118" endline="118" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="128" endline="128" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="223" endline="225" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" method="getReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="241" endline="243" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" method="getRecurse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="416" endline="416" begincolumn="24" endcolumn="24" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkattr" method="getTypeValueCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkbl.java">
<violation beginline="114" endline="114" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="115" endline="115" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="116" endline="116" begincolumn="20" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" variable="mBaselineRootName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mBaselineRootName'
</violation>
<violation beginline="117" endline="117" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" variable="mNwarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNwarn'
</violation>
<violation beginline="119" endline="119" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" variable="mFull" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mFull'
</violation>
<violation beginline="120" endline="120" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" variable="mNlabel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNlabel'
</violation>
<violation beginline="130" endline="130" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="262" endline="264" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" method="getNoWarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="280" endline="282" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" method="getIdentical" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="298" endline="300" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" method="getFull" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="316" endline="318" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkbl" method="getNlabel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkdir.java">
<violation beginline="84" endline="84" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkdir" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="85" endline="85" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkdir" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="86" endline="86" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkdir" variable="mNoco" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNoco'
</violation>
<violation beginline="96" endline="96" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkdir" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="195" endline="197" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkdir" method="getNoCheckout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMkelem.java">
<violation beginline="129" endline="129" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="130" endline="130" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="131" endline="131" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mNwarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNwarn'
</violation>
<violation beginline="132" endline="132" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mPtime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mPtime'
</violation>
<violation beginline="133" endline="133" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mNoco" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mNoco'
</violation>
<violation beginline="134" endline="134" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mCheckin" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCheckin'
</violation>
<violation beginline="135" endline="135" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mMaster" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mMaster'
</violation>
<violation beginline="136" endline="136" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" variable="mEltype" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mEltype'
</violation>
<violation beginline="146" endline="146" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="272" endline="274" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" method="getNoWarn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="290" endline="292" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" method="getPreserveTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="308" endline="310" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" method="getNoCheckout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="326" endline="328" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" method="getCheckin" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="345" endline="347" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMkelem" method="getMaster" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMklabel.java">
<violation beginline="111" endline="111" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" variable="mReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mReplace'
</violation>
<violation beginline="112" endline="112" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" variable="mRecurse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mRecurse'
</violation>
<violation beginline="113" endline="113" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" variable="mVersion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mVersion'
</violation>
<violation beginline="114" endline="114" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" variable="mTypeName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mTypeName'
</violation>
<violation beginline="115" endline="115" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" variable="mVOB" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mVOB'
</violation>
<violation beginline="116" endline="116" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="117" endline="117" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="127" endline="127" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="213" endline="215" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" method="getReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="231" endline="233" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklabel" method="getRecurse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCMklbtype.java">
<violation beginline="131" endline="131" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mTypeName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mTypeName'
</violation>
<violation beginline="132" endline="132" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mVOB" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mVOB'
</violation>
<violation beginline="133" endline="133" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="134" endline="134" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="135" endline="135" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mReplace'
</violation>
<violation beginline="136" endline="136" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mGlobal" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mGlobal'
</violation>
<violation beginline="138" endline="138" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mPbranch" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mPbranch'
</violation>
<violation beginline="139" endline="139" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" variable="mShared" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mShared'
</violation>
<violation beginline="149" endline="149" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="267" endline="269" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" method="getReplace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="285" endline="287" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" method="getGlobal" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="303" endline="305" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" method="getOrdinary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="321" endline="323" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" method="getPbranch" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="339" endline="341" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCMklbtype" method="getShared" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCRmtype.java">
<violation beginline="115" endline="115" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" variable="mTypeKind" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mTypeKind'
</violation>
<violation beginline="116" endline="116" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" variable="mTypeName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mTypeName'
</violation>
<violation beginline="117" endline="117" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" variable="mVOB" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mVOB'
</violation>
<violation beginline="118" endline="118" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="119" endline="119" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" variable="mCfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCfile'
</violation>
<violation beginline="120" endline="120" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" variable="mRmall" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mRmall'
</violation>
<violation beginline="121" endline="121" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" variable="mIgnore" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mIgnore'
</violation>
<violation beginline="131" endline="131" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="202" endline="204" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" method="getIgnore" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="220" endline="222" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCRmtype" method="getRmAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCUnCheckout.java">
<violation beginline="66" endline="66" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUnCheckout" variable="mKeep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mKeep'
</violation>
<violation beginline="76" endline="76" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUnCheckout" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="135" endline="137" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUnCheckout" method="getKeepCopy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCUnlock.java">
<violation beginline="83" endline="83" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUnlock" variable="mComment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mComment'
</violation>
<violation beginline="84" endline="84" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUnlock" variable="mPname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mPname'
</violation>
<violation beginline="94" endline="94" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUnlock" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/CCUpdate.java">
<violation beginline="113" endline="113" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" variable="mGraphical" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mGraphical'
</violation>
<violation beginline="114" endline="114" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" variable="mOverwrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mOverwrite'
</violation>
<violation beginline="115" endline="115" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" variable="mRename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mRename'
</violation>
<violation beginline="116" endline="116" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" variable="mCtime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mCtime'
</violation>
<violation beginline="117" endline="117" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" variable="mPtime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mPtime'
</violation>
<violation beginline="118" endline="118" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" variable="mLog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mLog'
</violation>
<violation beginline="128" endline="128" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="210" endline="212" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" method="getGraphical" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="228" endline="230" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" method="getOverwrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="246" endline="248" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" method="getRename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="265" endline="267" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" method="getCurrentTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="284" endline="286" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="CCUpdate" method="getPreserveTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/clearcase/ClearCase.java">
<violation beginline="110" endline="110" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="ClearCase" variable="mviewPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mviewPath'
</violation>
<violation beginline="111" endline="111" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="ClearCase" variable="mobjSelect" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mobjSelect'
</violation>
<violation beginline="112" endline="112" begincolumn="17" endcolumn="24" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="ClearCase" variable="pcnt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'pcnt'
</violation>
<violation beginline="135" endline="135" begincolumn="18" endcolumn="19" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="ClearCase" method="getClearToolCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="238" endline="240" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.clearcase" class="ClearCase" method="getFailOnErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/depend/AntAnalyzer.java">
<violation beginline="61" endline="61" begincolumn="16" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.depend" class="AntAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="72" endline="72" begincolumn="29" endcolumn="35" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.depend" class="AntAnalyzer" method="determineDependencies" variable="zipFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this ZipFile object are closed after use
</violation>
<violation beginline="73" endline="73" begincolumn="33" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.depend" class="AntAnalyzer" method="determineDependencies" variable="inStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="74" endline="89" begincolumn="21" endcolumn="21" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.depend" class="AntAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="90" endline="92" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.depend" class="AntAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/depend/ClassFile.java">
<violation beginline="89" endline="89" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.depend" class="ClassFile" method="getClassRefs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="91" endline="91" begincolumn="40" endcolumn="47" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.depend" class="ClassFile" method="getClassRefs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/depend/Depend.java">
<violation beginline="76" endline="76" begincolumn="25" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend$ClassFileInfo" variable="isUserWarned" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isUserWarned'
</violation>
<violation beginline="80" endline="80" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="83" endline="83" begincolumn="13" endcolumn="26" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="86" endline="86" begincolumn="13" endcolumn="23" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="92" endline="92" begincolumn="13" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="95" endline="95" begincolumn="13" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="101" endline="101" begincolumn="13" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="104" endline="104" begincolumn="13" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="111" endline="111" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="closure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'closure'
</violation>
<violation beginline="111" endline="111" begincolumn="13" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="116" endline="116" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="122" endline="122" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="dump" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dump'
</violation>
<violation beginline="122" endline="122" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="125" endline="125" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="128" endline="128" begincolumn="26" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="130" endline="130" begincolumn="26" endcolumn="58" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="198" endline="198" begincolumn="57" endcolumn="66" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="readCachedDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="201" endline="201" begincolumn="20" endcolumn="49" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="readCachedDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="226" endline="226" begincolumn="40" endcolumn="49" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="writeCachedDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="289" endline="289" begincolumn="26" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'cacheFile' is never used (overwritten on line 295)
</violation>
<violation beginline="311" endline="316" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="526" endline="528" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="warnOutOfDateButNotDeleted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="621" endline="621" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="665" endline="665" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="679" endline="679" begincolumn="41" endcolumn="54" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="scanDir" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="682" endline="682" begincolumn="28" endcolumn="34" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.depend" class="Depend" method="scanDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal ".java" appears 4 times in this file; the first occurrence is on line 682
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/depend/DirectoryIterator.java">
<violation beginline="43" endline="43" begincolumn="35" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend" class="DirectoryIterator" variable="enumStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'enumStack' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/depend/JarFileIterator.java">
<violation beginline="34" endline="34" begincolumn="28" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend" class="JarFileIterator" variable="jarStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'jarStream' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="83" endline="83" begincolumn="13" endcolumn="74" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.depend" class="JarFileIterator" method="getNextClassFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPool.java">
<violation beginline="69" endline="69" begincolumn="13" endcolumn="13" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.depend.constantpool" class="ConstantPool" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/depend/constantpool/ConstantPoolEntry.java">
<violation beginline="85" endline="85" begincolumn="17" endcolumn="19" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend.constantpool" class="ConstantPoolEntry" variable="tag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'tag' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="90" endline="90" begincolumn="17" endcolumn="26" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.depend.constantpool" class="ConstantPoolEntry" variable="numEntries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'numEntries' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandDeploymentTool.java">
<violation beginline="106" endline="106" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" variable="java2iiopdebug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'java2iiopdebug'
</violation>
<violation beginline="109" endline="109" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" variable="java2iioparams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'java2iioparams'
</violation>
<violation beginline="112" endline="112" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" variable="generateclient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'generateclient'
</violation>
<violation beginline="112" endline="112" begincolumn="13" endcolumn="43" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field generateclient has the same name as a method
</violation>
<violation beginline="115" endline="115" begincolumn="5" endcolumn="38" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="118" endline="118" begincolumn="5" endcolumn="38" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="130" endline="130" begincolumn="31" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" variable="genfiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'genfiles' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="264" endline="267" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="311" endline="311" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="verifyBorlandJarV5" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="322" endline="322" begincolumn="25" endcolumn="28" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="verifyBorlandJarV4" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'javaTask' is never used (overwritten on line 328)
</violation>
<violation beginline="342" endline="342" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="verifyBorlandJarV4" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="357" endline="357" begincolumn="13" endcolumn="76" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="generateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'org.apache.tools.ant.taskdefs.optional.ejb.BorlandGenerateClient' due to existing same package import 'org.apache.tools.ant.taskdefs.optional.ejb.*'
</violation>
<violation beginline="374" endline="374" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="generateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="447" endline="447" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="writeJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="500" endline="501" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="505" endline="506" begincolumn="24" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="510" endline="511" begincolumn="79" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="setProcessInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="523" endline="523" begincolumn="20" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="531" endline="531" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandDeploymentTool" method="setProcessOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/BorlandGenerateClient.java">
<violation beginline="42" endline="42" begincolumn="5" endcolumn="43" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="43" endline="43" begincolumn="5" endcolumn="43" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="47" endline="47" begincolumn="13" endcolumn="25" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" variable="debug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'debug'
</violation>
<violation beginline="47" endline="47" begincolumn="5" endcolumn="26" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="50" endline="50" begincolumn="10" endcolumn="26" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" variable="ejbjarfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ejbjarfile'
</violation>
<violation beginline="50" endline="50" begincolumn="5" endcolumn="27" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="53" endline="53" begincolumn="10" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" variable="clientjarfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'clientjarfile'
</violation>
<violation beginline="53" endline="53" begincolumn="5" endcolumn="30" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="56" endline="56" begincolumn="5" endcolumn="19" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="59" endline="59" begincolumn="5" endcolumn="28" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="62" endline="62" begincolumn="5" endcolumn="44" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="144" endline="144" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="180" endline="180" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="executeJava" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="216" endline="216" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="executeJava" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="226" endline="226" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="executeFork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="239" endline="239" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="executeForkV4" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="262" endline="262" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="executeForkV4" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="272" endline="272" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="executeForkV5" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="293" endline="293" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="BorlandGenerateClient" method="executeForkV5" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/DescriptorHandler.java">
<violation beginline="55" endline="55" begincolumn="18" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="owningTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'owningTask' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="57" endline="57" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="publicId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'publicId'
</violation>
<violation beginline="89" endline="89" begincolumn="22" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="currentElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'currentElement'
</violation>
<violation beginline="94" endline="94" begincolumn="22" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="currentText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'currentText'
</violation>
<violation beginline="101" endline="101" begincolumn="15" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="101" endline="101" begincolumn="39" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="ejbFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ejbFiles'
</violation>
<violation beginline="106" endline="106" begincolumn="22" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="ejbName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ejbName'
</violation>
<violation beginline="108" endline="108" begincolumn="31" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="fileDTDs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fileDTDs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="110" endline="110" begincolumn="33" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="resourceDTDs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resourceDTDs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="112" endline="112" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="inEJBRef" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inEJBRef'
</violation>
<violation beginline="114" endline="114" begincolumn="30" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="urlDTDs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'urlDTDs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="121" endline="121" begincolumn="18" endcolumn="23" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" variable="srcDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'srcDir' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="161" endline="165" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" method="registerDTD" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="173" endline="175" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" method="registerDTD" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="200" endline="202" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" method="resolveEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="222" endline="224" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" method="resolveEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="237" endline="237" begincolumn="12" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" method="getFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="387" endline="389" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="DescriptorHandler" method="processElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/EJBDeploymentTool.java">
<violation beginline="39" endline="39" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EJBDeploymentTool" method="processDescriptor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="45" endline="45" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EJBDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/EjbJar.java">
<violation beginline="95" endline="95" begincolumn="24" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar$Config" variable="flatDestDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'flatDestDir'
</violation>
<violation beginline="110" endline="110" begincolumn="16" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar$Config" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="194" endline="194" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="194" endline="194" begincolumn="20" endcolumn="25" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" variable="config" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'config' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="202" endline="202" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="205" endline="205" begincolumn="13" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="208" endline="208" begincolumn="13" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="211" endline="211" begincolumn="13" endcolumn="72" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="211" endline="211" begincolumn="37" endcolumn="51" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" variable="deploymentTools" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'deploymentTools' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="550" endline="550" begincolumn="42" endcolumn="55" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" method="validateConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="585" endline="585" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="EjbJar" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/GenericDeploymentTool.java">
<violation beginline="116" endline="116" begincolumn="25" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" variable="classpathLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpathLoader'
</violation>
<violation beginline="290" endline="290" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="createAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="327" endline="327" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="addFileToJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="478" endline="478" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="501" endline="501" begincolumn="15" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="parseEjbFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="521" endline="521" begincolumn="38" endcolumn="60" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="addSupportClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="557" endline="557" begincolumn="31" endcolumn="32" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="getJarBaseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'endBaseName' is never used (overwritten on lines 559 and 562)
</violation>
<violation beginline="626" endline="626" begincolumn="35" endcolumn="57" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="addVendorFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="637" endline="639" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="656" endline="656" begincolumn="37" endcolumn="59" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="needToRebuild" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="718" endline="718" begincolumn="60" endcolumn="82" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="writeJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="719" endline="719" begincolumn="53" endcolumn="66" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="writeJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="741" endline="761" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="writeJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="821" endline="821" begincolumn="42" endcolumn="64" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="checkAndAddDependants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="822" endline="822" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="checkAndAddDependants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="882" endline="882" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="GenericDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/IPlanetDeploymentTool.java">
<violation beginline="90" endline="90" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetDeploymentTool" variable="keepgenerated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepgenerated'
</violation>
<violation beginline="91" endline="91" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetDeploymentTool" variable="debug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'debug'
</violation>
<violation beginline="109" endline="109" begincolumn="13" endcolumn="31" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetDeploymentTool" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'displayName' could be replaced by a local variable.
</violation>
<violation beginline="199" endline="199" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetDeploymentTool" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="326" endline="331" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/IPlanetEjbc.java">
<violation beginline="85" endline="85" begincolumn="25" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="stdDescriptor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'stdDescriptor' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="86" endline="86" begincolumn="25" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="iasDescriptor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'iasDescriptor' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="92" endline="92" begincolumn="25" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="destDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'destDirectory' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="95" endline="95" begincolumn="25" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'classpath' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="100" endline="100" begincolumn="25" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="retainSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'retainSource'
</violation>
<violation beginline="101" endline="101" begincolumn="25" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="debugOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'debugOutput'
</violation>
<violation beginline="107" endline="107" begincolumn="25" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="parser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'parser' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="108" endline="108" begincolumn="25" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="handler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'handler' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="117" endline="117" begincolumn="13" endcolumn="35" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="117" endline="117" begincolumn="39" endcolumn="46" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" variable="ejbFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ejbFiles' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="216" endline="216" begincolumn="12" endcolumn="34" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="getEjbFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="251" endline="251" begincolumn="37" endcolumn="40" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'parser' is never used (overwritten on line 298)
</violation>
<violation beginline="266" endline="266" begincolumn="36" endcolumn="36" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="268" endline="268" begincolumn="49" endcolumn="49" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="299" endline="299" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="301" endline="301" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="302" endline="302" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="303" endline="303" begincolumn="13" endcolumn="31" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="317" endline="317" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="320" endline="320" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="323" endline="323" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="332" endline="332" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="333" endline="333" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="334" endline="334" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="335" endline="335" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="336" endline="336" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="337" endline="337" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="338" endline="338" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="339" endline="339" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="340" endline="340" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="341" endline="341" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="342" endline="342" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="343" endline="343" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="344" endline="344" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="345" endline="345" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="346" endline="346" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="347" endline="347" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="348" endline="348" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="349" endline="349" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="350" endline="350" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="usage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="393" endline="393" begincolumn="27" endcolumn="44" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="callEjbc" variable="arguments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="543" endline="543" begincolumn="16" endcolumn="62" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="buildArgumentList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="554" endline="554" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="609" endline="609" begincolumn="43" endcolumn="54" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbcHandler" variable="resourceDtds" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resourceDtds' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="610" endline="610" begincolumn="43" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbcHandler" variable="fileDtds" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fileDtds' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="612" endline="612" begincolumn="44" endcolumn="47" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbcHandler" variable="ejbs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ejbs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="614" endline="614" begincolumn="27" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbcHandler" variable="iasDescriptor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'iasDescriptor'
</violation>
<violation beginline="626" endline="626" begincolumn="13" endcolumn="73" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbcHandler" method="EjbcHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'registerDTD' called during object construction
</violation>
<violation beginline="627" endline="627" begincolumn="13" endcolumn="76" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbcHandler" method="EjbcHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'registerDTD' called during object construction
</violation>
<violation beginline="863" endline="863" begincolumn="27" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'name' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="869" endline="869" begincolumn="25" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" variable="cmp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cmp'
</violation>
<violation beginline="870" endline="870" begincolumn="25" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" variable="iiop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'iiop'
</violation>
<violation beginline="871" endline="871" begincolumn="25" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" variable="hasession" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'hasession'
</violation>
<violation beginline="872" endline="872" begincolumn="30" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" variable="cmpDescriptors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cmpDescriptors' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="958" endline="958" begincolumn="29" endcolumn="50" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="setBeantype" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="973" endline="975" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="getCmp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="985" endline="987" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="getIiop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="997" endline="999" begincolumn="16" endcolumn="9" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="getHasession" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="1023" endline="1023" begincolumn="72" endcolumn="78" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " EJB." appears 6 times in this file; the first occurrence is on line 1,023
</violation>
<violation beginline="1044" endline="1044" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1050" endline="1050" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1114" endline="1114" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="sourceClassesModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1114" endline="1114" begincolumn="36" endcolumn="47" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="sourceClassesModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "The class " appears 4 times in this file; the first occurrence is on line 1,114
</violation>
<violation beginline="1124" endline="1124" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="sourceClassesModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1135" endline="1135" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="sourceClassesModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1157" endline="1157" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="sourceClassesModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1164" endline="1164" begincolumn="72" endcolumn="79" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="sourceClassesModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal ".class" appears 6 times in this file; the first occurrence is on line 1,164
</violation>
<violation beginline="1266" endline="1266" begincolumn="35" endcolumn="49" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="classesToGenerate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "org.omg.stub." appears 4 times in this file; the first occurrence is on line 1,266
</violation>
<violation beginline="1279" endline="1279" begincolumn="24" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="classesToGenerate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The updated value of variable 'index' is never used
</violation>
<violation beginline="1292" endline="1300" begincolumn="49" endcolumn="65" rule="InefficientStringBuffering" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$EjbInfo" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#inefficientstringbuffering" priority="3">
Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
</violation>
<violation beginline="1318" endline="1318" begincolumn="24" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$Classname" variable="qualifiedName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'qualifiedName' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="1320" endline="1320" begincolumn="17" endcolumn="33" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$Classname" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="1421" endline="1421" begincolumn="29" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$RedirectOutput" variable="stream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'stream' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="1443" endline="1443" begincolumn="24" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$RedirectOutput" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1444" endline="1444" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$RedirectOutput" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1447" endline="1447" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbc$RedirectOutput" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/IPlanetEjbcTask.java">
<violation beginline="89" endline="313" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbcTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'IPlanetEjbcTask' is suspected to be a Data Class (WOC=22.222%, NOPA=0, NOAM=7, WMC=43)
</violation>
<violation beginline="96" endline="96" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbcTask" variable="keepgenerated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepgenerated'
</violation>
<violation beginline="97" endline="97" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbcTask" variable="debug" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'debug'
</violation>
<violation beginline="192" endline="192" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbcTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="203" endline="203" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbcTask" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="252" endline="252" begincolumn="42" endcolumn="55" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbcTask" method="getParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="270" endline="270" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="IPlanetEjbcTask" method="executeEjbc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/InnerClassFilenameFilter.java">
<violation beginline="27" endline="27" begincolumn="20" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="InnerClassFilenameFilter" variable="baseClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'baseClassName' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/JbossDeploymentTool.java">
<violation beginline="85" endline="94" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JbossDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="104" endline="104" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JbossDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="104" endline="105" begincolumn="60" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JbossDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/JonasDeploymentTool.java">
<violation beginline="107" endline="107" begincolumn="13" endcolumn="39" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'jonasDescriptorName' could be replaced by a local variable.
</violation>
<violation beginline="122" endline="122" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="keepgenerated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepgenerated'
</violation>
<violation beginline="128" endline="128" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="nocompil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nocompil'
</violation>
<violation beginline="134" endline="134" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="novalidation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'novalidation'
</violation>
<violation beginline="154" endline="154" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="secpropag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'secpropag'
</violation>
<violation beginline="160" endline="160" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="176" endline="176" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="keepgeneric" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepgeneric'
</violation>
<violation beginline="192" endline="192" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" variable="nogenic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nogenic'
</violation>
<violation beginline="353" endline="353" begincolumn="12" endcolumn="25" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" method="writeJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="474" endline="494" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" method="getJarBaseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="511" endline="511" begincolumn="50" endcolumn="54" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" method="registerKnownDTDs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "xml" appears 4 times in this file; the first occurrence is on line 511
</violation>
<violation beginline="528" endline="528" begincolumn="30" endcolumn="52" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" method="addGenICGeneratedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="681" endline="727" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="737" endline="737" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" method="checkConfiguration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="807" endline="807" begincolumn="57" endcolumn="79" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="JonasDeploymentTool" method="addAllFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/OrionDeploymentTool.java">
<violation beginline="39" endline="39" begincolumn="20" endcolumn="28" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="OrionDeploymentTool" variable="jarSuffix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'jarSuffix' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="48" endline="48" begincolumn="35" endcolumn="57" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="OrionDeploymentTool" method="addVendorFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="48" endline="58" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="OrionDeploymentTool" method="addVendorFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addVendorFiles(Hashtable, String)' is missing an @Override annotation.
</violation>
<violation beginline="66" endline="68" begincolumn="5" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="OrionDeploymentTool" method="getVendorOutputJarFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getVendorOutputJarFile(String)' is missing an @Override annotation.
</violation>
<violation beginline="66" endline="68" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="OrionDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java">
<violation beginline="116" endline="116" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="keepgenerated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepgenerated'
</violation>
<violation beginline="122" endline="122" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="ejbcClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ejbcClass'
</violation>
<violation beginline="131" endline="131" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="keepGeneric" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepGeneric'
</violation>
<violation beginline="133" endline="133" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="compiler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'compiler'
</violation>
<violation beginline="138" endline="138" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="noEJBC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'noEJBC'
</violation>
<violation beginline="141" endline="141" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="newCMP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newCMP'
</violation>
<violation beginline="144" endline="144" begincolumn="18" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="wlClasspath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'wlClasspath'
</violation>
<violation beginline="147" endline="147" begincolumn="28" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="sysprops" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'sysprops' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="147" endline="147" begincolumn="43" endcolumn="50" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="154" endline="154" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" variable="jvmDebugLevel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'jvmDebugLevel'
</violation>
<violation beginline="480" endline="480" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="addVendorFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="494" endline="497" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="599" endline="599" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="buildWeblogicJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="618" endline="618" begincolumn="53" endcolumn="66" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="writeJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="639" endline="639" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="639" endline="641" begincolumn="12" endcolumn="5" rule="UselessOverridingMethod" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#uselessoverridingmethod" priority="3">
Overriding method merely calls super
</violation>
<violation beginline="672" endline="672" begincolumn="17" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" variable="genericJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="673" endline="673" begincolumn="17" endcolumn="21" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" variable="wlJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="675" endline="675" begincolumn="25" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" variable="newJarStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarOutputStream object are closed after use
</violation>
<violation beginline="678" endline="825" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="736" endline="736" begincolumn="37" endcolumn="89" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="766" endline="766" begincolumn="37" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="772" endline="772" begincolumn="29" endcolumn="30" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'je'
</violation>
<violation beginline="783" endline="783" begincolumn="32" endcolumn="66" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="822" endline="822" begincolumn="32" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicDeploymentTool" method="isRebuildRequired" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicTOPLinkDeploymentTool.java">
<violation beginline="109" endline="109" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WeblogicTOPLinkDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java">
<violation beginline="91" endline="91" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" variable="keepGeneric" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepGeneric'
</violation>
<violation beginline="98" endline="98" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" variable="newCMP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newCMP'
</violation>
<violation beginline="101" endline="101" begincolumn="18" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" variable="wasClasspath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'wasClasspath'
</violation>
<violation beginline="371" endline="372" begincolumn="49" endcolumn="17" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="processElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="443" endline="443" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="addVendorFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="457" endline="460" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="575" endline="575" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="buildWebsphereJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="586" endline="586" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="writeJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="613" endline="613" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="validateConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="654" endline="654" begincolumn="17" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" variable="genericJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="655" endline="655" begincolumn="17" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" variable="wasJar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="657" endline="657" begincolumn="25" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" variable="newJarStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarOutputStream object are closed after use
</violation>
<violation beginline="660" endline="807" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="719" endline="719" begincolumn="34" endcolumn="86" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="749" endline="749" begincolumn="37" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="755" endline="755" begincolumn="29" endcolumn="30" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'je'
</violation>
<violation beginline="766" endline="766" begincolumn="32" endcolumn="66" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="804" endline="804" begincolumn="32" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ejb" class="WebsphereDeploymentTool" method="isRebuildRequired" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/DeweyDecimal.java">
<violation beginline="40" endline="40" begincolumn="25" endcolumn="46" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="DeweyDecimal" method="DeweyDecimal" variable="components" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="51" endline="51" begincolumn="16" endcolumn="36" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="DeweyDecimal" method="DeweyDecimal" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/Extension.java">
<violation beginline="142" endline="142" begincolumn="20" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" variable="extensionName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'extensionName' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="154" endline="154" begincolumn="20" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" variable="specificationVendor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'specificationVendor' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="160" endline="160" begincolumn="20" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" variable="implementationVendorID" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'implementationVendorID' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="166" endline="166" begincolumn="20" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" variable="implementationVendor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'implementationVendor' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="178" endline="178" begincolumn="20" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" variable="implementationURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'implementationURL' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="323" endline="323" begincolumn="17" endcolumn="58" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" method="Extension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="339" endline="339" begincolumn="17" endcolumn="58" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" method="Extension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="344" endline="344" begincolumn="13" endcolumn="77" rule="AvoidThrowingNullPointerException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" method="Extension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingnullpointerexception" priority="1">
Avoid throwing null pointer exceptions.
</violation>
<violation beginline="429" endline="432" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" method="getCompatibilityWith" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="439" endline="442" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" method="getCompatibilityWith" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="449" endline="452" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" method="getCompatibilityWith" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="545" endline="545" begincolumn="16" endcolumn="61" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.extension" class="Extension" method="getListed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/ExtensionAdapter.java">
<violation beginline="31" endline="216" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'ExtensionAdapter' is suspected to be a Data Class (WOC=22.222%, NOPA=0, NOAM=7, WMC=26)
</violation>
<violation beginline="155" endline="155" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionAdapter" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="169" endline="169" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionAdapter" method="verifyNotAReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="180" endline="205" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="181" endline="181" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionAdapter" method="toExtension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/ExtensionResolver.java">
<violation beginline="42" endline="42" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/ExtensionSet.java">
<violation beginline="96" endline="96" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionSet" method="toExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="103" endline="103" begincolumn="16" endcolumn="75" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionSet" method="toExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="118" endline="118" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionSet" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="126" endline="142" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionSet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="127" endline="127" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionSet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/ExtensionUtil.java">
<violation beginline="52" endline="52" begincolumn="12" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="toExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="52" endline="56" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="53" endline="53" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="toExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="65" endline="72" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="68" endline="68" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="extractExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="83" endline="83" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="getExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="103" endline="103" begincolumn="16" endcolumn="67" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="getExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="117" endline="117" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="loadExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="123" endline="123" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="loadExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="184" endline="195" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="185" endline="185" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtensionUtil" method="getManifest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/ExtraAttribute.java">
<violation beginline="55" endline="57" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtraAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="64" endline="66" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtraAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="74" endline="74" begincolumn="35" endcolumn="48" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="ExtraAttribute" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibAvailableTask.java">
<violation beginline="44" endline="44" begincolumn="62" endcolumn="69" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibAvailableTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="102" endline="102" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibAvailableTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="127" endline="127" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibAvailableTask" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibDisplayTask.java">
<violation beginline="52" endline="52" begincolumn="55" endcolumn="62" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibDisplayTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="78" endline="78" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibDisplayTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="102" endline="102" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibDisplayTask" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibManifestTask.java">
<violation beginline="109" endline="109" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibManifestTask" method="addConfiguredExtension" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="150" endline="150" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibManifestTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="190" endline="190" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibManifestTask" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="236" endline="236" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibManifestTask" method="appendLibraryList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="270" endline="270" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibManifestTask" method="toExtensions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/JarLibResolveTask.java">
<violation beginline="61" endline="61" begincolumn="13" endcolumn="42" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibResolveTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field checkExtension has the same name as a method
</violation>
<violation beginline="148" endline="148" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibResolveTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="254" endline="254" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="JarLibResolveTask" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/LibFileSet.java">
<violation beginline="95" endline="97" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibFileSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="104" endline="106" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibFileSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="113" endline="115" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibFileSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/LibraryDisplayer.java">
<violation beginline="42" endline="46" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="43" endline="43" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="56" endline="101" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="58" endline="58" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="72" endline="72" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="75" endline="75" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="77" endline="77" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="82" endline="82" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="84" endline="84" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="91" endline="91" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="96" endline="96" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displayLibrary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="110" endline="110" begincolumn="13" endcolumn="28" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="printLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.print is used
</violation>
<violation beginline="112" endline="112" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="printLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="123" endline="123" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="getSpecifications" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="139" endline="139" begincolumn="13" endcolumn="28" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displaySpecification" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.print is used
</violation>
<violation beginline="140" endline="141" begincolumn="13" endcolumn="24" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displaySpecification" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="143" endline="143" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="LibraryDisplayer" method="displaySpecification" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/Specification.java">
<violation beginline="226" endline="226" begincolumn="27" endcolumn="49" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="Specification" method="Specification" variable="sections" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="235" endline="238" begincolumn="17" endcolumn="31" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.extension" class="Specification" method="Specification" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="247" endline="247" begincolumn="13" endcolumn="65" rule="AvoidThrowingNullPointerException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension" class="Specification" method="Specification" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingnullpointerexception" priority="1">
Avoid throwing null pointer exceptions.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/resolvers/AntResolver.java">
<violation beginline="71" endline="71" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension.resolvers" class="AntResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/resolvers/LocationResolver.java">
<violation beginline="51" endline="51" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension.resolvers" class="LocationResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/extension/resolvers/URLResolver.java">
<violation beginline="71" endline="71" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.extension.resolvers" class="URLResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/i18n/Translate.java">
<violation beginline="142" endline="142" begincolumn="27" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" variable="filesets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filesets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="142" endline="142" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="147" endline="147" begincolumn="33" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" variable="resourceMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resourceMap' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="162" endline="162" begincolumn="13" endcolumn="33" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'srcLastModified' could be replaced by a local variable.
</violation>
<violation beginline="167" endline="167" begincolumn="13" endcolumn="34" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'destLastModified' could be replaced by a local variable.
</violation>
<violation beginline="172" endline="172" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" variable="loaded" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'loaded'
</violation>
<violation beginline="172" endline="172" begincolumn="13" endcolumn="35" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'loaded' could be replaced by a local variable.
</violation>
<violation beginline="286" endline="286" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="363" endline="363" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="loadResourceMaps" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="395" endline="395" begincolumn="66" endcolumn="79" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="processBundle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="397" endline="397" begincolumn="21" endcolumn="23" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="processBundle" variable="ins" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="397" endline="397" begincolumn="27" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="processBundle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ins' is never used (overwritten on line 399)
</violation>
<violation beginline="410" endline="410" begincolumn="17" endcolumn="74" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="processBundle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="419" endline="419" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="loadResourceMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="423" endline="423" begincolumn="20" endcolumn="49" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="loadResourceMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="448" endline="448" begincolumn="39" endcolumn="40" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="loadResourceMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="461" endline="461" begincolumn="13" endcolumn="70" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="loadResourceMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="477" endline="477" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="translate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="490" endline="490" begincolumn="30" endcolumn="38" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="translate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="518" endline="518" begincolumn="21" endcolumn="78" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="translate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="545" endline="545" begincolumn="38" endcolumn="41" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.i18n" class="Translate" method="translateOneFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'replace' is never used (overwritten on lines 575 and 579)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/image/Image.java">
<violation beginline="64" endline="64" begincolumn="15" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="64" endline="64" begincolumn="57" endcolumn="64" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="65" endline="65" begincolumn="23" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" variable="overwrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'overwrite'
</violation>
<violation beginline="66" endline="66" begincolumn="15" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="66" endline="66" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="67" endline="67" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" variable="srcDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'srcDir'
</violation>
<violation beginline="68" endline="68" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="74" endline="74" begincolumn="23" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" variable="garbage_collect" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'garbage_collect'
</violation>
<violation beginline="82" endline="82" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="196" endline="196" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="265" endline="265" begincolumn="13" endcolumn="21" rule="DoNotCallGarbageCollectionExplicitly" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="processDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly" priority="2">
Do not explicitly trigger a garbage collection.
</violation>
<violation beginline="294" endline="294" begincolumn="33" endcolumn="36" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="processFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'image' is never used (overwritten on line 296)
</violation>
<violation beginline="323" endline="323" begincolumn="32" endcolumn="47" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="processFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="340" endline="340" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="370" endline="370" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="372" endline="372" begincolumn="13" endcolumn="55" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="382" endline="382" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.image" class="Image" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/AbstractHotDeploymentTool.java">
<violation beginline="45" endline="188" begincolumn="17" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="AbstractHotDeploymentTool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'AbstractHotDeploymentTool' is suspected to be a Data Class (WOC=18.182%, NOPA=0, NOAM=9, WMC=19)
</violation>
<violation beginline="91" endline="91" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="AbstractHotDeploymentTool" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/GenericHotDeploymentTool.java">
<violation beginline="96" endline="96" begincolumn="33" endcolumn="46" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="GenericHotDeploymentTool" method="deploy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="110" endline="110" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="GenericHotDeploymentTool" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/HotDeploymentTool.java">
<violation beginline="48" endline="48" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="HotDeploymentTool" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="54" endline="54" begincolumn="26" endcolumn="39" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="HotDeploymentTool" method="deploy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/JonasHotDeploymentTool.java">
<violation beginline="67" endline="67" begincolumn="20" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="JonasHotDeploymentTool" variable="orb" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'orb'
</violation>
<violation beginline="159" endline="159" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="JonasHotDeploymentTool" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/ServerDeploy.java">
<violation beginline="47" endline="47" begincolumn="45" endcolumn="55" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="ServerDeploy" variable="vendorTools" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'vendorTools' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="47" endline="47" begincolumn="63" endcolumn="70" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="ServerDeploy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="104" endline="104" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="ServerDeploy" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/j2ee/WebLogicHotDeploymentTool.java">
<violation beginline="85" endline="85" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="WebLogicHotDeploymentTool" method="validateAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="123" endline="123" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.j2ee" class="WebLogicHotDeploymentTool" method="getArguments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java">
<violation beginline="49" endline="49" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" variable="outputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputFile'
</violation>
<violation beginline="50" endline="50" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" variable="plainText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'plainText'
</violation>
<violation beginline="56" endline="56" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" variable="targetFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetFile'
</violation>
<violation beginline="57" endline="57" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" variable="javaccHome" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'javaccHome'
</violation>
<violation beginline="59" endline="59" begincolumn="29" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" variable="cmdl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cmdl' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="61" endline="61" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" variable="maxMemory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'maxMemory'
</violation>
<violation beginline="128" endline="128" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="185" endline="185" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
<violation beginline="185" endline="185" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
<violation beginline="185" endline="185" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
<violation beginline="185" endline="185" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJDoc" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java">
<violation beginline="59" endline="59" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" variable="outputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputFile'
</violation>
<violation beginline="64" endline="64" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" variable="outputDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputDirectory'
</violation>
<violation beginline="65" endline="65" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" variable="targetFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetFile'
</violation>
<violation beginline="66" endline="66" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" variable="javaccHome" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'javaccHome'
</violation>
<violation beginline="68" endline="68" begincolumn="29" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" variable="cmdl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cmdl' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="70" endline="70" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" variable="maxMemory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'maxMemory'
</violation>
<violation beginline="218" endline="218" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="299" endline="299" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
<violation beginline="299" endline="299" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
<violation beginline="299" endline="299" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
<violation beginline="299" endline="299" begincolumn="63" endcolumn="80" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" method="createOutputFileName" variable="optionalOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'optionalOutputFile'
</violation>
<violation beginline="300" endline="300" begincolumn="48" endcolumn="56" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" method="createOutputFileName" variable="outputDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'outputDir'
</violation>
<violation beginline="348" endline="348" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JJTree" method="validateOutputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javacc/JavaCC.java">
<violation beginline="70" endline="70" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" variable="outputDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputDirectory'
</violation>
<violation beginline="71" endline="71" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" variable="targetFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetFile'
</violation>
<violation beginline="72" endline="72" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" variable="javaccHome" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'javaccHome'
</violation>
<violation beginline="74" endline="74" begincolumn="29" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" variable="cmdl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cmdl' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="80" endline="86" begincolumn="37" endcolumn="9" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" variable="ARCHIVE_LOCATIONS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="88" endline="94" begincolumn="34" endcolumn="9" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" variable="ARCHIVE_LOCATIONS_VS_MAJOR_VERSION" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="107" endline="107" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" variable="maxMemory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'maxMemory'
</violation>
<violation beginline="335" endline="335" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="389" endline="389" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="getArchiveFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="403" endline="403" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="getMainClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="421" endline="421" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="getMainClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="431" endline="431" begincolumn="25" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="getMainClass" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="509" endline="509" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="getArchiveLocationIndex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="537" endline="537" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="getMajorVersionNumber" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="567" endline="567" begincolumn="18" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.javacc" class="JavaCC" method="getOutputJavaFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javah/ForkingJavah.java">
<violation beginline="49" endline="49" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="ForkingJavah" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javah/Gcjh.java">
<violation beginline="32" endline="89" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.javah" class="Gcjh" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Gcjh
</violation>
<violation beginline="39" endline="39" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="Gcjh" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="39" endline="50" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javah" class="Gcjh" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'compile(Javah)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javah/JavahAdapter.java">
<violation beginline="37" endline="37" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="JavahAdapter" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javah/JavahAdapterFactory.java">
<violation beginline="64" endline="64" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="JavahAdapterFactory" method="getAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="84" endline="84" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="JavahAdapterFactory" method="getAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="124" endline="124" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="JavahAdapterFactory" method="resolveClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javah/Kaffeh.java">
<violation beginline="44" endline="44" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="Kaffeh" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="44" endline="55" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.javah" class="Kaffeh" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'compile(Javah)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/javah/SunJavah.java">
<violation beginline="48" endline="48" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.javah" class="SunJavah" method="compile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="73" endline="122" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.javah" class="SunJavah" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java">
<violation beginline="71" endline="71" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="haltonerror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haltonerror'
</violation>
<violation beginline="72" endline="72" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="fork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fork'
</violation>
<violation beginline="73" endline="73" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeout'
</violation>
<violation beginline="75" endline="75" begincolumn="20" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="jvm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'jvm'
</violation>
<violation beginline="77" endline="77" begincolumn="24" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="defaultPatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'defaultPatterns' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="82" endline="82" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="includeRuntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeRuntime'
</violation>
<violation beginline="83" endline="83" begincolumn="18" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="runtimeClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'runtimeClasses'
</violation>
<violation beginline="93" endline="97" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="158" endline="160" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="getHaltonerror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="175" endline="177" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="getFork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="329" endline="329" begincolumn="26" endcolumn="63" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask$FormatAttribute" variable="formats" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="329" endline="329" begincolumn="26" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask$FormatAttribute" variable="formats" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'formats' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="336" endline="336" begincolumn="13" endcolumn="27" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask$FormatAttribute" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'formats' may expose an internal array.
</violation>
<violation beginline="343" endline="343" begincolumn="26" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="347" endline="347" begincolumn="26" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="359" endline="359" begincolumn="43" endcolumn="50" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="addClasspathEntry" variable="resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'resource'
</violation>
<violation beginline="359" endline="359" begincolumn="43" endcolumn="50" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="addClasspathEntry" variable="resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'resource'
</violation>
<violation beginline="392" endline="392" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="453" endline="453" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="462" endline="462" begincolumn="20" endcolumn="21" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" variable="fw" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this FileWriter object are closed after use
</violation>
<violation beginline="463" endline="463" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" variable="pw" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintWriter object are closed after use
</violation>
<violation beginline="466" endline="466" begincolumn="26" endcolumn="35" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="471" endline="471" begincolumn="17" endcolumn="46" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="478" endline="533" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="499" endline="499" begincolumn="25" endcolumn="54" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="513" endline="516" begincolumn="23" endcolumn="21" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeInVM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="549" endline="549" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="executeAsForked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="623" endline="623" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jdepend" class="JDependTask" method="createWatchdog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jlink/ClassNameReader.java">
<violation beginline="33" endline="36" begincolumn="5" endcolumn="50" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jlink" class="ConstantPool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="34" endline="36" begincolumn="9" endcolumn="50" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jlink" class="ConstantPool" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="38" endline="38" begincolumn="5" endcolumn="17" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jlink" class="ConstantPool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="40" endline="40" begincolumn="5" endcolumn="20" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jlink" class="ConstantPool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="76" endline="76" begincolumn="19" endcolumn="19" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jlink" class="ConstantPool" method="ConstantPool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="81" endline="81" begincolumn="19" endcolumn="19" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jlink" class="ConstantPool" method="ConstantPool" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jlink/JlinkTask.java">
<violation beginline="55" endline="55" begincolumn="18" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="JlinkTask" variable="outfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outfile'
</violation>
<violation beginline="57" endline="57" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="JlinkTask" variable="mergefiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mergefiles'
</violation>
<violation beginline="59" endline="59" begincolumn="18" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="JlinkTask" variable="addfiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'addfiles'
</violation>
<violation beginline="61" endline="61" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="JlinkTask" variable="compress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'compress'
</violation>
<violation beginline="132" endline="132" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jlink" class="JlinkTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="157" endline="157" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jlink" class="JlinkTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jlink/jlink.java">
<violation beginline="49" endline="49" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" variable="outfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outfile'
</violation>
<violation beginline="51" endline="51" begincolumn="26" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" variable="mergefiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'mergefiles' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="51" endline="51" begincolumn="43" endcolumn="50" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="53" endline="53" begincolumn="26" endcolumn="33" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" variable="addfiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'addfiles' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="53" endline="53" begincolumn="41" endcolumn="48" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="55" endline="55" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" variable="compression" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'compression'
</violation>
<violation beginline="59" endline="59" begincolumn="5" endcolumn="42" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="140" endline="140" begincolumn="31" endcolumn="39" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="link" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="182" endline="182" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="195" endline="195" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="196" endline="196" begincolumn="13" endcolumn="28" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.print is used
</violation>
<violation beginline="241" endline="241" begincolumn="37" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="mergeZipJarContents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'count' is never used (overwritten on line 243)
</violation>
<violation beginline="243" endline="243" begincolumn="32" endcolumn="68" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="mergeZipJarContents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="277" endline="277" begincolumn="28" endcolumn="35" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="getEntryName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal ".class" appears 4 times in this file; the first occurrence is on line 277
</violation>
<violation beginline="285" endline="287" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="getEntryName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="289" endline="289" begincolumn="9" endcolumn="25" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="getEntryName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.printf is used
</violation>
<violation beginline="330" endline="330" begincolumn="16" endcolumn="50" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="addToOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="364" endline="366" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="processEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="403" endline="403" begincolumn="16" endcolumn="52" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jlink" class="jlink" method="calcChecksum" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/Jasper41Mangler.java">
<violation beginline="40" endline="40" begincolumn="61" endcolumn="83" rule="InefficientStringBuffering" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="Jasper41Mangler" method="mapJspToJavaName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#inefficientstringbuffering" priority="3">
Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().
</violation>
<violation beginline="71" endline="71" begincolumn="14" endcolumn="38" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp" class="Jasper41Mangler" method="mangleChar" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/JspC.java">
<violation beginline="66" endline="680" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like JspC
</violation>
<violation beginline="80" endline="80" begincolumn="17" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="82" endline="82" begincolumn="15" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="82" endline="82" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="83" endline="83" begincolumn="5" endcolumn="16" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="83" endline="83" begincolumn="34" endcolumn="41" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="83" endline="83" begincolumn="5" endcolumn="44" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="200" endline="202" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" method="getFailonerror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="386" endline="386" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" method="addWebApp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="415" endline="415" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" method="getCompileList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="426" endline="426" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="501" endline="501" begincolumn="21" endcolumn="32" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Compiling " appears 4 times in this file; the first occurrence is on line 501
</violation>
<violation beginline="531" endline="531" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" method="doCompilation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="560" endline="560" begincolumn="28" endcolumn="41" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspC" method="scanDir" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/JspNameMangler.java">
<violation beginline="80" endline="80" begincolumn="27" endcolumn="28" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspNameMangler" method="mapJspToBaseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="123" endline="123" begincolumn="43" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp" class="JspNameMangler" method="mangleChar" variable="ch" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'ch'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/WLJspc.java">
<violation beginline="102" endline="102" begincolumn="26" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp" class="WLJspc" variable="filesToDo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filesToDo' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="102" endline="102" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="WLJspc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="109" endline="109" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp" class="WLJspc" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="257" endline="257" begincolumn="28" endcolumn="41" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp" class="WLJspc" method="scanDir" variable="files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="285" endline="285" begincolumn="22" endcolumn="23" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="WLJspc" method="scanDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="286" endline="286" begincolumn="22" endcolumn="23" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.jsp" class="WLJspc" method="scanDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/DefaultJspCompilerAdapter.java">
<violation beginline="46" endline="46" begincolumn="44" endcolumn="57" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="DefaultJspCompilerAdapter" method="logAndAddFilesToCompile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="64" endline="64" begincolumn="15" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="DefaultJspCompilerAdapter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JasperC.java">
<violation beginline="45" endline="45" begincolumn="5" endcolumn="23" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JasperC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="64" endline="64" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JasperC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="94" endline="94" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JasperC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="95" endline="95" begincolumn="17" endcolumn="18" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JasperC" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JspCompilerAdapter.java">
<violation beginline="50" endline="50" begincolumn="30" endcolumn="43" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JspCompilerAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/jsp/compilers/JspCompilerAdapterFactory.java">
<violation beginline="55" endline="55" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JspCompilerAdapterFactory" method="getCompiler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="81" endline="81" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JspCompilerAdapterFactory" method="getCompiler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="105" endline="105" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JspCompilerAdapterFactory" method="resolveClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="114" endline="118" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.jsp.compilers" class="JspCompilerAdapterFactory" method="resolveClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/AggregateTransformer.java">
<violation beginline="80" endline="81" begincolumn="26" endcolumn="82" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="85" endline="85" begincolumn="20" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="88" endline="88" begincolumn="22" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="96" endline="96" begincolumn="15" endcolumn="24" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="99" endline="99" begincolumn="15" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="102" endline="102" begincolumn="15" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="105" endline="105" begincolumn="15" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="112" endline="112" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="112" endline="112" begincolumn="25" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="xsltTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'xsltTask' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="117" endline="117" begincolumn="13" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="124" endline="124" begincolumn="26" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="129" endline="129" begincolumn="33" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="counter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'counter'
</violation>
<violation beginline="129" endline="129" begincolumn="29" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="132" endline="132" begincolumn="15" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="177" endline="177" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" method="setXmlfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="184" endline="184" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" method="setXmlfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="250" endline="250" begincolumn="36" endcolumn="49" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" method="transform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="282" endline="282" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" method="transform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="287" endline="287" begincolumn="13" endcolumn="33" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" method="transform" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="342" endline="342" begincolumn="42" endcolumn="55" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="AggregateTransformer" method="checkOptions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/BaseTest.java">
<violation beginline="28" endline="244" begincolumn="17" endcolumn="1" rule="AbstractClassWithoutAbstractMethod" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod" priority="3">
This abstract class does not have any abstract methods
</violation>
<violation beginline="30" endline="30" begincolumn="23" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" variable="haltOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haltOnError'
</violation>
<violation beginline="31" endline="31" begincolumn="23" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" variable="haltOnFail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haltOnFail'
</violation>
<violation beginline="33" endline="33" begincolumn="23" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" variable="fork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fork'
</violation>
<violation beginline="34" endline="34" begincolumn="22" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" variable="ifProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ifProperty'
</violation>
<violation beginline="35" endline="35" begincolumn="22" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" variable="unlessProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'unlessProperty'
</violation>
<violation beginline="36" endline="36" begincolumn="15" endcolumn="38" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="36" endline="36" begincolumn="57" endcolumn="64" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="38" endline="38" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" variable="destDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'destDir'
</violation>
<violation beginline="60" endline="62" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" method="getFiltertrace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="76" endline="78" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" method="getFork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="100" endline="102" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" method="getHaltonerror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="108" endline="110" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="BaseTest" method="getHaltonfailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/BatchTest.java">
<violation beginline="48" endline="48" begincolumn="21" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="BatchTest" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'project' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="51" endline="51" begincolumn="23" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="BatchTest" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resources' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="112" endline="112" begincolumn="21" endcolumn="45" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="BatchTest" method="addTestsTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="112" endline="118" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="BatchTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/BriefJUnitResultFormatter.java">
<violation beginline="57" endline="57" begincolumn="26" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" variable="results" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'results' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="62" endline="62" begincolumn="28" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" variable="resultWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resultWriter' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="67" endline="67" begincolumn="26" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" variable="numberFormat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'numberFormat' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="72" endline="72" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" variable="systemOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'systemOutput'
</violation>
<violation beginline="77" endline="77" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" variable="systemError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'systemError'
</violation>
<violation beginline="140" endline="140" begincolumn="9" endcolumn="36" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="141" endline="141" begincolumn="9" endcolumn="34" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="142" endline="142" begincolumn="9" endcolumn="40" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="143" endline="143" begincolumn="9" endcolumn="32" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="144" endline="144" begincolumn="9" endcolumn="38" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="145" endline="145" begincolumn="9" endcolumn="33" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="146" endline="146" begincolumn="9" endcolumn="37" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="147" endline="147" begincolumn="9" endcolumn="38" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="148" endline="148" begincolumn="9" endcolumn="72" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="165" endline="180" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="174" endline="176" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="189" endline="190" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="startTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="197" endline="198" begincolumn="36" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="endTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="251" endline="269" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.optional.junit" class="BriefJUnitResultFormatter" method="formatError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/Constants.java">
<violation beginline="24" endline="46" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="29" endline="29" begincolumn="18" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="29" endline="29" begincolumn="5" endcolumn="50" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="30" endline="30" begincolumn="18" endcolumn="55" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="30" endline="30" begincolumn="5" endcolumn="55" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="31" endline="31" begincolumn="18" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="31" endline="31" begincolumn="5" endcolumn="59" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="32" endline="32" begincolumn="18" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="32" endline="32" begincolumn="5" endcolumn="53" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="33" endline="33" begincolumn="18" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="33" endline="33" begincolumn="5" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="34" endline="34" begincolumn="18" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="34" endline="34" begincolumn="5" endcolumn="62" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="35" endline="35" begincolumn="18" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="35" endline="35" begincolumn="5" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="36" endline="36" begincolumn="18" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="36" endline="36" begincolumn="5" endcolumn="51" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="37" endline="37" begincolumn="18" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="37" endline="37" begincolumn="5" endcolumn="69" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="38" endline="38" begincolumn="18" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="38" endline="38" begincolumn="5" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="39" endline="39" begincolumn="18" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="39" endline="39" begincolumn="5" endcolumn="73" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="40" endline="40" begincolumn="18" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="40" endline="40" begincolumn="5" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="41" endline="41" begincolumn="18" endcolumn="76" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="41" endline="41" begincolumn="5" endcolumn="76" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="42" endline="42" begincolumn="18" endcolumn="61" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="42" endline="42" begincolumn="5" endcolumn="61" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="43" endline="43" begincolumn="18" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="43" endline="43" begincolumn="5" endcolumn="57" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="45" endline="45" begincolumn="18" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="45" endline="45" begincolumn="5" endcolumn="47" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/CustomJUnit4TestAdapterCache.java">
<violation beginline="36" endline="91" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="CustomJUnit4TestAdapterCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/Enumerations.java">
<violation beginline="102" endline="102" begincolumn="40" endcolumn="48" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="CompoundEnumeration" variable="enumArray" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'enumArray' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="105" endline="105" begincolumn="17" endcolumn="25" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="CompoundEnumeration" variable="index" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'index'
</violation>
<violation beginline="108" endline="108" begincolumn="32" endcolumn="68" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="CompoundEnumeration" method="CompoundEnumeration" variable="enumarray" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'enumarray' is stored directly.
</violation>
<violation beginline="138" endline="138" begincolumn="35" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="CompoundEnumeration" method="nextElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/FailureRecorder.java">
<violation beginline="166" endline="166" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="166" endline="167" begincolumn="69" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="210" endline="211" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="setSystemError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="218" endline="219" begincolumn="45" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="setSystemOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="226" endline="226" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="startTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="226" endline="227" begincolumn="71" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="startTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="234" endline="235" begincolumn="36" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="endTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="242" endline="243" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="startTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="248" endline="265" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="writeJavaClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="255" endline="255" begincolumn="45" endcolumn="54" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="writeJavaClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="273" endline="273" begincolumn="32" endcolumn="78" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="createClassHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="400" endline="401" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="buildFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="408" endline="409" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="buildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="416" endline="417" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="424" endline="425" begincolumn="50" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="432" endline="433" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="453" endline="454" begincolumn="47" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="FailureRecorder" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/FormatterElement.java">
<violation beginline="132" endline="142" begincolumn="13" endcolumn="13" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="setClassname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="175" endline="177" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="185" endline="185" begincolumn="40" endcolumn="42" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="setOutput" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'out'
</violation>
<violation beginline="204" endline="206" begincolumn="5" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="getUseFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="204" endline="206" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="265" endline="265" begincolumn="73" endcolumn="86" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="createFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="265" endline="267" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="281" endline="345" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="282" endline="282" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="createFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="307" endline="308" begincolumn="13" endcolumn="27" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="createFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="326" endline="328" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="createFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="337" endline="339" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="FormatterElement" method="createFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/IgnoredTestResult.java">
<violation beginline="36" endline="36" begincolumn="39" endcolumn="47" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="IgnoredTestResult" variable="listeners" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'listeners' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="37" endline="37" begincolumn="31" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="IgnoredTestResult" variable="ignored" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ignored' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="38" endline="38" begincolumn="31" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="IgnoredTestResult" variable="skipped" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'skipped' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="40" endline="42" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="IgnoredTestResult" method="IgnoredTestResult" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="45" endline="50" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.optional.junit" class="IgnoredTestResult" method="addListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="53" endline="58" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.optional.junit" class="IgnoredTestResult" method="removeListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="65" endline="70" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.optional.junit" class="IgnoredTestResult" method="testIgnored" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnit4TestMethodAdapter.java">
<violation beginline="59" endline="59" begincolumn="36" endcolumn="61" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnit4TestMethodAdapter" method="JUnit4TestMethodAdapter" variable="methodNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="134" endline="134" begincolumn="59" endcolumn="78" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnit4TestMethodAdapter$MultipleMethodsFilter" method="MultipleMethodsFilter" variable="methodNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitResultFormatter.java">
<violation beginline="39" endline="39" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitResultFormatter" method="startTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="46" endline="46" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java">
<violation beginline="156" endline="156" begincolumn="47" endcolumn="54" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="157" endline="157" begincolumn="52" endcolumn="59" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="158" endline="158" begincolumn="19" endcolumn="42" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="158" endline="158" begincolumn="61" endcolumn="68" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="159" endline="159" begincolumn="18" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="dir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dir'
</violation>
<violation beginline="161" endline="161" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeout'
</violation>
<violation beginline="162" endline="162" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="summary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'summary'
</violation>
<violation beginline="165" endline="165" begincolumn="51" endcolumn="63" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="runner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'runner'
</violation>
<violation beginline="167" endline="167" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="newEnvironment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newEnvironment'
</violation>
<violation beginline="171" endline="171" begincolumn="18" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="antRuntimeClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'antRuntimeClasses'
</violation>
<violation beginline="174" endline="174" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="showOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'showOutput'
</violation>
<violation beginline="182" endline="182" begincolumn="28" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="classLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classLoader'
</violation>
<violation beginline="183" endline="183" begincolumn="25" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="perm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'perm'
</violation>
<violation beginline="186" endline="186" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="splitJUnit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'splitJUnit'
</violation>
<violation beginline="187" endline="187" begincolumn="21" endcolumn="52" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="enableTestListenerEvents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'enableTestListenerEvents'
</violation>
<violation beginline="192" endline="192" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="forkedPathChecked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forkedPathChecked'
</violation>
<violation beginline="195" endline="195" begincolumn="37" endcolumn="63" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="caughtBuildException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'caughtBuildException'
</violation>
<violation beginline="198" endline="198" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="haltOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haltOnError'
</violation>
<violation beginline="199" endline="199" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="haltOnFail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haltOnFail'
</violation>
<violation beginline="201" endline="201" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="fork" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fork'
</violation>
<violation beginline="374" endline="374" begincolumn="34" endcolumn="39" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask$SummaryAttribute" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "true" appears 4 times in this file; the first occurrence is on line 374
</violation>
<violation beginline="572" endline="572" begincolumn="18" endcolumn="50" rule="UnusedPrivateMethod" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="preConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedprivatemethod" priority="3">
Avoid unused private methods such as 'preConfigure(BaseTest)'.
</violation>
<violation beginline="715" endline="715" begincolumn="31" endcolumn="39" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="JUnitTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="753" endline="759" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="getEnableTestListenerEvents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="794" endline="794" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="createMirror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="842" endline="842" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="901" endline="901" begincolumn="23" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask$JunitTestThread" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="902" endline="902" begincolumn="23" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask$JunitTestThread" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="903" endline="903" begincolumn="23" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask$JunitTestThread" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="937" endline="937" begincolumn="16" endcolumn="82" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="oneJunitThread" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1016" endline="1016" begincolumn="74" endcolumn="87" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1049" endline="1049" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1060" endline="1060" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="validateTestName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1073" endline="1073" begincolumn="85" endcolumn="98" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1078" endline="1078" begincolumn="36" endcolumn="45" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="1082" endline="1082" begincolumn="31" endcolumn="39" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" variable="logWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this LogOutputStream object are closed after use
</violation>
<violation beginline="1120" endline="1120" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1131" endline="1131" begincolumn="67" endcolumn="80" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1150" endline="1150" begincolumn="56" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" variable="test" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'test'
</violation>
<violation beginline="1153" endline="1153" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1224" endline="1224" begincolumn="32" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" variable="outstream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="1261" endline="1313" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1266" endline="1313" begincolumn="11" endcolumn="9" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="1268" endline="1268" begincolumn="28" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" variable="br" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedReader object are closed after use
</violation>
<violation beginline="1269" endline="1287" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1271" endline="1271" begincolumn="49" endcolumn="58" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="1279" endline="1279" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeAsForked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1383" endline="1386" begincolumn="25" endcolumn="49" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="checkForkedPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="1391" endline="1391" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="checkForkedPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1391" endline="1393" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="checkForkedPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1550" endline="1550" begincolumn="70" endcolumn="83" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="executeInVM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1638" endline="1638" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="createWatchdog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1677" endline="1677" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="checkMethodLists" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1692" endline="1696" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="checkModules" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="1715" endline="1715" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="hasJunit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1817" endline="1817" begincolumn="49" endcolumn="56" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="addClasspathResource" variable="resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'resource'
</violation>
<violation beginline="1817" endline="1817" begincolumn="49" endcolumn="56" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="addClasspathResource" variable="resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'resource'
</violation>
<violation beginline="1846" endline="1848" begincolumn="18" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1846" endline="1848" begincolumn="5" endcolumn="53" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1907" endline="1907" begincolumn="38" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="logVmExit" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="1912" endline="1914" begincolumn="31" endcolumn="29" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="logVmExit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1947" endline="1976" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" method="createClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="2241" endline="2241" begincolumn="24" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask$TestResultHolder" variable="timedOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timedOut'
</violation>
<violation beginline="2243" endline="2243" begincolumn="24" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask$TestResultHolder" variable="crashed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'crashed'
</violation>
<violation beginline="2298" endline="2298" begincolumn="18" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="2298" endline="2298" begincolumn="5" endcolumn="73" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskMirrorImpl.java">
<violation beginline="39" endline="39" begincolumn="19" endcolumn="33" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTaskMirrorImpl" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'task' could be replaced by a local variable.
</violation>
<violation beginline="83" endline="83" begincolumn="24" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTaskMirrorImpl$VmExitErrorTest" variable="message" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'message' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="84" endline="84" begincolumn="27" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTaskMirrorImpl$VmExitErrorTest" variable="test" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'test' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="85" endline="85" begincolumn="24" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTaskMirrorImpl$VmExitErrorTest" variable="testCase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'testCase' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="108" endline="110" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTaskMirrorImpl$VmExitErrorTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTest.java">
<violation beginline="43" endline="43" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="50" endline="50" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" variable="methodsSpecified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'methodsSpecified'
</violation>
<violation beginline="53" endline="53" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" variable="methodsList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'methodsList'
</violation>
<violation beginline="56" endline="56" begincolumn="22" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" variable="methods" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'methods'
</violation>
<violation beginline="59" endline="59" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" variable="outfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outfile'
</violation>
<violation beginline="64" endline="64" begincolumn="13" endcolumn="40" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="75" endline="75" begincolumn="24" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" variable="props" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'props'
</violation>
<violation beginline="78" endline="79" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="JUnitTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="111" endline="111" begincolumn="43" endcolumn="58" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="JUnitTest" variable="methods" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="155" endline="155" begincolumn="21" endcolumn="34" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="setMethods" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="155" endline="155" begincolumn="21" endcolumn="34" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="setMethods" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'value' is stored directly.
</violation>
<violation beginline="155" endline="159" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="196" endline="198" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="208" endline="213" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="212" endline="212" begincolumn="9" endcolumn="23" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="getMethods" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'methods' may expose an internal array.
</violation>
<violation beginline="223" endline="239" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="248" endline="260" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="273" endline="273" begincolumn="60" endcolumn="70" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="parseTestMethodNamesList" variable="methodNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'methodNames'
</violation>
<violation beginline="273" endline="273" begincolumn="60" endcolumn="70" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="parseTestMethodNamesList" variable="methodNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'methodNames'
</violation>
<violation beginline="274" endline="274" begincolumn="52" endcolumn="75" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="parseTestMethodNamesList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="323" endline="325" begincolumn="42" endcolumn="21" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="parseTestMethodNamesList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="339" endline="341" begincolumn="67" endcolumn="21" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="parseTestMethodNamesList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="348" endline="350" begincolumn="42" endcolumn="21" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="parseTestMethodNamesList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="363" endline="363" begincolumn="24" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="parseTestMethodNamesList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The updated value of variable 'wordIndex' is never used
</violation>
<violation beginline="484" endline="484" begincolumn="31" endcolumn="45" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="setProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="515" endline="515" begincolumn="26" endcolumn="57" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="addFormattersTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="515" endline="520" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="528" endline="538" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="528" endline="538" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTest" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTestRunner.java">
<violation beginline="79" endline="92" begincolumn="35" endcolumn="20" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="DEFAULT_TRACE_FILTERS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="100" endline="100" begincolumn="28" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="multipleTests" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'multipleTests'
</violation>
<violation beginline="106" endline="106" begincolumn="27" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="crashFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'crashFile'
</violation>
<violation beginline="111" endline="111" begincolumn="19" endcolumn="68" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="111" endline="111" begincolumn="87" endcolumn="94" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="121" endline="121" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="showOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'showOutput'
</violation>
<violation beginline="128" endline="128" begincolumn="25" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="perm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'perm'
</violation>
<violation beginline="133" endline="133" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="haltOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haltOnError'
</violation>
<violation beginline="138" endline="138" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="haltOnFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haltOnFailure'
</violation>
<violation beginline="157" endline="157" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="forked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'forked'
</violation>
<violation beginline="163" endline="163" begincolumn="21" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="logTestListenerEvents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'logTestListenerEvents'
</violation>
<violation beginline="169" endline="169" begincolumn="22" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="methods" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'methods'
</violation>
<violation beginline="303" endline="303" begincolumn="9" endcolumn="35" rule="AssignmentToNonFinalStatic" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="JUnitTestRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmenttononfinalstatic" priority="3">
Possible unsafe assignment to a non-final static field in a constructor.
</violation>
<violation beginline="313" endline="313" begincolumn="25" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="savedOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'savedOut'
</violation>
<violation beginline="313" endline="313" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="314" endline="314" begincolumn="25" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="savedErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'savedErr'
</violation>
<violation beginline="314" endline="314" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="320" endline="321" begincolumn="48" endcolumn="17" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="write" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="381" endline="576" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="402" endline="405" begincolumn="23" endcolumn="21" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="419" endline="433" begincolumn="85" endcolumn="21" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="419" endline="419" begincolumn="25" endcolumn="48" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'junit.framework.TestCase' due to existing import 'junit.framework.TestCase'
</violation>
<violation beginline="471" endline="473" begincolumn="27" endcolumn="25" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="516" endline="519" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="536" endline="536" begincolumn="35" endcolumn="89" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="563" endline="563" begincolumn="17" endcolumn="31" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="run" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="606" endline="608" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="containsTests" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="612" endline="614" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="containsTests" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="789" endline="791" begincolumn="89" endcolumn="9" rule="EmptyIfStmt" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="handleOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyifstmt" priority="3">
Avoid empty if statements
</violation>
<violation beginline="924" endline="924" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="939" endline="939" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="955" endline="955" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="959" endline="959" begincolumn="35" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="987" endline="987" begincolumn="71" endcolumn="80" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="987" endline="987" begincolumn="18" endcolumn="90" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final
</violation>
<violation beginline="988" endline="988" begincolumn="28" endcolumn="28" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'code' is never used (overwritten on line 1014)
</violation>
<violation beginline="989" endline="989" begincolumn="41" endcolumn="45" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'errorOccurred' is never used (overwritten on line 1017)
</violation>
<violation beginline="990" endline="990" begincolumn="43" endcolumn="47" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'failureOccurred' is never used (overwritten on line 1018)
</violation>
<violation beginline="991" endline="991" begincolumn="31" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'line' is never used (overwritten on line 992)
</violation>
<violation beginline="992" endline="992" begincolumn="24" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1028" endline="1028" begincolumn="33" endcolumn="50" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="1034" endline="1034" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="1049" endline="1049" begincolumn="20" endcolumn="43" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="1049" endline="1049" begincolumn="20" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1049" endline="1049" begincolumn="63" endcolumn="70" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1056" endline="1056" begincolumn="70" endcolumn="83" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="startTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1056" endline="1057" begincolumn="85" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="startTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1060" endline="1060" begincolumn="68" endcolumn="81" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1060" endline="1061" begincolumn="83" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1064" endline="1065" begincolumn="59" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="setOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1068" endline="1069" begincolumn="59" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="setSystemOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1072" endline="1073" begincolumn="58" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="setSystemError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1076" endline="1077" begincolumn="73" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="addError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1080" endline="1081" begincolumn="86" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="addFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1084" endline="1085" begincolumn="50" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="endTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="1108" endline="1108" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="createAndStoreFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1152" endline="1152" begincolumn="28" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="filterStack" variable="sr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this StringReader object are closed after use
</violation>
<violation beginline="1153" endline="1153" begincolumn="30" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="filterStack" variable="br" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this StringReader object are closed after use
</violation>
<violation beginline="1156" endline="1169" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="filterStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1158" endline="1158" begincolumn="20" endcolumn="49" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="filterStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1165" endline="1165" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="filterStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1206" endline="1206" begincolumn="24" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="registerNonCrash" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this FileWriter object are closed after use
</violation>
<violation beginline="1207" endline="1213" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="registerNonCrash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1208" endline="1208" begincolumn="27" endcolumn="36" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="registerNonCrash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="1220" endline="1220" begincolumn="28" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="registerTestCase" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this FileWriter object are closed after use
</violation>
<violation beginline="1221" endline="1227" begincolumn="17" endcolumn="17" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="registerTestCase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1222" endline="1222" begincolumn="31" endcolumn="40" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="registerTestCase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="1228" endline="1230" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="registerTestCase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1292" endline="1292" begincolumn="19" endcolumn="70" rule="UnusedPrivateMethod" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitTestRunner" method="findJUnit4FailureErrorCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedprivatemethod" priority="3">
Avoid unused private methods such as 'findJUnit4FailureErrorCount(TestResult)'.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitVersionHelper.java">
<violation beginline="36" endline="36" begincolumn="27" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitVersionHelper" variable="testCaseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'testCaseName'
</violation>
<violation beginline="91" endline="93" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitVersionHelper" method="getTestCaseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="107" endline="109" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitVersionHelper" method="getTestCaseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="163" endline="166" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="JUnitVersionHelper" method="getIgnoreMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java">
<violation beginline="46" endline="46" begincolumn="26" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" variable="nf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nf' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="50" endline="50" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" variable="testStarts" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'testStarts' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="58" endline="58" begincolumn="26" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" variable="inner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'inner' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="66" endline="66" begincolumn="32" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" variable="failed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'failed' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="68" endline="68" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" variable="systemOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'systemOutput'
</violation>
<violation beginline="69" endline="69" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" variable="systemError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'systemError'
</violation>
<violation beginline="101" endline="101" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" method="startTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="119" endline="119" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="121" endline="165" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="149" endline="165" begincolumn="11" endcolumn="9" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="151" endline="163" begincolumn="17" endcolumn="17" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="PlainJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/SummaryJUnitResultFormatter.java">
<violation beginline="44" endline="44" begincolumn="26" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" variable="nf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nf' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="50" endline="50" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" variable="withOutAndErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'withOutAndErr'
</violation>
<violation beginline="51" endline="51" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" variable="systemOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'systemOutput'
</violation>
<violation beginline="52" endline="52" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" variable="systemError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'systemError'
</violation>
<violation beginline="65" endline="72" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="writeOutputLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="97" endline="98" begincolumn="35" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="startTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="104" endline="105" begincolumn="36" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="111" endline="112" begincolumn="52" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="addFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="130" endline="131" begincolumn="50" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="addError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="167" endline="167" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="169" endline="169" begincolumn="9" endcolumn="36" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="170" endline="170" begincolumn="9" endcolumn="34" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="171" endline="171" begincolumn="9" endcolumn="40" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="172" endline="172" begincolumn="9" endcolumn="32" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="173" endline="173" begincolumn="9" endcolumn="38" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="174" endline="174" begincolumn="9" endcolumn="33" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="175" endline="175" begincolumn="9" endcolumn="37" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="176" endline="176" begincolumn="9" endcolumn="38" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="177" endline="177" begincolumn="9" endcolumn="62" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="202" endline="208" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="SummaryJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/TearDownOnVmCrash.java">
<violation beginline="67" endline="68" begincolumn="52" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="addFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="71" endline="72" begincolumn="63" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="addFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="75" endline="76" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="startTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="79" endline="80" begincolumn="36" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="endTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="83" endline="84" begincolumn="47" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="87" endline="88" begincolumn="45" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="setOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="91" endline="92" begincolumn="45" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="setSystemOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="95" endline="96" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="setSystemError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="107" endline="109" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="tearDown" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="114" endline="116" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="tearDown" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="129" endline="131" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="tearDown" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="142" endline="144" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="tearDown" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="146" endline="149" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="tearDown" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="149" endline="152" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="tearDown" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="150" endline="150" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="TearDownOnVmCrash" method="tearDown" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/TestIgnored.java">
<violation beginline="25" endline="25" begincolumn="18" endcolumn="21" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="TestIgnored" variable="test" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'test' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/TestListenerWrapper.java">
<violation beginline="28" endline="28" begincolumn="26" endcolumn="32" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="TestListenerWrapper" variable="wrapped" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'wrapped' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLConstants.java">
<violation beginline="71" endline="71" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="74" endline="74" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="77" endline="77" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="80" endline="80" begincolumn="5" endcolumn="27" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="83" endline="83" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="86" endline="86" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="89" endline="89" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="92" endline="92" begincolumn="5" endcolumn="36" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="95" endline="95" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="98" endline="98" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="101" endline="101" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="104" endline="104" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="107" endline="107" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="109" endline="109" begincolumn="5" endcolumn="36" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="112" endline="112" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="115" endline="115" begincolumn="5" endcolumn="36" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="118" endline="118" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="121" endline="121" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="124" endline="124" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="127" endline="127" begincolumn="5" endcolumn="40" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="130" endline="130" begincolumn="5" endcolumn="26" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="135" endline="135" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="140" endline="140" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLJUnitResultFormatter.java">
<violation beginline="63" endline="63" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" method="getDocumentBuilder" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="71" endline="71" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="76" endline="76" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="86" endline="86" begincolumn="19" endcolumn="44" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="86" endline="86" begincolumn="19" endcolumn="78" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="91" endline="91" begincolumn="19" endcolumn="66" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="96" endline="96" begincolumn="19" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="100" endline="100" begincolumn="19" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="104" endline="104" begincolumn="19" endcolumn="67" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="108" endline="108" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="171" endline="173" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" method="getHostname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="183" endline="183" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="191" endline="191" begincolumn="20" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" method="endTestSuite" variable="wri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Writer object are closed after use
</violation>
<violation beginline="192" endline="209" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="202" endline="204" begincolumn="23" endcolumn="21" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" method="endTestSuite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="224" endline="224" begincolumn="69" endcolumn="82" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLJUnitResultFormatter" method="createDescription" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junit/XMLResultAggregator.java">
<violation beginline="63" endline="63" begincolumn="15" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="63" endline="63" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="71" endline="71" begincolumn="15" endcolumn="42" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="71" endline="71" begincolumn="63" endcolumn="70" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="80" endline="80" begincolumn="19" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" variable="generatedId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'generatedId'
</violation>
<violation beginline="85" endline="86" begincolumn="5" endcolumn="68" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="90" endline="91" begincolumn="5" endcolumn="51" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="95" endline="96" begincolumn="5" endcolumn="80" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="145" endline="145" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="305" endline="305" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junit" class="XMLResultAggregator" method="getDocumentBuilder" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/AbstractJUnitResultFormatter.java">
<violation beginline="69" endline="71" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="77" endline="79" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="88" endline="90" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="99" endline="101" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="110" endline="113" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="122" endline="125" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="127" endline="133" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="135" endline="148" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="152" endline="152" begincolumn="23" endcolumn="24" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" method="writeFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'numRead' is never used (overwritten on line 154)
</violation>
<violation beginline="153" endline="153" begincolumn="14" endcolumn="52" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" method="writeFrom" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final
</violation>
<violation beginline="154" endline="154" begincolumn="20" endcolumn="55" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" method="writeFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="169" endline="169" begincolumn="19" endcolumn="46" rule="UselessQualifiedThis" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter" method="handleException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#uselessqualifiedthis" priority="3">
Useless qualified this usage in the same class.
</violation>
<violation beginline="194" endline="195" begincolumn="52" endcolumn="13" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter$SysOutErrContentStore" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="200" endline="200" begincolumn="25" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter$SysOutErrContentStore" variable="usingFileStore" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'usingFileStore'
</violation>
<violation beginline="248" endline="248" begincolumn="24" endcolumn="39" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter$SysOutErrContentStore" method="createFileStore" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="261" endline="261" begincolumn="47" endcolumn="56" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="AbstractJUnitResultFormatter$SysOutErrContentStore" method="getReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/JUnitLauncherTask.java">
<violation beginline="65" endline="66" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="JUnitLauncherTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="65" endline="66" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="JUnitLauncherTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="69" endline="69" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="88" endline="88" begincolumn="39" endcolumn="52" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" variable="originalSysOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="89" endline="89" begincolumn="39" endcolumn="52" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" variable="originalSysErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PrintStream object are closed after use
</violation>
<violation beginline="93" endline="93" begincolumn="51" endcolumn="138" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="98" endline="98" begincolumn="34" endcolumn="42" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="98" endline="100" begincolumn="27" endcolumn="25" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="103" endline="103" begincolumn="34" endcolumn="42" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="103" endline="105" begincolumn="27" endcolumn="25" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="111" endline="111" begincolumn="30" endcolumn="38" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="181" endline="181" begincolumn="18" endcolumn="56" rule="UnusedPrivateMethod" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="preConfigure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedprivatemethod" priority="3">
Avoid unused private methods such as 'preConfigure(TestDefinition)'.
</violation>
<violation beginline="238" endline="238" begincolumn="32" endcolumn="49" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="setupResultFormatter" variable="resultOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="270" endline="270" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="requireTestExecutionListener" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="287" endline="298" begincolumn="11" endcolumn="9" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="handleTestExecutionCompletion" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="329" endline="329" begincolumn="33" endcolumn="49" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="trySwitchSysOutErr" variable="pipedOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PipedOutputStream object are closed after use
</violation>
<violation beginline="330" endline="330" begincolumn="32" endcolumn="47" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="trySwitchSysOutErr" variable="pipedInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PipedInputStream object are closed after use
</violation>
<violation beginline="337" endline="337" begincolumn="27" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask" method="trySwitchSysOutErr" variable="printStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PipedOutputStream object are closed after use
</violation>
<violation beginline="398" endline="398" begincolumn="27" endcolumn="28" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask$SysOutErrStreamReader" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'numRead' is never used (overwritten on line 401)
</violation>
<violation beginline="401" endline="401" begincolumn="24" endcolumn="69" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask$SysOutErrStreamReader" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="465" endline="474" begincolumn="17" endcolumn="17" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask$SysOutErrContentDeliverer" method="deliver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="465" endline="474" begincolumn="17" endcolumn="17" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="JUnitLauncherTask$SysOutErrContentDeliverer" method="deliver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/LegacyPlainResultFormatter.java">
<violation beginline="46" endline="46" begincolumn="13" endcolumn="38" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'outputStream' could be replaced by a local variable.
</violation>
<violation beginline="65" endline="65" begincolumn="33" endcolumn="34" rule="ConsecutiveLiteralAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="testPlanExecutionFinished" variable="sb" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveliteralappends" priority="3">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.
</violation>
<violation beginline="65" endline="65" begincolumn="13" endcolumn="102" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="testPlanExecutionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="66" endline="66" begincolumn="13" endcolumn="73" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="testPlanExecutionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="73" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="testPlanExecutionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="118" endline="118" begincolumn="13" endcolumn="32" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="executionSkipped" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="187" endline="187" begincolumn="13" endcolumn="32" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="executionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="198" endline="209" begincolumn="13" endcolumn="13" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="executionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="198" endline="209" begincolumn="13" endcolumn="13" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="executionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="225" endline="234" begincolumn="9" endcolumn="9" rule="TooFewBranchesForASwitchStatement" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="executionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement" priority="3">
A switch with less than three branches is inefficient, use a if statement instead.
</violation>
<violation beginline="225" endline="234" begincolumn="9" endcolumn="9" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="executionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="248" endline="248" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyPlainResultFormatter" method="setDestination" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/LegacyXmlResultFormatter.java">
<violation beginline="99" endline="113" begincolumn="9" endcolumn="9" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter" method="executionFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="163" endline="172" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="174" endline="197" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="199" endline="212" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="214" endline="246" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="299" endline="299" begincolumn="18" endcolumn="86" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" method="writeSysOut" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final
</violation>
<violation beginline="310" endline="310" begincolumn="18" endcolumn="86" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" method="writeSysErr" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final
</violation>
<violation beginline="318" endline="318" begincolumn="27" endcolumn="28" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" method="writeCharactersFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'numRead' is never used (overwritten on line 319)
</violation>
<violation beginline="319" endline="319" begincolumn="20" endcolumn="55" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="LegacyXmlResultFormatter$XMLReportWriter" method="writeCharactersFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/ListenerDefinition.java">
<violation beginline="26" endline="28" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" method="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="26" endline="28" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" method="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="34" endline="36" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="38" endline="40" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="46" endline="48" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="55" endline="71" begincolumn="9" endcolumn="9" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" method="setType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="78" endline="90" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="96" endline="98" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="104" endline="106" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="ListenerDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/SingleTestClass.java">
<violation beginline="22" endline="24" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="SingleTestClass" method="SingleTestClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="22" endline="24" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="SingleTestClass" method="SingleTestClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="59" endline="61" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="SingleTestClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="63" endline="68" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="SingleTestClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="70" endline="97" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="SingleTestClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/TestClasses.java">
<violation beginline="19" endline="21" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses" method="TestClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="19" endline="21" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses" method="TestClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="27" endline="38" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="72" endline="75" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="77" endline="80" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="82" endline="85" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="87" endline="90" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="92" endline="95" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="97" endline="100" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="102" endline="105" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="107" endline="110" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestClasses$BatchSourcedSingleTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/TestDefinition.java">
<violation beginline="24" endline="26" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="32" endline="34" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="40" endline="42" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="44" endline="46" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="52" endline="54" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="64" endline="66" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="72" endline="74" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="76" endline="76" begincolumn="5" endcolumn="88" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="83" endline="85" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="91" endline="93" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="111" endline="111" begincolumn="16" endcolumn="54" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestDefinition" method="split" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/TestRequest.java">
<violation beginline="18" endline="18" begincolumn="19" endcolumn="83" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field interestedInSysOut has the same name as a method
</violation>
<violation beginline="19" endline="19" begincolumn="19" endcolumn="83" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field interestedInSysErr has the same name as a method
</violation>
<violation beginline="27" endline="29" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="31" endline="33" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="35" endline="40" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="42" endline="44" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="46" endline="48" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="50" endline="52" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="54" endline="56" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="58" endline="60" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="62" endline="64" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="66" endline="66" begincolumn="32" endcolumn="40" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="70" endline="70" begincolumn="30" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestRequest" method="close" variable="closeable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Closeable object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/TestResultFormatter.java">
<violation beginline="44" endline="45" begincolumn="47" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestResultFormatter" method="sysOutAvailable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="55" endline="56" begincolumn="47" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.junitlauncher" class="TestResultFormatter" method="sysErrAvailable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/BuiltinNative2Ascii.java">
<violation beginline="43" endline="43" begincolumn="5" endcolumn="56" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="BuiltinNative2Ascii" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="47" endline="47" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="BuiltinNative2Ascii" method="convert" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="64" endline="64" begincolumn="43" endcolumn="52" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="BuiltinNative2Ascii" method="getReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="70" endline="70" begincolumn="52" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="BuiltinNative2Ascii" method="getWriter" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'encoding'
</violation>
<violation beginline="76" endline="76" begincolumn="43" endcolumn="52" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="BuiltinNative2Ascii" method="getWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/DefaultNative2Ascii.java">
<violation beginline="36" endline="37" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="DefaultNative2Ascii" method="DefaultNative2Ascii" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="36" endline="37" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="DefaultNative2Ascii" method="DefaultNative2Ascii" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="52" endline="52" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="DefaultNative2Ascii" method="convert" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="71" endline="71" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="DefaultNative2Ascii" method="setup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="92" endline="92" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="DefaultNative2Ascii" method="addFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="106" endline="106" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="DefaultNative2Ascii" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/KaffeNative2Ascii.java">
<violation beginline="34" endline="38" begincolumn="35" endcolumn="5" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="KaffeNative2Ascii" variable="N2A_CLASSNAMES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="48" endline="48" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="KaffeNative2Ascii" method="setup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="58" endline="58" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="KaffeNative2Ascii" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="83" endline="85" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="KaffeNative2Ascii" method="getN2aClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/Native2AsciiAdapter.java">
<violation beginline="43" endline="43" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="Native2AsciiAdapter" method="convert" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/Native2AsciiAdapterFactory.java">
<violation beginline="61" endline="61" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="Native2AsciiAdapterFactory" method="getAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="81" endline="81" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="Native2AsciiAdapterFactory" method="getAdapter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="110" endline="110" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="Native2AsciiAdapterFactory" method="resolveClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="117" endline="119" begincolumn="26" endcolumn="5" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="Native2AsciiAdapterFactory" method="shouldUseKaffe" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on method 'shouldUseKaffe': private methods cannot be overridden
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/native2ascii/SunNative2Ascii.java">
<violation beginline="44" endline="44" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="SunNative2Ascii" method="setup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="54" endline="54" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="SunNative2Ascii" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="60" endline="63" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="SunNative2Ascii" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="64" endline="65" begincolumn="13" endcolumn="45" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="SunNative2Ascii" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="66" endline="66" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.native2ascii" class="SunNative2Ascii" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java">
<violation beginline="82" endline="2714" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like FTP
</violation>
<violation beginline="98" endline="98" begincolumn="52" endcolumn="57" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 60000L should separate every third digit with an underscore
</violation>
<violation beginline="102" endline="102" begincolumn="9" endcolumn="51" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="116" endline="116" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="passive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'passive'
</violation>
<violation beginline="117" endline="117" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="118" endline="118" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="newerOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newerOnly'
</violation>
<violation beginline="119" endline="119" begincolumn="18" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="timeDiffMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeDiffMillis'
</violation>
<violation beginline="120" endline="120" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="granularityMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'granularityMillis'
</violation>
<violation beginline="121" endline="121" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="timeDiffAuto" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeDiffAuto'
</violation>
<violation beginline="123" endline="123" begincolumn="13" endcolumn="27" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="123" endline="123" begincolumn="29" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="filesets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filesets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="123" endline="123" begincolumn="44" endcolumn="51" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="124" endline="124" begincolumn="23" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="dirCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'dirCache' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="125" endline="125" begincolumn="17" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="transferred" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'transferred'
</violation>
<violation beginline="128" endline="128" begincolumn="21" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="skipFailedTransfers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skipFailedTransfers'
</violation>
<violation beginline="129" endline="129" begincolumn="17" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="skipped" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skipped'
</violation>
<violation beginline="130" endline="130" begincolumn="21" endcolumn="51" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="ignoreNoncriticalErrors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreNoncriticalErrors'
</violation>
<violation beginline="131" endline="131" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="132" endline="132" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="chmod" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'chmod'
</violation>
<violation beginline="133" endline="133" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="umask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'umask'
</violation>
<violation beginline="135" endline="135" begincolumn="20" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="defaultDateFormatConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultDateFormatConfig'
</violation>
<violation beginline="136" endline="136" begincolumn="20" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="recentDateFormatConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'recentDateFormatConfig'
</violation>
<violation beginline="138" endline="138" begincolumn="20" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="serverTimeZoneConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'serverTimeZoneConfig'
</violation>
<violation beginline="139" endline="139" begincolumn="20" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="shortMonthNamesConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'shortMonthNamesConfig'
</violation>
<violation beginline="141" endline="141" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="isConfigurationSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isConfigurationSet'
</violation>
<violation beginline="142" endline="142" begincolumn="17" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="retriesAllowed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'retriesAllowed'
</violation>
<violation beginline="143" endline="143" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="siteCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'siteCommand'
</violation>
<violation beginline="144" endline="144" begincolumn="20" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" variable="initialSiteCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initialSiteCommand'
</violation>
<violation beginline="170" endline="170" begincolumn="9" endcolumn="15" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "files" appears 5 times in this file; the first occurrence is on line 170
</violation>
<violation beginline="337" endline="337" begincolumn="29" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="ftp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ftp'
</violation>
<violation beginline="337" endline="337" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'ftp' is never used (overwritten on line 355)
</violation>
<violation beginline="340" endline="340" begincolumn="24" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="rootPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rootPath'
</violation>
<violation beginline="346" endline="346" begincolumn="25" endcolumn="57" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="remoteSystemCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'remoteSystemCaseSensitive'
</violation>
<violation beginline="347" endline="347" begincolumn="25" endcolumn="56" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="remoteSensitivityChecked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'remoteSensitivityChecked'
</violation>
<violation beginline="376" endline="376" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="379" endline="379" begincolumn="35" endcolumn="42" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="415" endline="416" begincolumn="21" endcolumn="60" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="checkIncludePatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="432" endline="432" begincolumn="63" endcolumn="76" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="scanRoots" variable="currentelement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'currentelement'
</violation>
<violation beginline="432" endline="432" begincolumn="63" endcolumn="76" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="scanRoots" variable="currentelement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'currentelement'
</violation>
<violation beginline="503" endline="503" begincolumn="39" endcolumn="42" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="scandir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'completePath' is never used (overwritten on lines 505 and 508)
</violation>
<violation beginline="594" endline="594" begincolumn="33" endcolumn="97" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="accountForIncludedDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="602" endline="602" begincolumn="33" endcolumn="97" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="accountForIncludedDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="615" endline="615" begincolumn="29" endcolumn="93" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="accountForIncludedDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="628" endline="628" begincolumn="17" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="628" endline="628" begincolumn="40" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="fileListMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fileListMap' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="635" endline="635" begincolumn="17" endcolumn="72" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="635" endline="635" begincolumn="43" endcolumn="53" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" variable="scannedDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'scannedDirs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="718" endline="736" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="checkRemoteSensitivity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="746" endline="752" begincolumn="19" endcolumn="17" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner" method="checkRemoteSensitivity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="781" endline="781" begincolumn="31" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" variable="client" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'client' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="789" endline="789" begincolumn="29" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" variable="ftpFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ftpFile' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="793" endline="793" begincolumn="32" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" variable="parent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parent'
</violation>
<violation beginline="794" endline="794" begincolumn="29" endcolumn="58" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" variable="relativePathCalculated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'relativePathCalculated'
</violation>
<violation beginline="795" endline="795" begincolumn="29" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" variable="traversesSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'traversesSymlinks'
</violation>
<violation beginline="824" endline="825" begincolumn="21" endcolumn="77" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="833" endline="833" begincolumn="33" endcolumn="50" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'currentPathElement'
</violation>
<violation beginline="843" endline="843" begincolumn="29" endcolumn="50" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'getCurpwdPlusFileSep' called during object construction
</violation>
<violation beginline="845" endline="847" begincolumn="25" endcolumn="56" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="852" endline="852" begincolumn="32" endcolumn="65" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'getFile' called during object construction
</violation>
<violation beginline="937" endline="937" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="957" endline="957" begincolumn="51" endcolumn="61" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" variable="currentPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'currentPath'
</violation>
<violation beginline="957" endline="957" begincolumn="51" endcolumn="61" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" variable="currentPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'currentPath'
</violation>
<violation beginline="974" endline="974" begincolumn="37" endcolumn="38" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="980" endline="980" begincolumn="37" endcolumn="38" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="1071" endline="1071" begincolumn="69" endcolumn="82" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPFile" method="isTraverseSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1128" endline="1128" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPDirectoryScanner$AntFTPRootFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1173" endline="1179" begincolumn="19" endcolumn="17" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="isFunctioningAsDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="1416" endline="1416" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="setAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1434" endline="1434" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="setAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1581" endline="1583" begincolumn="17" endcolumn="36" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="setRetriesAllowed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1639" endline="1641" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1690" endline="1690" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="checkAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1724" endline="1725" begincolumn="17" endcolumn="106" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="checkAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1757" endline="1757" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1786" endline="1786" begincolumn="24" endcolumn="25" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="transferFiles" variable="bw" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="1788" endline="1840" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1795" endline="1795" begincolumn="45" endcolumn="54" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="1806" endline="1806" begincolumn="38" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="transferFiles" variable="fbw" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="1855" endline="1855" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1904" endline="1904" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="createParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1911" endline="1911" begincolumn="34" endcolumn="41" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="createParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1914" endline="1914" begincolumn="16" endcolumn="50" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="createParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1969" endline="1969" begincolumn="33" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="getTimeDiff" variable="instream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedInputStream object are closed after use
</violation>
<violation beginline="1987" endline="1987" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="getTimeDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="2039" endline="2039" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="isUpToDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2102" endline="2102" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="doSiteCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2134" endline="2134" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="sendFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2135" endline="2135" begincolumn="21" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="sendFile" variable="instream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="2137" endline="2178" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="sendFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="2190" endline="2190" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="delFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2220" endline="2220" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="rmDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2259" endline="2259" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="getFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2261" endline="2261" begincolumn="22" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="getFile" variable="outstream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="2262" endline="2307" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="getFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="2325" endline="2325" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="listFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2352" endline="2352" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="makeRemoteDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2404" endline="2404" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="handleMkDirFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2419" endline="2419" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="2480" endline="2480" begincolumn="47" endcolumn="49" rule="UselessQualifiedThis" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#uselessqualifiedthis" priority="3">
Useless qualified this usage in the same class.
</violation>
<violation beginline="2504" endline="2504" begincolumn="47" endcolumn="49" rule="UselessQualifiedThis" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#uselessqualifiedthis" priority="3">
Useless qualified this usage in the same class.
</violation>
<violation beginline="2534" endline="2536" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="2560" endline="2560" begincolumn="13" endcolumn="33" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$Action" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_ACTIONS' may expose an internal array.
</violation>
<violation beginline="2569" endline="2589" begincolumn="13" endcolumn="13" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$Action" method="getAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="2621" endline="2621" begincolumn="13" endcolumn="39" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$Granularity" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_GRANULARITIES' may expose an internal array.
</violation>
<violation beginline="2644" endline="2648" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$Granularity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="2669" endline="2669" begincolumn="13" endcolumn="38" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPSystemType" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_SYSTEM_TYPES' may expose an internal array.
</violation>
<violation beginline="2672" endline="2676" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$FTPSystemType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="2704" endline="2704" begincolumn="13" endcolumn="40" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$LanguageCode" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_LANGUAGE_CODES' may expose an internal array.
</violation>
<violation beginline="2707" endline="2711" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTP$LanguageCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPConfigurator.java">
<violation beginline="42" endline="98" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPConfigurator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTask.java">
<violation beginline="67" endline="67" begincolumn="52" endcolumn="57" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 60000L should separate every third digit with an underscore
</violation>
<violation beginline="79" endline="79" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="passive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'passive'
</violation>
<violation beginline="80" endline="80" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="81" endline="81" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="newerOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'newerOnly'
</violation>
<violation beginline="82" endline="82" begincolumn="18" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="timeDiffMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeDiffMillis'
</violation>
<violation beginline="83" endline="83" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="granularityMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'granularityMillis'
</violation>
<violation beginline="84" endline="84" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="timeDiffAuto" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeDiffAuto'
</violation>
<violation beginline="86" endline="86" begincolumn="13" endcolumn="27" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="86" endline="86" begincolumn="29" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="filesets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filesets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="86" endline="86" begincolumn="44" endcolumn="51" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="89" endline="89" begincolumn="21" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="skipFailedTransfers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skipFailedTransfers'
</violation>
<violation beginline="90" endline="90" begincolumn="21" endcolumn="51" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="ignoreNoncriticalErrors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreNoncriticalErrors'
</violation>
<violation beginline="91" endline="91" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="92" endline="92" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="chmod" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'chmod'
</violation>
<violation beginline="93" endline="93" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="umask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'umask'
</violation>
<violation beginline="95" endline="95" begincolumn="20" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="defaultDateFormatConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultDateFormatConfig'
</violation>
<violation beginline="96" endline="96" begincolumn="20" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="recentDateFormatConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'recentDateFormatConfig'
</violation>
<violation beginline="97" endline="97" begincolumn="20" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="serverLanguageCodeConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'serverLanguageCodeConfig'
</violation>
<violation beginline="98" endline="98" begincolumn="20" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="serverTimeZoneConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'serverTimeZoneConfig'
</violation>
<violation beginline="99" endline="99" begincolumn="20" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="shortMonthNamesConfig" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'shortMonthNamesConfig'
</violation>
<violation beginline="101" endline="101" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="isConfigurationSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isConfigurationSet'
</violation>
<violation beginline="101" endline="101" begincolumn="13" endcolumn="47" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field isConfigurationSet has the same name as a method
</violation>
<violation beginline="102" endline="102" begincolumn="17" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="retriesAllowed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'retriesAllowed'
</violation>
<violation beginline="103" endline="103" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="siteCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'siteCommand'
</violation>
<violation beginline="104" endline="104" begincolumn="20" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="initialSiteCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initialSiteCommand'
</violation>
<violation beginline="109" endline="109" begincolumn="27" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" variable="delegate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'delegate'
</violation>
<violation beginline="134" endline="134" begincolumn="9" endcolumn="15" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "files" appears 5 times in this file; the first occurrence is on line 134
</violation>
<violation beginline="399" endline="399" begincolumn="12" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="getFilesets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="419" endline="419" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="setAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="438" endline="438" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="setAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="602" endline="604" begincolumn="17" endcolumn="36" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="setRetriesAllowed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="727" endline="729" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="getEnableRemoteVerification" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="736" endline="736" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="checkAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="770" endline="771" begincolumn="17" endcolumn="106" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="checkAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="783" endline="783" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="845" endline="845" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask" method="createMirror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="869" endline="869" begincolumn="13" endcolumn="33" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask$Action" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_ACTIONS' may expose an internal array.
</violation>
<violation beginline="879" endline="899" begincolumn="13" endcolumn="13" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask$Action" method="getAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="931" endline="931" begincolumn="13" endcolumn="39" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask$Granularity" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_GRANULARITIES' may expose an internal array.
</violation>
<violation beginline="954" endline="958" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask$Granularity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="978" endline="978" begincolumn="13" endcolumn="38" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask$FTPSystemType" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALID_SYSTEM_TYPES' may expose an internal array.
</violation>
<violation beginline="981" endline="985" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTask$FTPSystemType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirror.java">
<violation beginline="23" endline="23" begincolumn="25" endcolumn="38" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirror" method="doFTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java">
<violation beginline="66" endline="66" begincolumn="9" endcolumn="51" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="71" endline="71" begincolumn="23" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" variable="dirCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'dirCache' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="72" endline="72" begincolumn="17" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" variable="transferred" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'transferred'
</violation>
<violation beginline="73" endline="73" begincolumn="17" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" variable="skipped" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skipped'
</violation>
<violation beginline="229" endline="229" begincolumn="29" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="ftp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ftp'
</violation>
<violation beginline="229" endline="229" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'ftp' is never used (overwritten on line 247)
</violation>
<violation beginline="232" endline="232" begincolumn="24" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="rootPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rootPath'
</violation>
<violation beginline="238" endline="238" begincolumn="25" endcolumn="57" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="remoteSystemCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'remoteSystemCaseSensitive'
</violation>
<violation beginline="239" endline="239" begincolumn="25" endcolumn="56" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="remoteSensitivityChecked" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'remoteSensitivityChecked'
</violation>
<violation beginline="267" endline="267" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="270" endline="270" begincolumn="35" endcolumn="42" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="305" endline="306" begincolumn="21" endcolumn="65" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="checkIncludePatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="486" endline="486" begincolumn="33" endcolumn="97" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="accountForIncludedDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="494" endline="494" begincolumn="33" endcolumn="97" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="accountForIncludedDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="507" endline="507" begincolumn="29" endcolumn="93" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="accountForIncludedDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="521" endline="521" begincolumn="17" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="521" endline="521" begincolumn="40" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="fileListMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fileListMap' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="529" endline="529" begincolumn="17" endcolumn="72" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="529" endline="529" begincolumn="43" endcolumn="53" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" variable="scannedDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'scannedDirs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="615" endline="633" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="checkRemoteSensitivity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="643" endline="649" begincolumn="19" endcolumn="17" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner" method="checkRemoteSensitivity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="679" endline="679" begincolumn="31" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" variable="client" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'client' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="687" endline="687" begincolumn="29" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" variable="ftpFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ftpFile' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="691" endline="691" begincolumn="32" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" variable="parent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parent'
</violation>
<violation beginline="692" endline="692" begincolumn="29" endcolumn="58" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" variable="relativePathCalculated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'relativePathCalculated'
</violation>
<violation beginline="693" endline="693" begincolumn="29" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" variable="traversesSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'traversesSymlinks'
</violation>
<violation beginline="725" endline="725" begincolumn="21" endcolumn="98" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="732" endline="732" begincolumn="33" endcolumn="50" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'currentPathElement'
</violation>
<violation beginline="740" endline="740" begincolumn="39" endcolumn="60" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'getCurpwdPlusFileSep' called during object construction
</violation>
<violation beginline="742" endline="743" begincolumn="25" endcolumn="65" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="747" endline="747" begincolumn="32" endcolumn="79" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="AntFTPFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'getFile' called during object construction
</violation>
<violation beginline="831" endline="831" begincolumn="65" endcolumn="78" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="851" endline="851" begincolumn="51" endcolumn="61" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" variable="currentPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'currentPath'
</violation>
<violation beginline="851" endline="851" begincolumn="51" endcolumn="61" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" variable="currentPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'currentPath'
</violation>
<violation beginline="871" endline="871" begincolumn="37" endcolumn="38" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="878" endline="878" begincolumn="37" endcolumn="38" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="969" endline="969" begincolumn="69" endcolumn="82" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPFile" method="isTraverseSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="992" endline="992" begincolumn="28" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPRootFile" variable="remotedir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'remotedir' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="1026" endline="1026" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl$FTPDirectoryScanner$AntFTPRootFile" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1071" endline="1077" begincolumn="19" endcolumn="17" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="isFunctioningAsDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="1122" endline="1122" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1133" endline="1133" begincolumn="28" endcolumn="31" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'dsfiles' is never used (overwritten on lines 1135 and 1137)
</violation>
<violation beginline="1153" endline="1208" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1160" endline="1160" begincolumn="45" endcolumn="54" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="1171" endline="1171" begincolumn="38" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="transferFiles" variable="fbw" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedWriter object are closed after use
</violation>
<violation beginline="1224" endline="1224" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="transferFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1276" endline="1276" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="createParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1283" endline="1283" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="createParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="1286" endline="1286" begincolumn="16" endcolumn="50" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="createParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1302" endline="1306" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="createParents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="1344" endline="1344" begincolumn="33" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="getTimeDiff" variable="instream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this BufferedInputStream object are closed after use
</violation>
<violation beginline="1361" endline="1361" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="getTimeDiff" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1413" endline="1413" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="isUpToDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1475" endline="1475" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="doSiteCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1508" endline="1508" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="sendFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1509" endline="1509" begincolumn="21" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="sendFile" variable="instream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="1511" endline="1551" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="sendFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1563" endline="1563" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="delFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1593" endline="1593" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="rmDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1631" endline="1631" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="getFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1632" endline="1632" begincolumn="22" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="getFile" variable="outstream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="1633" endline="1681" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="getFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="1699" endline="1699" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="listFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1725" endline="1725" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="makeRemoteDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1775" endline="1775" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="handleMkDirFailure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1785" endline="1785" begincolumn="32" endcolumn="45" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="doFTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="1900" endline="1902" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="FTPTaskMirrorImpl" method="doFTP" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/MimeMail.java">
<violation beginline="40" endline="40" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="MimeMail" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/RExecTask.java">
<violation beginline="46" endline="46" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" variable="userid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'userid'
</violation>
<violation beginline="51" endline="51" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="56" endline="56" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'command'
</violation>
<violation beginline="61" endline="61" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" variable="server" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'server'
</violation>
<violation beginline="71" endline="71" begincolumn="32" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" variable="rexecTasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'rexecTasks' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="71" endline="71" begincolumn="49" endcolumn="56" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="76" endline="76" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" variable="addCarriageReturn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'addCarriageReturn'
</violation>
<violation beginline="82" endline="82" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" variable="defaultTimeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultTimeout'
</violation>
<violation beginline="99" endline="99" begincolumn="24" endcolumn="37" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$RExecSubTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="132" endline="132" begincolumn="23" endcolumn="36" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$RExecWrite" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="151" endline="151" begincolumn="25" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$RExecRead" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeout'
</violation>
<violation beginline="159" endline="159" begincolumn="23" endcolumn="36" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$RExecRead" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="205" endline="205" begincolumn="25" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="waitForString" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="234" endline="236" begincolumn="15" endcolumn="13" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="waitForString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="236" endline="236" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="waitForString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="247" endline="247" begincolumn="26" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="sendString" variable="os" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="254" endline="254" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="sendString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="265" endline="265" begincolumn="25" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="waitForEOF" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="270" endline="270" begincolumn="28" endcolumn="51" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="waitForEOF" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="306" endline="308" begincolumn="15" endcolumn="13" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="waitForEOF" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="308" endline="308" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask$AntRExecClient" method="waitForEOF" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="346" endline="346" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="369" endline="369" begincolumn="17" endcolumn="71" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="385" endline="398" begincolumn="11" endcolumn="9" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="392" endline="392" begincolumn="25" endcolumn="54" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="RExecTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/SetProxy.java">
<violation beginline="59" endline="283" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'SetProxy' is suspected to be a Data Class (WOC=22.222%, NOPA=0, NOAM=7, WMC=21)
</violation>
<violation beginline="66" endline="66" begincolumn="22" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy" variable="proxyHost" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'proxyHost'
</violation>
<violation beginline="78" endline="78" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy" variable="socksProxyHost" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'socksProxyHost'
</violation>
<violation beginline="89" endline="89" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy" variable="nonProxyHosts" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nonProxyHosts'
</violation>
<violation beginline="94" endline="94" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy" variable="proxyUser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'proxyUser'
</violation>
<violation beginline="99" endline="99" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy" variable="proxyPassword" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'proxyPassword'
</violation>
<violation beginline="264" endline="264" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="272" endline="272" begincolumn="40" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="SetProxy$ProxyAuth" variable="auth" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'auth' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/net/TelnetTask.java">
<violation beginline="44" endline="44" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" variable="userid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'userid'
</violation>
<violation beginline="49" endline="49" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="54" endline="54" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" variable="server" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'server'
</violation>
<violation beginline="64" endline="64" begincolumn="33" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" variable="telnetTasks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'telnetTasks' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="64" endline="64" begincolumn="51" endcolumn="58" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="69" endline="69" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" variable="addCarriageReturn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'addCarriageReturn'
</violation>
<violation beginline="75" endline="75" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" variable="defaultTimeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'defaultTimeout'
</violation>
<violation beginline="84" endline="84" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="107" endline="107" begincolumn="16" endcolumn="70" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="121" endline="134" begincolumn="10" endcolumn="8" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="128" endline="128" begincolumn="25" endcolumn="54" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="241" endline="241" begincolumn="24" endcolumn="37" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$TelnetSubTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="274" endline="274" begincolumn="23" endcolumn="36" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$TelnetWrite" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="293" endline="293" begincolumn="25" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$TelnetRead" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timeout'
</violation>
<violation beginline="301" endline="301" begincolumn="23" endcolumn="36" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$TelnetRead" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="347" endline="347" begincolumn="25" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$AntTelnetClient" method="waitForString" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="378" endline="380" begincolumn="15" endcolumn="13" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$AntTelnetClient" method="waitForString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="380" endline="380" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$AntTelnetClient" method="waitForString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="391" endline="391" begincolumn="26" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$AntTelnetClient" method="sendString" variable="os" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="398" endline="398" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.net" class="TelnetTask$AntTelnetClient" method="sendString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/pvcs/Pvcs.java">
<violation beginline="74" endline="643" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Pvcs
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="94" endline="94" begincolumn="33" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" variable="pvcsProjects" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'pvcsProjects' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="113" endline="113" begincolumn="28" endcolumn="35" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="Pvcs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="141" endline="141" begincolumn="26" endcolumn="45" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="runCmd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Failed executing: " appears 4 times in this file; the first occurrence is on line 141
</violation>
<violation beginline="143" endline="143" begincolumn="13" endcolumn="57" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="runCmd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="163" endline="163" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="164" endline="164" begincolumn="22" endcolumn="22" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'result' is never used (overwritten on line 218)
</violation>
<violation beginline="214" endline="214" begincolumn="26" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="execute" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="217" endline="222" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="287" endline="287" begincolumn="13" endcolumn="57" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="302" endline="302" begincolumn="57" endcolumn="66" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="createFolders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="312" endline="312" begincolumn="28" endcolumn="73" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="createFolders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="313" endline="313" begincolumn="28" endcolumn="74" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="createFolders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="355" endline="355" begincolumn="63" endcolumn="72" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="massagePCLI" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="356" endline="356" begincolumn="67" endcolumn="76" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="massagePCLI" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="451" endline="451" begincolumn="12" endcolumn="30" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="getPvcsprojects" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="571" endline="573" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="getIgnoreReturnCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="596" endline="598" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="Pvcs" method="getUpdateOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/pvcs/PvcsProject.java">
<violation beginline="34" endline="34" begincolumn="9" endcolumn="19" rule="UselessQualifiedThis" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.pvcs" class="PvcsProject" method="setName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#uselessqualifiedthis" priority="3">
Useless qualified this usage in the same class.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/script/ScriptDef.java">
<violation beginline="50" endline="50" begincolumn="32" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.script" class="ScriptDef" variable="helper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'helper' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="56" endline="56" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.script" class="ScriptDef" variable="attributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'attributes' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="59" endline="59" begincolumn="33" endcolumn="46" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.script" class="ScriptDef" variable="nestedElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nestedElements' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/script/ScriptDefBase.java">
<violation beginline="39" endline="39" begincolumn="39" endcolumn="54" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.script" class="ScriptDefBase" variable="nestedElementMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nestedElementMap' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="42" endline="42" begincolumn="33" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.script" class="ScriptDefBase" variable="attributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'attributes' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/sos/SOS.java">
<violation beginline="38" endline="480" begincolumn="17" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like SOS
</violation>
<violation beginline="42" endline="42" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="sosCmdDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sosCmdDir'
</violation>
<violation beginline="43" endline="43" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="sosUsername" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sosUsername'
</violation>
<violation beginline="44" endline="44" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="sosPassword" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sosPassword'
</violation>
<violation beginline="45" endline="45" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="projectPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'projectPath'
</violation>
<violation beginline="46" endline="46" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="vssServerPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'vssServerPath'
</violation>
<violation beginline="47" endline="47" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="sosServerPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sosServerPath'
</violation>
<violation beginline="48" endline="48" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="sosHome" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sosHome'
</violation>
<violation beginline="49" endline="49" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="localPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'localPath'
</violation>
<violation beginline="50" endline="50" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="version" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'version'
</violation>
<violation beginline="51" endline="51" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="label" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'label'
</violation>
<violation beginline="52" endline="52" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="comment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'comment'
</violation>
<violation beginline="53" endline="53" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="filename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filename'
</violation>
<violation beginline="55" endline="55" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="noCompress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'noCompress'
</violation>
<violation beginline="56" endline="56" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="noCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'noCache'
</violation>
<violation beginline="57" endline="57" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="recursive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'recursive'
</violation>
<violation beginline="58" endline="58" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="383" endline="383" begincolumn="5" endcolumn="40" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="393" endline="393" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="394" endline="394" begincolumn="22" endcolumn="22" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOS" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'result' is never used (overwritten on line 396)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/sos/SOSCmd.java">
<violation beginline="28" endline="28" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="30" endline="30" begincolumn="5" endcolumn="40" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="32" endline="32" begincolumn="5" endcolumn="46" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="34" endline="34" begincolumn="5" endcolumn="50" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="36" endline="36" begincolumn="5" endcolumn="56" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="38" endline="38" begincolumn="5" endcolumn="48" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="40" endline="40" begincolumn="5" endcolumn="54" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="42" endline="42" begincolumn="5" endcolumn="46" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="44" endline="44" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="46" endline="46" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="50" endline="50" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="52" endline="52" begincolumn="5" endcolumn="41" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="54" endline="54" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="56" endline="56" begincolumn="5" endcolumn="39" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="58" endline="58" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="60" endline="60" begincolumn="5" endcolumn="41" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="62" endline="62" begincolumn="5" endcolumn="41" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="64" endline="64" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="66" endline="66" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="68" endline="68" begincolumn="5" endcolumn="47" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="70" endline="70" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="72" endline="72" begincolumn="5" endcolumn="39" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="74" endline="74" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="76" endline="76" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="78" endline="78" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="80" endline="80" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sos" class="SOSCmd" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/sound/AntSoundPlayer.java">
<violation beginline="55" endline="55" begincolumn="18" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" variable="fileSuccess" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fileSuccess'
</violation>
<violation beginline="56" endline="56" begincolumn="17" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" variable="loopsSuccess" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'loopsSuccess'
</violation>
<violation beginline="57" endline="57" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" variable="durationSuccess" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'durationSuccess'
</violation>
<violation beginline="59" endline="59" begincolumn="18" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" variable="fileFail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fileFail'
</violation>
<violation beginline="60" endline="60" begincolumn="17" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" variable="loopsFail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'loopsFail'
</violation>
<violation beginline="61" endline="61" begincolumn="18" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" variable="durationFail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'durationFail'
</violation>
<violation beginline="97" endline="97" begincolumn="14" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="play" variable="audioClip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Clip object are closed after use
</violation>
<violation beginline="99" endline="99" begincolumn="26" endcolumn="41" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="play" variable="audioInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AudioInputStream object are closed after use
</violation>
<violation beginline="107" endline="107" begincolumn="13" endcolumn="33" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="play" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="113" endline="135" begincolumn="13" endcolumn="13" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="play" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="122" endline="122" begincolumn="21" endcolumn="39" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="play" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="180" endline="180" begincolumn="18" endcolumn="21" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="update" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Line object are closed after use
</violation>
<violation beginline="191" endline="192" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="buildStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="216" endline="217" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="targetStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="226" endline="227" begincolumn="50" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="targetFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="235" endline="236" begincolumn="47" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="taskStarted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="245" endline="246" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="taskFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="255" endline="256" begincolumn="49" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="AntSoundPlayer" method="messageLogged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/sound/SoundTask.java">
<violation beginline="49" endline="49" begincolumn="24" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask" variable="success" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'success'
</violation>
<violation beginline="50" endline="50" begincolumn="24" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask" variable="fail" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fail'
</violation>
<violation beginline="71" endline="72" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask" method="SoundTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="71" endline="72" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask" method="SoundTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="77" endline="78" begincolumn="24" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="109" endline="190" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask$BuildAlert" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'BuildAlert' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=12)
</violation>
<violation beginline="110" endline="110" begincolumn="22" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask$BuildAlert" variable="source" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'source'
</violation>
<violation beginline="111" endline="111" begincolumn="21" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask$BuildAlert" variable="loops" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'loops'
</violation>
<violation beginline="112" endline="112" begincolumn="22" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask$BuildAlert" variable="duration" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'duration'
</violation>
<violation beginline="150" endline="150" begincolumn="46" endcolumn="53" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask$BuildAlert" method="getSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="157" endline="157" begincolumn="25" endcolumn="34" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.sound" class="SoundTask$BuildAlert" method="getSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/splash/SplashScreen.java">
<violation beginline="62" endline="62" begincolumn="9" endcolumn="20" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashScreen" method="SplashScreen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setText' called during object construction
</violation>
<violation beginline="67" endline="67" begincolumn="9" endcolumn="46" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashScreen" method="SplashScreen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'init' called during object construction
</violation>
<violation beginline="75" endline="75" begincolumn="32" endcolumn="42" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashScreen" method="init" variable="displayText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'displayText'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/splash/SplashTask.java">
<violation beginline="42" endline="287" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'SplashTask' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=8, WMC=32)
</violation>
<violation beginline="45" endline="45" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="imgurl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'imgurl'
</violation>
<violation beginline="46" endline="46" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="proxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'proxy'
</violation>
<violation beginline="47" endline="47" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="user" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'user'
</violation>
<violation beginline="48" endline="48" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="51" endline="51" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="useProxy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'useProxy'
</violation>
<violation beginline="52" endline="52" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="progressRegExp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'progressRegExp'
</violation>
<violation beginline="53" endline="53" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="displayText" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'displayText'
</violation>
<violation beginline="56" endline="56" begincolumn="33" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" variable="splash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'splash'
</violation>
<violation beginline="161" endline="161" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="174" endline="174" begincolumn="38" endcolumn="41" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'conn' is never used (overwritten on lines 193 and 208)
</violation>
<violation beginline="219" endline="224" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="230" endline="230" begincolumn="17" endcolumn="72" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'in' is reassigned, but the original instance is not closed
</violation>
<violation beginline="242" endline="242" begincolumn="24" endcolumn="48" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="252" endline="254" begincolumn="19" endcolumn="17" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="255" endline="255" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="257" endline="258" begincolumn="15" endcolumn="13" rule="EmptyFinallyBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptyfinallyblock" priority="3">
Avoid empty finally blocks
</violation>
<violation beginline="264" endline="266" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.splash" class="SplashTask" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/AbstractSshMessage.java">
<violation beginline="121" endline="121" begincolumn="29" endcolumn="42" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="waitForAck" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="200" endline="202" begincolumn="21" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="getVerbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="209" endline="211" begincolumn="21" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="getCompressed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="229" endline="229" begincolumn="28" endcolumn="34" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="trackProgress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 1048576 should separate every third digit with an underscore
</violation>
<violation beginline="232" endline="232" begincolumn="25" endcolumn="42" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="trackProgress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="234" endline="234" begincolumn="25" endcolumn="40" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="trackProgress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.print is used
</violation>
<violation beginline="239" endline="239" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="trackProgress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="241" endline="241" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="trackProgress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="243" endline="243" begincolumn="21" endcolumn="36" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" method="trackProgress" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.print is used
</violation>
<violation beginline="252" endline="252" begincolumn="29" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" variable="monitor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'monitor'
</violation>
<violation beginline="252" endline="252" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="266" endline="266" begincolumn="22" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage$ProgressMonitor" variable="initFileSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initFileSize'
</violation>
<violation beginline="267" endline="267" begincolumn="22" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage$ProgressMonitor" variable="totalLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'totalLength'
</violation>
<violation beginline="268" endline="268" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage$ProgressMonitor" variable="percentTransmitted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'percentTransmitted'
</violation>
<violation beginline="285" endline="286" begincolumn="27" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.ssh" class="AbstractSshMessage$ProgressMonitor" method="end" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/Directory.java">
<violation beginline="34" endline="34" begincolumn="13" endcolumn="27" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Directory" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHBase.java">
<violation beginline="34" endline="290" begincolumn="17" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHBase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'SSHBase' is suspected to be a Data Class (WOC=30.000%, NOPA=0, NOAM=13, WMC=31)
</violation>
<violation beginline="46" endline="46" begincolumn="17" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHBase" variable="serverAliveIntervalSeconds" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'serverAliveIntervalSeconds'
</violation>
<violation beginline="87" endline="89" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHBase" method="getFailonerror" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="105" endline="107" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHBase" method="getVerbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="232" endline="232" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHBase" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHExec.java">
<violation beginline="56" endline="56" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="command" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'command'
</violation>
<violation beginline="59" endline="59" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="maxwait" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'maxwait'
</violation>
<violation beginline="62" endline="62" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="thread" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'thread'
</violation>
<violation beginline="64" endline="64" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="outputProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputProperty'
</violation>
<violation beginline="65" endline="65" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="errorProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errorProperty'
</violation>
<violation beginline="66" endline="66" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="resultProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resultProperty'
</violation>
<violation beginline="67" endline="67" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="outputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputFile'
</violation>
<violation beginline="68" endline="68" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="errorFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errorFile'
</violation>
<violation beginline="69" endline="69" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="inputProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inputProperty'
</violation>
<violation beginline="70" endline="70" begincolumn="20" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="inputString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inputString'
</violation>
<violation beginline="71" endline="71" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="inputFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'inputFile'
</violation>
<violation beginline="72" endline="72" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="append" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'append'
</violation>
<violation beginline="73" endline="73" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="appenderr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'appenderr'
</violation>
<violation beginline="74" endline="74" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="usePty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'usePty'
</violation>
<violation beginline="75" endline="75" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="useSystemIn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'useSystemIn'
</violation>
<violation beginline="77" endline="77" begincolumn="22" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="commandResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'commandResource'
</violation>
<violation beginline="85" endline="85" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="suppressSystemOut" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressSystemOut'
</violation>
<violation beginline="90" endline="90" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" variable="suppressSystemErr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressSystemErr'
</violation>
<violation beginline="95" endline="97" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="SSHExec" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="281" endline="281" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="318" endline="319" begincolumn="22" endcolumn="76" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="execute" variable="br" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on resource specification 'br': resource specifications are implicitly final
</violation>
<violation beginline="331" endline="331" begincolumn="25" endcolumn="44" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Caught exception: " appears 4 times in this file; the first occurrence is on line 331
</violation>
<violation beginline="350" endline="350" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="executeCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="356" endline="356" begincolumn="21" endcolumn="27" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="executeCommand" variable="istream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="382" endline="471" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="executeCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="405" endline="405" begincolumn="44" endcolumn="52" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="executeCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="405" endline="407" begincolumn="31" endcolumn="29" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="executeCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="449" endline="451" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="executeCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="463" endline="463" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="executeCommand" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="484" endline="484" begincolumn="35" endcolumn="44" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="writeToFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="485" endline="485" begincolumn="32" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHExec" method="writeToFile" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this StringReader object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHSession.java">
<violation beginline="44" endline="44" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" variable="maxwait" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'maxwait'
</violation>
<violation beginline="46" endline="46" begincolumn="56" endcolumn="63" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="48" endline="48" begincolumn="58" endcolumn="65" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="50" endline="50" begincolumn="30" endcolumn="52" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" variable="nestedSequential" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nestedSequential'
</violation>
<violation beginline="57" endline="57" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="131" endline="131" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="179" endline="182" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="182" endline="182" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="206" endline="251" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$LocalTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'LocalTunnel' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=14)
</violation>
<violation beginline="208" endline="208" begincolumn="13" endcolumn="21" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$LocalTunnel" variable="lport" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lport'
</violation>
<violation beginline="208" endline="208" begincolumn="9" endcolumn="22" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$LocalTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="209" endline="209" begincolumn="16" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$LocalTunnel" variable="rhost" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rhost'
</violation>
<violation beginline="209" endline="209" begincolumn="9" endcolumn="28" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$LocalTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="210" endline="210" begincolumn="13" endcolumn="21" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$LocalTunnel" variable="rport" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rport'
</violation>
<violation beginline="210" endline="210" begincolumn="9" endcolumn="22" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$LocalTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="253" endline="298" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$RemoteTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'RemoteTunnel' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=14)
</violation>
<violation beginline="255" endline="255" begincolumn="13" endcolumn="21" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$RemoteTunnel" variable="lport" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lport'
</violation>
<violation beginline="255" endline="255" begincolumn="9" endcolumn="22" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$RemoteTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="256" endline="256" begincolumn="16" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$RemoteTunnel" variable="lhost" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lhost'
</violation>
<violation beginline="256" endline="256" begincolumn="9" endcolumn="28" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$RemoteTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="257" endline="257" begincolumn="13" endcolumn="21" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$RemoteTunnel" variable="rport" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rport'
</violation>
<violation beginline="257" endline="257" begincolumn="9" endcolumn="22" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHSession$RemoteTunnel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/SSHUserInfo.java">
<violation beginline="31" endline="31" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHUserInfo" variable="password" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'password'
</violation>
<violation beginline="33" endline="33" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHUserInfo" variable="passphrase" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'passphrase'
</violation>
<violation beginline="130" endline="132" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="SSHUserInfo" method="getTrust" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/Scp.java">
<violation beginline="47" endline="557" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Scp
</violation>
<violation beginline="57" endline="57" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="58" endline="58" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" variable="compressed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'compressed'
</violation>
<violation beginline="59" endline="59" begincolumn="38" endcolumn="47" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" variable="rcs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rcs'
</violation>
<violation beginline="60" endline="60" begincolumn="13" endcolumn="45" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="61" endline="61" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" variable="isSftp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isSftp'
</violation>
<violation beginline="62" endline="62" begincolumn="13" endcolumn="38" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="252" endline="252" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="264" endline="264" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="287" endline="287" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="289" endline="289" begincolumn="21" endcolumn="21" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
<violation beginline="294" endline="294" begincolumn="21" endcolumn="29" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="309" endline="309" begincolumn="38" endcolumn="41" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="download" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'message' is never used (overwritten on lines 312 and 319)
</violation>
<violation beginline="388" endline="388" begincolumn="36" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="upload" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'message' is never used (overwritten on lines 391 and 396)
</violation>
<violation beginline="548" endline="548" begincolumn="39" endcolumn="58" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="Scp" method="exactlyOne" variable="attrs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpFromMessage.java">
<violation beginline="43" endline="43" begincolumn="50" endcolumn="55" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 102400 should separate every third digit with an underscore
</violation>
<violation beginline="49" endline="49" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" variable="isRecursive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isRecursive'
</violation>
<violation beginline="50" endline="50" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" variable="preserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'preserveLastModified'
</violation>
<violation beginline="159" endline="159" begincolumn="21" endcolumn="22" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="161" endline="161" begincolumn="17" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="165" endline="165" begincolumn="32" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="execute" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="166" endline="166" begincolumn="31" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="execute" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="180" endline="182" begincolumn="15" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="getPreserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="258" endline="258" begincolumn="33" endcolumn="40" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="fetchFile" variable="filesize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'filesize'
</violation>
<violation beginline="278" endline="304" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="fetchFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="312" endline="312" begincolumn="36" endcolumn="39" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessage" method="setLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'fileAttributes' is never used (overwritten on line 316)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpFromMessageBySftp.java">
<violation beginline="38" endline="38" begincolumn="50" endcolumn="55" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 102400 should separate every third digit with an underscore
</violation>
<violation beginline="43" endline="43" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" variable="isRecursive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isRecursive'
</violation>
<violation beginline="43" endline="43" begincolumn="13" endcolumn="40" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'isRecursive' could be replaced by a local variable.
</violation>
<violation beginline="45" endline="45" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" variable="verbose" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'verbose'
</violation>
<violation beginline="45" endline="45" begincolumn="13" endcolumn="36" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'verbose' could be replaced by a local variable.
</violation>
<violation beginline="118" endline="120" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="138" endline="140" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" method="getDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="166" endline="166" begincolumn="31" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" method="getFile" variable="localFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'localFile'
</violation>
<violation beginline="172" endline="174" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpFromMessageBySftp" method="getFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessage.java">
<violation beginline="38" endline="38" begincolumn="50" endcolumn="55" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 102400 should separate every third digit with an underscore
</violation>
<violation beginline="40" endline="40" begincolumn="49" endcolumn="52" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="41" endline="41" begincolumn="50" endcolumn="53" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="46" endline="46" begincolumn="13" endcolumn="38" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="252" endline="252" begincolumn="32" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="doSingleTransfer" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="253" endline="253" begincolumn="31" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="doSingleTransfer" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="277" endline="277" begincolumn="32" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="doMultipleTransfer" variable="out" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="278" endline="278" begincolumn="31" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="doMultipleTransfer" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="296" endline="298" begincolumn="9" endcolumn="9" rule="ForLoopCanBeForeach" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopcanbeforeach" priority="3">
This for loop can be replaced by a foreach loop
</violation>
<violation beginline="299" endline="301" begincolumn="9" endcolumn="9" rule="ForLoopCanBeForeach" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopcanbeforeach" priority="3">
This for loop can be replaced by a foreach loop
</violation>
<violation beginline="309" endline="309" begincolumn="17" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendDirectoryToRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="310" endline="310" begincolumn="17" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendDirectoryToRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="311" endline="311" begincolumn="17" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendDirectoryToRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="340" endline="340" begincolumn="17" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendFileToRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="341" endline="341" begincolumn="17" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendFileToRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="342" endline="342" begincolumn="17" endcolumn="18" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="sendFileToRemote" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="447" endline="449" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessage" method="getPreserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/ssh/ScpToMessageBySftp.java">
<violation beginline="37" endline="37" begincolumn="50" endcolumn="55" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessageBySftp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 102400 should separate every third digit with an underscore
</violation>
<violation beginline="224" endline="224" begincolumn="29" endcolumn="30" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessageBySftp" method="doMultipleTransfer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="239" endline="241" begincolumn="9" endcolumn="9" rule="ForLoopCanBeForeach" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessageBySftp" method="sendDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopcanbeforeach" priority="3">
This for loop can be replaced by a foreach loop
</violation>
<violation beginline="242" endline="244" begincolumn="9" endcolumn="9" rule="ForLoopCanBeForeach" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessageBySftp" method="sendDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopcanbeforeach" priority="3">
This for loop can be replaced by a foreach loop
</violation>
<violation beginline="267" endline="267" begincolumn="42" endcolumn="51" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessageBySftp" method="sendFileToRemote" variable="remotePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'remotePath'
</violation>
<violation beginline="349" endline="351" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.ssh" class="ScpToMessageBySftp" method="getPreserveLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/testing/BlockFor.java">
<violation beginline="58" endline="58" begincolumn="44" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.testing" class="BlockFor" method="processTimeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/testing/BuildTimeoutException.java">
<violation beginline="38" endline="39" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.optional.testing" class="BuildTimeoutException" method="BuildTimeoutException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/testing/Funtest.java">
<violation beginline="87" endline="87" begincolumn="13" endcolumn="32" rule="SingularField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.testing" class="Funtest" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'timedTests' could be replaced by a local variable.
</violation>
<violation beginline="396" endline="396" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.testing" class="Funtest" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/unix/AbstractAccessTask.java">
<violation beginline="53" endline="53" begincolumn="9" endcolumn="40" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.unix" class="AbstractAccessTask" method="AbstractAccessTask" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setSkipEmptyFilesets' called during object construction
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/unix/Chgrp.java">
<violation beginline="43" endline="43" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.unix" class="Chgrp" variable="haveGroup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haveGroup'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/unix/Chown.java">
<violation beginline="43" endline="43" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.unix" class="Chown" variable="haveOwner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haveOwner'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/unix/Symlink.java">
<violation beginline="110" endline="110" begincolumn="27" endcolumn="34" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" variable="fileSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fileSets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="114" endline="114" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" variable="executing" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'executing'
</violation>
<violation beginline="121" endline="121" begincolumn="31" endcolumn="44" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="131" endline="131" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="131" endline="142" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="149" endline="149" begincolumn="33" endcolumn="46" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="single" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="170" endline="170" begincolumn="33" endcolumn="46" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="delete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="198" endline="198" begincolumn="35" endcolumn="48" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="recreate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="240" endline="240" begincolumn="33" endcolumn="46" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="record" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="319" endline="321" begincolumn="12" endcolumn="5" rule="UselessOverridingMethod" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="setAction" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#uselessoverridingmethod" priority="3">
Overriding method merely calls super
</violation>
<violation beginline="412" endline="412" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="writePropertyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="442" endline="442" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="doLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="454" endline="454" begincolumn="82" endcolumn="94" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.unix" class="Symlink" method="doLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " to target " appears 4 times in this file; the first occurrence is on line 454
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSS.java">
<violation beginline="53" endline="53" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="ssDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ssDir'
</violation>
<violation beginline="54" endline="54" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="vssLogin" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'vssLogin'
</violation>
<violation beginline="55" endline="55" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="vssPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'vssPath'
</violation>
<violation beginline="56" endline="56" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="serverPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'serverPath'
</violation>
<violation beginline="59" endline="59" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="version" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'version'
</violation>
<violation beginline="61" endline="61" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="date" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'date'
</violation>
<violation beginline="63" endline="63" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="label" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'label'
</violation>
<violation beginline="65" endline="65" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="autoResponse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'autoResponse'
</violation>
<violation beginline="67" endline="67" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="localPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'localPath'
</violation>
<violation beginline="69" endline="69" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="comment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'comment'
</violation>
<violation beginline="71" endline="71" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="fromLabel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fromLabel'
</violation>
<violation beginline="73" endline="73" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="toLabel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'toLabel'
</violation>
<violation beginline="75" endline="75" begincolumn="20" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="outputFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputFileName'
</violation>
<violation beginline="77" endline="77" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="user" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'user'
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="fromDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fromDate'
</violation>
<violation beginline="81" endline="81" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="toDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'toDate'
</violation>
<violation beginline="83" endline="83" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="style" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'style'
</violation>
<violation beginline="85" endline="85" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="quiet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'quiet'
</violation>
<violation beginline="87" endline="87" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="recursive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'recursive'
</violation>
<violation beginline="89" endline="89" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="writable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'writable'
</violation>
<violation beginline="99" endline="99" begincolumn="31" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="timestamp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'timestamp'
</violation>
<violation beginline="101" endline="101" begincolumn="27" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" variable="writableFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'writableFiles'
</violation>
<violation beginline="109" endline="109" begincolumn="5" endcolumn="40" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="181" endline="181" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="181" endline="189" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'execute()' is missing an @Override annotation.
</violation>
<violation beginline="521" endline="521" begincolumn="13" endcolumn="46" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="getAutoresponse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="523" endline="523" begincolumn="20" endcolumn="53" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="getAutoresponse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="600" endline="600" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="getVersionDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="613" endline="613" begincolumn="17" endcolumn="61" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="getVersionDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="621" endline="621" begincolumn="17" endcolumn="61" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="getVersionDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="641" endline="643" begincolumn="13" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS" method="getFailOnError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="769" endline="771" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS$CurrentModUpdated" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
<violation beginline="782" endline="784" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSS$WritableFiles" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSADD.java">
<violation beginline="32" endline="32" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSADD" variable="localPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'localPath'
</violation>
<violation beginline="38" endline="67" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSADD" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
<violation beginline="74" endline="76" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSADD" method="getLocalpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalpath()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCHECKIN.java">
<violation beginline="36" endline="67" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSCHECKIN" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCHECKOUT.java">
<violation beginline="37" endline="72" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSCHECKOUT" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCP.java">
<violation beginline="36" endline="59" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSCP" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSCREATE.java">
<violation beginline="35" endline="63" begincolumn="5" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSCREATE" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
<violation beginline="35" endline="63" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSCREATE" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSConstants.java">
<violation beginline="27" endline="27" begincolumn="5" endcolumn="25" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="29" endline="29" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="32" endline="32" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="34" endline="34" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="36" endline="36" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="38" endline="38" begincolumn="5" endcolumn="41" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="40" endline="40" begincolumn="5" endcolumn="39" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="42" endline="42" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="44" endline="44" begincolumn="5" endcolumn="39" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="46" endline="46" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="49" endline="49" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="51" endline="51" begincolumn="5" endcolumn="39" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="53" endline="53" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="55" endline="55" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="58" endline="58" begincolumn="5" endcolumn="36" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="60" endline="60" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="62" endline="62" begincolumn="5" endcolumn="36" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="65" endline="65" begincolumn="5" endcolumn="40" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="67" endline="67" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="69" endline="69" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="72" endline="72" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="74" endline="74" begincolumn="5" endcolumn="45" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="76" endline="76" begincolumn="5" endcolumn="41" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="78" endline="78" begincolumn="5" endcolumn="42" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="80" endline="80" begincolumn="5" endcolumn="41" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="82" endline="82" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="84" endline="84" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="86" endline="86" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="88" endline="88" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="90" endline="90" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="92" endline="92" begincolumn="5" endcolumn="27" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="94" endline="94" begincolumn="5" endcolumn="28" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="96" endline="96" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="98" endline="98" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="100" endline="100" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="102" endline="102" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="104" endline="104" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="106" endline="106" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="108" endline="108" begincolumn="5" endcolumn="28" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="110" endline="110" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="112" endline="112" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="114" endline="114" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="116" endline="116" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="118" endline="118" begincolumn="5" endcolumn="43" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="120" endline="120" begincolumn="5" endcolumn="42" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="122" endline="122" begincolumn="5" endcolumn="42" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="124" endline="124" begincolumn="5" endcolumn="39" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="126" endline="126" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSGET.java">
<violation beginline="37" endline="71" begincolumn="5" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSGET" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
<violation beginline="37" endline="71" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSGET" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSHISTORY.java">
<violation beginline="39" endline="72" begincolumn="5" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSHISTORY" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
<violation beginline="39" endline="72" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSHISTORY" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="158" endline="158" begincolumn="37" endcolumn="68" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSHISTORY" method="setDateFormat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="200" endline="202" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSHISTORY$BriefCodediffNofile" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/vss/MSVSSLABEL.java">
<violation beginline="35" endline="69" begincolumn="5" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSLABEL" method="buildCmdLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'buildCmdLine()' is missing an @Override annotation.
</violation>
<violation beginline="35" endline="69" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.vss" class="MSVSSLABEL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/windows/Attrib.java">
<violation beginline="43" endline="43" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.taskdefs.optional.windows" class="Attrib" variable="haveAttr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haveAttr'
</violation>
<violation beginline="43" endline="43" begincolumn="13" endcolumn="37" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.windows" class="Attrib" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field haveAttr has the same name as a method
</violation>
<violation beginline="48" endline="48" begincolumn="9" endcolumn="32" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.optional.windows" class="Attrib" method="Attrib" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setParallel' called during object construction
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/xz/Unxz.java">
<violation beginline="39" endline="87" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.xz" class="Unxz" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Unxz
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/optional/xz/Xz.java">
<violation beginline="38" endline="63" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.optional.xz" class="Xz" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Xz
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/DefaultRmicAdapter.java">
<violation beginline="204" endline="204" begincolumn="44" endcolumn="59" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter" method="setupRmicCommand" variable="options" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="317" endline="317" begincolumn="47" endcolumn="67" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter" method="preprocessCompilerArgs" variable="compilerArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="329" endline="329" begincolumn="46" endcolumn="66" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter" method="filterJvmCompilerArgs" variable="compilerArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="339" endline="339" begincolumn="16" endcolumn="52" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter" method="filterJvmCompilerArgs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="392" endline="393" begincolumn="39" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter$RmicFileNameMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="398" endline="399" begincolumn="37" endcolumn="9" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter$RmicFileNameMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="404" endline="404" begincolumn="35" endcolumn="42" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter$RmicFileNameMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal ".class" appears 11 times in this file; the first occurrence is on line 404
</violation>
<violation beginline="429" endline="429" begincolumn="22" endcolumn="77" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter$RmicFileNameMapper" method="mapFileName" variable="target" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="450" endline="450" begincolumn="29" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter$RmicFileNameMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'index' is never used (overwritten on lines 453 and 456)
</violation>
<violation beginline="505" endline="509" begincolumn="19" endcolumn="17" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.rmic" class="DefaultRmicAdapter$RmicFileNameMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/ForkingSunRmic.java">
<violation beginline="69" endline="69" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="ForkingSunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/KaffeRmic.java">
<violation beginline="33" endline="39" begincolumn="35" endcolumn="5" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.rmic" class="KaffeRmic" variable="RMIC_CLASSNAMES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="58" endline="58" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="KaffeRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="108" endline="110" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.rmic" class="KaffeRmic" method="getRmicClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/RmicAdapter.java">
<violation beginline="53" endline="53" begincolumn="30" endcolumn="43" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="RmicAdapter" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/RmicAdapterFactory.java">
<violation beginline="67" endline="67" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="RmicAdapterFactory" method="getRmic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="94" endline="94" begincolumn="46" endcolumn="53" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="RmicAdapterFactory" method="getRmic" variable="rmicType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'rmicType'
</violation>
<violation beginline="94" endline="94" begincolumn="46" endcolumn="53" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="RmicAdapterFactory" method="getRmic" variable="rmicType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'rmicType'
</violation>
<violation beginline="94" endline="94" begincolumn="46" endcolumn="53" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="RmicAdapterFactory" method="getRmic" variable="rmicType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'rmicType'
</violation>
<violation beginline="96" endline="96" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="RmicAdapterFactory" method="getRmic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="139" endline="139" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="RmicAdapterFactory" method="resolveClassName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/SunRmic.java">
<violation beginline="67" endline="67" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="SunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="77" endline="111" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="SunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="90" endline="91" begincolumn="17" endcolumn="66" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="SunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="93" endline="94" begincolumn="13" endcolumn="62" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="SunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="95" endline="95" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="SunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="96" endline="96" begincolumn="17" endcolumn="18" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.rmic" class="SunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
<violation beginline="101" endline="111" begincolumn="11" endcolumn="9" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.rmic" class="SunRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/WLRmic.java">
<violation beginline="70" endline="70" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="WLRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="74" endline="74" begincolumn="24" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.rmic" class="WLRmic" method="execute" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="89" endline="89" begincolumn="13" endcolumn="92" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.taskdefs.rmic" class="WLRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="90" endline="90" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.taskdefs.rmic" class="WLRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="91" endline="91" begincolumn="17" endcolumn="18" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.taskdefs.rmic" class="WLRmic" method="execute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/rmic/XNewRmic.java">
<violation beginline="42" endline="44" begincolumn="18" endcolumn="9" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.taskdefs.rmic" class="XNewRmic" method="setupRmicCommand" variable="options" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/AbstractFileSet.java">
<violation beginline="85" endline="85" begincolumn="30" endcolumn="52" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="AbstractFileSet" variable="directoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'directoryScanner'
</violation>
<violation beginline="121" endline="121" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="139" endline="139" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="139" endline="148" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="164" endline="170" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="getDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="176" endline="184" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="createPatternSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="190" endline="196" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="createInclude" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="202" endline="208" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="createIncludesFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="214" endline="220" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="createExclude" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="226" endline="232" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="createExcludesFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="239" endline="258" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="268" endline="274" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setIncludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="283" endline="283" begincolumn="45" endcolumn="61" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="AbstractFileSet" method="appendIncludes" variable="includes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="283" endline="293" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="appendIncludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="303" endline="309" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="318" endline="318" begincolumn="45" endcolumn="61" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="AbstractFileSet" method="appendExcludes" variable="excludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="318" endline="328" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="appendExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="336" endline="336" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setIncludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="336" endline="342" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setIncludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="350" endline="350" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setExcludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="350" endline="356" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setExcludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="363" endline="369" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setDefaultexcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="376" endline="382" begincolumn="25" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.types" class="AbstractFileSet" method="getDefaultexcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="376" endline="382" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="getDefaultexcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="389" endline="395" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="405" endline="411" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="isCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="418" endline="424" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setFollowSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="434" endline="440" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="isFollowSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="481" endline="483" begincolumn="13" endcolumn="6" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.types" class="AbstractFileSet" method="getErrorOnMissingDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="547" endline="572" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="setupDirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="592" endline="598" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="hasSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="605" endline="612" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="hasPatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="620" endline="626" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="selectorCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="634" endline="640" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="getSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="639" endline="639" begincolumn="16" endcolumn="68" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="AbstractFileSet" method="getSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="648" endline="654" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="selectorElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="662" endline="669" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="appendSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="917" endline="931" begincolumn="25" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="AbstractFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="917" endline="931" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="917" endline="931" begincolumn="25" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="AbstractFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="965" endline="973" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="mergePatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="976" endline="989" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AbstractFileSet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="977" endline="977" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="AbstractFileSet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/AntFilterReader.java">
<violation beginline="141" endline="141" begincolumn="16" endcolumn="67" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="AntFilterReader" method="getParams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="154" endline="154" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="AntFilterReader" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="154" endline="160" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="AntFilterReader" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setRefid(Reference)' is missing an @Override annotation.
</violation>
<violation beginline="162" endline="175" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="AntFilterReader" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="162" endline="175" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="AntFilterReader" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="163" endline="163" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="AntFilterReader" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/ArchiveFileSet.java">
<violation beginline="61" endline="61" begincolumn="22" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ArchiveFileSet" variable="src" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'src'
</violation>
<violation beginline="64" endline="64" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ArchiveFileSet" variable="hasDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'hasDir'
</violation>
<violation beginline="68" endline="68" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ArchiveFileSet" variable="fileModeHasBeenSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fileModeHasBeenSet'
</violation>
<violation beginline="69" endline="69" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ArchiveFileSet" variable="dirModeHasBeenSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dirModeHasBeenSet'
</violation>
<violation beginline="75" endline="75" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ArchiveFileSet" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="114" endline="114" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="ArchiveFileSet" method="setDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="508" endline="514" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="ArchiveFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="508" endline="514" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="ArchiveFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="587" endline="602" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="ArchiveFileSet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="588" endline="588" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="ArchiveFileSet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/ArchiveScanner.java">
<violation beginline="64" endline="64" begincolumn="35" endcolumn="45" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="ArchiveScanner" variable="fileEntries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fileEntries' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="69" endline="69" begincolumn="35" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="ArchiveScanner" variable="dirEntries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'dirEntries' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="74" endline="74" begincolumn="35" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="ArchiveScanner" variable="matchFileEntries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'matchFileEntries' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="79" endline="79" begincolumn="35" endcolumn="49" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="ArchiveScanner" variable="matchDirEntries" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'matchDirEntries' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="108" endline="113" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="ArchiveScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'scan()' is missing an @Override annotation.
</violation>
<violation beginline="156" endline="162" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="ArchiveScanner" method="getIncludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getIncludedFiles()' is missing an @Override annotation.
</violation>
<violation beginline="169" endline="175" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="ArchiveScanner" method="getIncludedFilesCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getIncludedFilesCount()' is missing an @Override annotation.
</violation>
<violation beginline="185" endline="191" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="ArchiveScanner" method="getIncludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getIncludedDirectories()' is missing an @Override annotation.
</violation>
<violation beginline="198" endline="204" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="ArchiveScanner" method="getIncludedDirsCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getIncludedDirsCount()' is missing an @Override annotation.
</violation>
<violation beginline="212" endline="218" begincolumn="35" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="ArchiveScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="226" endline="232" begincolumn="36" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="ArchiveScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="276" endline="276" begincolumn="40" endcolumn="43" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types" class="ArchiveScanner" method="getResource" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Assertions.java">
<violation beginline="78" endline="78" begincolumn="13" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Assertions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="119" endline="124" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Assertions" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setRefid(Reference)' is missing an @Override annotation.
</violation>
<violation beginline="248" endline="252" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Assertions" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Commandline.java">
<violation beginline="66" endline="66" begincolumn="20" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Commandline" variable="executable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'executable'
</violation>
<violation beginline="80" endline="80" begincolumn="13" endcolumn="33" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Commandline" method="Commandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setExecutable' called during object construction
</violation>
<violation beginline="187" endline="187" begincolumn="17" endcolumn="29" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Commandline$Argument" method="getParts" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'parts' may expose an internal array.
</violation>
<violation beginline="203" endline="274" begincolumn="12" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="Commandline$Marker" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Marker' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=5, WMC=10)
</violation>
<violation beginline="205" endline="205" begincolumn="21" endcolumn="28" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="Commandline$Marker" variable="position" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'position' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="349" endline="349" begincolumn="30" endcolumn="42" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Commandline" method="addArguments" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="362" endline="362" begincolumn="16" endcolumn="60" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="Commandline" method="getCommandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="385" endline="385" begincolumn="16" endcolumn="56" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="Commandline" method="getArguments" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="447" endline="447" begincolumn="35" endcolumn="47" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Commandline" method="toString" variable="line" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="527" endline="527" begincolumn="16" endcolumn="56" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="Commandline" method="translateCommandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="544" endline="552" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Commandline" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="544" endline="552" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Commandline" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="634" endline="634" begincolumn="42" endcolumn="54" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Commandline" method="describeCommand" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="655" endline="655" begincolumn="44" endcolumn="56" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Commandline" method="describeArguments" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/CommandlineJava.java">
<violation beginline="52" endline="52" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="53" endline="53" begincolumn="18" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" variable="bootclasspath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'bootclasspath'
</violation>
<violation beginline="54" endline="54" begincolumn="18" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" variable="modulepath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'modulepath'
</violation>
<violation beginline="55" endline="55" begincolumn="18" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" variable="upgrademodulepath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'upgrademodulepath'
</violation>
<violation beginline="57" endline="57" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" variable="maxMemory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'maxMemory'
</violation>
<violation beginline="61" endline="61" begincolumn="24" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" variable="assertions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'assertions'
</violation>
<violation beginline="74" endline="74" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" variable="cloneVm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cloneVm'
</violation>
<violation beginline="82" endline="82" begincolumn="20" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" variable="sys" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'sys'
</violation>
<violation beginline="82" endline="82" begincolumn="9" endcolumn="30" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="84" endline="84" begincolumn="17" endcolumn="35" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="84" endline="84" begincolumn="56" endcolumn="63" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="93" endline="93" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" method="getVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="100" endline="100" begincolumn="20" endcolumn="70" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" method="getVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="135" endline="135" begincolumn="40" endcolumn="53" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" method="setSystem" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="161" endline="161" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" method="restoreSystem" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="181" endline="190" begincolumn="16" endcolumn="9" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="CommandlineJava$SysProperties" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="228" endline="228" begincolumn="9" endcolumn="52" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="CommandlineJava" method="CommandlineJava" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setVm' called during object construction
</violation>
<violation beginline="229" endline="229" begincolumn="9" endcolumn="51" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="CommandlineJava" method="CommandlineJava" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setVmversion' called during object construction
</violation>
<violation beginline="503" endline="503" begincolumn="16" endcolumn="60" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="CommandlineJava" method="getCommandline" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="534" endline="534" begincolumn="62" endcolumn="69" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.types" class="CommandlineJava" method="addCommandsToList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "ignore" appears 7 times in this file; the first occurrence is on line 534
</violation>
<violation beginline="714" endline="714" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="CommandlineJava" method="setSystemProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="723" endline="723" begincolumn="50" endcolumn="63" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="CommandlineJava" method="restoreSystemProperties" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="742" endline="767" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="CommandlineJava" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Comparison.java">
<violation beginline="31" endline="94" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="Comparison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Comparison' is suspected to be a Data Class (WOC=25.000%, NOPA=6, NOAM=1, WMC=8)
</violation>
<violation beginline="32" endline="34" begincolumn="35" endcolumn="67" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.types" class="Comparison" variable="VALUES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="61" endline="62" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="Comparison" method="Comparison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="76" endline="78" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Comparison" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
<violation beginline="77" endline="77" begincolumn="9" endcolumn="22" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Comparison" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/DataType.java">
<violation beginline="141" endline="141" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="DataType" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="357" endline="365" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="DataType" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/DirSet.java">
<violation beginline="57" endline="62" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="DirSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="57" endline="62" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="DirSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/EnumeratedAttribute.java">
<violation beginline="55" endline="56" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="EnumeratedAttribute" method="EnumeratedAttribute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="69" endline="84" begincolumn="19" endcolumn="5" rule="SingletonClassReturningNewInstance" ruleset="Error Prone" package="org.apache.tools.ant.types" class="EnumeratedAttribute" method="getInstance" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#singletonclassreturningnewinstance" priority="2">
getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review
</violation>
<violation beginline="71" endline="71" begincolumn="30" endcolumn="43" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="EnumeratedAttribute" method="getInstance" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="79" endline="79" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="EnumeratedAttribute" method="getInstance" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="91" endline="91" begincolumn="53" endcolumn="66" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="EnumeratedAttribute" method="setValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Environment.java">
<violation beginline="36" endline="36" begincolumn="15" endcolumn="30" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Environment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="49" endline="49" begincolumn="17" endcolumn="34" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Environment$Variable" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="55" endline="57" begincolumn="16" endcolumn="9" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.types" class="Environment$Variable" method="Variable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="116" endline="116" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Environment$Variable" method="getContent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="137" endline="137" begincolumn="25" endcolumn="32" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="Environment" method="Environment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="155" endline="155" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Environment" method="getVariables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="168" endline="168" begincolumn="12" endcolumn="27" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Environment" method="getVariablesVector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/FileList.java">
<violation beginline="72" endline="72" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FileList" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="85" endline="85" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FileList" method="setDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="136" endline="136" begincolumn="16" endcolumn="62" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="FileList" method="getFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="197" endline="197" begincolumn="13" endcolumn="59" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="FileList" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/FileSet.java">
<violation beginline="53" endline="58" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="FileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="53" endline="58" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="FileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/FilterChain.java">
<violation beginline="49" endline="49" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterChain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="49" endline="49" begincolumn="28" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="FilterChain" variable="filterReaders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filterReaders' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="49" endline="49" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="FilterChain" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="69" endline="69" begincolumn="12" endcolumn="25" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterChain" method="getFilterReaders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="376" endline="376" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FilterChain" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="399" endline="414" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterChain" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="400" endline="400" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FilterChain" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/FilterSet.java">
<violation beginline="45" endline="106" begincolumn="19" endcolumn="6" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet$Filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Filter' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=4, WMC=6)
</violation>
<violation beginline="48" endline="48" begincolumn="9" endcolumn="21" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet$Filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="51" endline="51" begincolumn="9" endcolumn="21" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet$Filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="61" endline="61" begincolumn="12" endcolumn="26" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="FilterSet$Filter" method="Filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setToken' called during object construction
</violation>
<violation beginline="62" endline="62" begincolumn="12" endcolumn="26" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="FilterSet$Filter" method="Filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setValue' called during object construction
</violation>
<violation beginline="68" endline="69" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="FilterSet$Filter" method="Filter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="129" endline="164" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet$OnMissing" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'OnMissing' is suspected to be a Data Class (WOC=0.000%, NOPA=3, NOAM=1, WMC=3)
</violation>
<violation beginline="130" endline="131" begincolumn="39" endcolumn="53" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet$OnMissing" variable="VALUES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="147" endline="148" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="FilterSet$OnMissing" method="OnMissing" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="162" endline="162" begincolumn="13" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet$OnMissing" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
<violation beginline="167" endline="167" begincolumn="25" endcolumn="57" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="170" endline="170" begincolumn="25" endcolumn="55" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="172" endline="172" begincolumn="13" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="173" endline="173" begincolumn="13" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="176" endline="176" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="176" endline="176" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="178" endline="178" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="FilterSet" variable="duplicateToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'duplicateToken'
</violation>
<violation beginline="178" endline="178" begincolumn="13" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="180" endline="180" begincolumn="13" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="181" endline="181" begincolumn="13" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="181" endline="181" begincolumn="39" endcolumn="55" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="FilterSet" variable="filterHash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'filterHash'
</violation>
<violation beginline="181" endline="181" begincolumn="13" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="182" endline="182" begincolumn="13" endcolumn="24" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="182" endline="182" begincolumn="13" endcolumn="55" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="182" endline="182" begincolumn="26" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet" variable="filtersFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filtersFiles' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="182" endline="182" begincolumn="45" endcolumn="52" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="FilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="183" endline="183" begincolumn="13" endcolumn="60" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="184" endline="184" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="FilterSet" variable="readingFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'readingFiles'
</violation>
<violation beginline="184" endline="184" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="186" endline="186" begincolumn="17" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="FilterSet" variable="recurseDepth" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'recurseDepth'
</violation>
<violation beginline="186" endline="186" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="191" endline="191" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="191" endline="191" begincolumn="13" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="FilterSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="191" endline="191" begincolumn="42" endcolumn="49" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="FilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="196" endline="197" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="FilterSet" method="FilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="216" endline="216" begincolumn="28" endcolumn="41" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet" method="getFilters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="216" endline="231" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="getFilters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="247" endline="247" begincolumn="25" endcolumn="49" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet" method="getFilterHash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Hashtable'; use the interface instead
</violation>
<violation beginline="247" endline="257" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="getFilterHash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="266" endline="266" begincolumn="57" endcolumn="70" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet" method="setFiltersfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="349" endline="373" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="readFiltersFromFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="350" endline="350" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet" method="readFiltersFromFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="364" endline="364" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet" method="readFiltersFromFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="385" endline="387" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="replaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="394" endline="400" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="addFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="420" endline="425" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="addFilter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="432" endline="439" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="addConfiguredFilterSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="446" endline="456" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="addConfiguredPropertySet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="463" endline="465" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="hasFilters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="475" endline="475" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="475" endline="489" begincolumn="25" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="FilterSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="475" endline="489" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="475" endline="489" begincolumn="25" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="FilterSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="515" endline="567" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="iReplaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="576" endline="613" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="FilterSet" method="replaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="577" endline="577" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSet" method="replaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="586" endline="586" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.types" class="FilterSet" method="replaceTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/FilterSetCollection.java">
<violation beginline="31" endline="31" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="FilterSetCollection" variable="filterSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'filterSets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="36" endline="37" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="FilterSetCollection" method="FilterSetCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="44" endline="44" begincolumn="9" endcolumn="31" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="FilterSetCollection" method="FilterSetCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'addFilterSet' called during object construction
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/FlexInteger.java">
<violation beginline="29" endline="29" begincolumn="21" endcolumn="25" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="FlexInteger" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'value' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/LogLevel.java">
<violation beginline="46" endline="47" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="LogLevel" method="LogLevel" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="72" endline="79" begincolumn="20" endcolumn="6" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="LogLevel" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Mapper.java">
<violation beginline="36" endline="36" begincolumn="26" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Mapper" variable="type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'type'
</violation>
<violation beginline="37" endline="37" begincolumn="22" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Mapper" variable="classname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classname'
</violation>
<violation beginline="38" endline="38" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Mapper" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="39" endline="39" begincolumn="22" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Mapper" variable="from" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'from'
</violation>
<violation beginline="40" endline="40" begincolumn="22" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Mapper" variable="to" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'to'
</violation>
<violation beginline="44" endline="44" begincolumn="29" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Mapper" variable="container" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'container'
</violation>
<violation beginline="191" endline="191" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Mapper" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="203" endline="203" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Mapper" method="getImplementation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="243" endline="245" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.types" class="Mapper" method="getImplementation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="245" endline="247" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Mapper" method="getImplementation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="286" endline="286" begincolumn="28" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="Mapper$MapperType" variable="implementations" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'implementations' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Parameter.java">
<violation beginline="24" endline="82" begincolumn="14" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="Parameter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Parameter' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=6)
</violation>
<violation beginline="25" endline="25" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Parameter" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="26" endline="26" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Parameter" variable="type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'type'
</violation>
<violation beginline="27" endline="27" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Parameter" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'value'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Path.java">
<violation beginline="67" endline="780" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types" class="Path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Path
</violation>
<violation beginline="115" endline="115" begincolumn="13" endcolumn="25" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Path$PathElement" method="getParts" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'parts' may expose an internal array.
</violation>
<violation beginline="147" endline="147" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Path" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="149" endline="149" begincolumn="19" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Path" variable="union" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'union'
</violation>
<violation beginline="149" endline="149" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Path" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="150" endline="150" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Path" variable="cache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cache'
</violation>
<violation beginline="150" endline="150" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Path" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="177" endline="177" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="setLocation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="187" endline="187" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="setPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="201" endline="201" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="213" endline="213" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="createPathElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="227" endline="227" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="addFileset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="239" endline="239" begincolumn="49" endcolumn="62" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="addFilelist" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="251" endline="251" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="addDirset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="264" endline="264" begincolumn="39" endcolumn="52" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="298" endline="298" begincolumn="37" endcolumn="50" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="createPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="423" endline="423" begincolumn="16" endcolumn="56" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="Path" method="translatePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="464" endline="470" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="Path" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="477" endline="485" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Path" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="477" endline="485" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Path" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="495" endline="508" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="Path" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="496" endline="496" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="598" endline="598" begincolumn="59" endcolumn="69" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Path" method="addJavaRuntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "java.home" appears 9 times in this file; the first occurrence is on line 598
</violation>
<violation beginline="623" endline="623" begincolumn="53" endcolumn="57" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Path" method="addJavaRuntime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "lib" appears 4 times in this file; the first occurrence is on line 623
</violation>
<violation beginline="676" endline="676" begincolumn="33" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Path" method="addExtdirs" variable="extdirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'extdirs'
</violation>
<violation beginline="704" endline="714" begincolumn="31" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="Path" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="721" endline="728" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="Path" method="isFilesystemOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="759" endline="759" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="Path" method="delegateIteratorToList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="765" endline="770" begincolumn="26" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.types" class="Path" method="getPreserveBC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="765" endline="770" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="Path" method="getPreserveBC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/PatternSet.java">
<violation beginline="243" endline="245" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.types" class="PatternSet" method="PatternSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="257" endline="257" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="PatternSet" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="392" endline="392" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="PatternSet" method="setIncludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="405" endline="405" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="PatternSet" method="setExcludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="417" endline="417" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="PatternSet" method="readPatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="419" endline="419" begincolumn="48" endcolumn="57" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.types" class="PatternSet" method="readPatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="420" endline="420" begincolumn="42" endcolumn="56" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.types" class="PatternSet" method="readPatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="570" endline="581" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="PatternSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="570" endline="581" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="PatternSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Permissions.java">
<violation beginline="51" endline="51" begincolumn="39" endcolumn="52" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Permissions" variable="granted" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'granted'
</violation>
<violation beginline="52" endline="52" begincolumn="29" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Permissions" variable="origSm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'origSm'
</violation>
<violation beginline="53" endline="53" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Permissions" variable="active" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'active'
</violation>
<violation beginline="100" endline="100" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Permissions" method="setSecurityManager" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="100" endline="105" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="Permissions" method="setSecurityManager" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="110" endline="110" begincolumn="32" endcolumn="45" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Permissions" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="128" endline="128" begincolumn="60" endcolumn="65" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Permissions" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "read" appears 20 times in this file; the first occurrence is on line 128
</violation>
<violation beginline="161" endline="161" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="Permissions" method="createPermission" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="171" endline="174" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="Permissions" method="restoreSecurityManager" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="180" endline="242" begincolumn="13" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types" class="Permissions$MySM" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like MySM
</violation>
<violation beginline="196" endline="196" begincolumn="17" endcolumn="64" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Permissions$MySM" method="checkExit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="209" endline="209" begincolumn="41" endcolumn="71" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Permissions$MySM" method="checkPermission" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="245" endline="353" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="Permissions$Permission" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Permission' is suspected to be a Data Class (WOC=28.571%, NOPA=0, NOAM=5, WMC=18)
</violation>
<violation beginline="306" endline="327" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="Permissions$Permission" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/PropertySet.java">
<violation beginline="51" endline="51" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="PropertySet" variable="negate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'negate'
</violation>
<violation beginline="53" endline="53" begincolumn="31" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="PropertySet" variable="ptyRefs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'ptyRefs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="54" endline="54" begincolumn="31" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="PropertySet" variable="setRefs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'setRefs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="61" endline="127" begincolumn="19" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="PropertySet$PropertyRef" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'PropertyRef' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=11)
</violation>
<violation beginline="111" endline="111" begincolumn="17" endcolumn="28" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.types" class="PropertySet$PropertyRef" method="assertValid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="256" endline="262" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.types" class="PropertySet" method="getDynamic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="325" endline="325" begincolumn="25" endcolumn="28" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.types" class="PropertySet" method="getPropertyMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'name'
</violation>
<violation beginline="467" endline="467" begincolumn="13" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="PropertySet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="473" endline="473" begincolumn="9" endcolumn="40" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="PropertySet$BuiltinPropertySetName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="474" endline="474" begincolumn="9" endcolumn="46" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="PropertySet$BuiltinPropertySetName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="475" endline="475" begincolumn="9" endcolumn="56" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types" class="PropertySet$BuiltinPropertySetName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="544" endline="560" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="PropertySet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="545" endline="545" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="PropertySet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Quantifier.java">
<violation beginline="107" endline="107" begincolumn="15" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Quantifier$Predicate" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="126" endline="127" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="Quantifier" method="Quantifier" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="147" endline="147" begincolumn="9" endcolumn="22" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Quantifier" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
<violation beginline="155" endline="155" begincolumn="29" endcolumn="39" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Quantifier" method="evaluate" variable="b" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/RedirectorElement.java">
<violation beginline="41" endline="41" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" variable="usingInput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'usingInput'
</violation>
<violation beginline="46" endline="46" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" variable="usingOutput" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'usingOutput'
</violation>
<violation beginline="51" endline="51" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" variable="usingError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'usingError'
</violation>
<violation beginline="88" endline="88" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="RedirectorElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="88" endline="88" begincolumn="33" endcolumn="49" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" variable="inputFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'inputFilterChains' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="88" endline="88" begincolumn="57" endcolumn="64" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="91" endline="91" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="RedirectorElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="91" endline="91" begincolumn="33" endcolumn="50" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" variable="outputFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'outputFilterChains' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="91" endline="91" begincolumn="58" endcolumn="65" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="31" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="RedirectorElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="94" endline="94" begincolumn="33" endcolumn="49" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" variable="errorFilterChains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'errorFilterChains' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="94" endline="94" begincolumn="57" endcolumn="64" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="109" endline="109" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" variable="outputIsBinary" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'outputIsBinary'
</violation>
<violation beginline="179" endline="179" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="179" endline="196" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="RedirectorElement" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setRefid(Reference)' is missing an @Override annotation.
</violation>
<violation beginline="495" endline="495" begincolumn="22" endcolumn="41" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.types" class="RedirectorElement" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="495" endline="495" begincolumn="22" endcolumn="41" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="509" endline="509" begincolumn="22" endcolumn="41" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.types" class="RedirectorElement" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="509" endline="509" begincolumn="22" endcolumn="41" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="523" endline="523" begincolumn="22" endcolumn="41" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.types" class="RedirectorElement" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="523" endline="523" begincolumn="22" endcolumn="41" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" method="configure" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="570" endline="570" begincolumn="34" endcolumn="46" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types" class="RedirectorElement" method="toFileArray" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="581" endline="581" begincolumn="16" endcolumn="50" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types" class="RedirectorElement" method="toFileArray" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="593" endline="593" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="RedirectorElement" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Reference.java">
<violation beginline="28" endline="136" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="Reference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Reference' is suspected to be a Data Class (WOC=22.222%, NOPA=0, NOAM=4, WMC=16)
</violation>
<violation beginline="40" endline="41" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="Reference" method="Reference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="52" endline="52" begincolumn="9" endcolumn="20" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Reference" method="Reference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setRefId' called during object construction
</violation>
<violation beginline="62" endline="62" begincolumn="9" endcolumn="20" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Reference" method="Reference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setRefId' called during object construction
</violation>
<violation beginline="63" endline="63" begincolumn="9" endcolumn="21" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Reference" method="Reference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setProject' called during object construction
</violation>
<violation beginline="110" endline="110" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Reference" method="getReferencedObject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="129" endline="129" begincolumn="48" endcolumn="61" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="Reference" method="getReferencedObject" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/RegularExpression.java">
<violation beginline="62" endline="62" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="RegularExpression" variable="alreadyInit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'alreadyInit'
</violation>
<violation beginline="67" endline="67" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="RegularExpression" variable="regexp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'regexp'
</violation>
<violation beginline="70" endline="70" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="RegularExpression" variable="setPatternPending" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'setPatternPending'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/Resource.java">
<violation beginline="63" endline="63" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Resource" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="63" endline="63" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Resource" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="64" endline="64" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Resource" variable="exists" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'exists'
</violation>
<violation beginline="64" endline="64" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Resource" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="65" endline="65" begincolumn="18" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Resource" variable="lastmodified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'lastmodified'
</violation>
<violation beginline="65" endline="65" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Resource" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="66" endline="66" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Resource" variable="directory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'directory'
</violation>
<violation beginline="66" endline="66" begincolumn="13" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Resource" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="67" endline="67" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="Resource" variable="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'size'
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="29" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Resource" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field size has the same name as a method
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="Resource" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="72" endline="73" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="Resource" method="Resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="124" endline="124" begincolumn="9" endcolumn="21" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Resource" method="Resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setName' called during object construction
</violation>
<violation beginline="259" endline="266" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Resource" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="259" endline="266" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="Resource" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="263" endline="264" begincolumn="13" endcolumn="107" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types" class="Resource" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="437" endline="439" begincolumn="12" endcolumn="5" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.ant.types" class="Resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/ResourceLocation.java">
<violation beginline="39" endline="105" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types" class="ResourceLocation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'ResourceLocation' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=6)
</violation>
<violation beginline="43" endline="43" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ResourceLocation" variable="publicId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'publicId'
</violation>
<violation beginline="46" endline="46" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ResourceLocation" variable="location" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'location'
</violation>
<violation beginline="55" endline="55" begincolumn="17" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="ResourceLocation" variable="base" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'base'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/TarFileSet.java">
<violation beginline="197" endline="197" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="TarFileSet" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="250" endline="255" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="TarFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="250" endline="255" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="TarFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/TarScanner.java">
<violation beginline="51" endline="80" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="TarScanner" method="fillMapsFromArchive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'fillMapsFromArchive(Resource, String, Map, Map, Map, Map)' is missing an @Override annotation.
</violation>
<violation beginline="57" endline="57" begincolumn="34" endcolumn="37" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="TarScanner" method="fillMapsFromArchive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'entry' is never used (overwritten on line 58)
</violation>
<violation beginline="58" endline="58" begincolumn="24" endcolumn="58" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.types" class="TarScanner" method="fillMapsFromArchive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/TimeComparison.java">
<violation beginline="29" endline="30" begincolumn="35" endcolumn="51" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.types" class="TimeComparison" variable="VALUES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="46" endline="47" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types" class="TimeComparison" method="TimeComparison" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="61" endline="63" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types" class="TimeComparison" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
<violation beginline="62" endline="62" begincolumn="9" endcolumn="22" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types" class="TimeComparison" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/XMLCatalog.java">
<violation beginline="127" endline="127" begincolumn="13" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="127" endline="127" begincolumn="38" endcolumn="45" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog" variable="elements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'elements' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="127" endline="127" begincolumn="53" endcolumn="60" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="167" endline="167" begincolumn="13" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog" method="getElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="294" endline="294" begincolumn="53" endcolumn="66" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog" method="addDTD" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="314" endline="314" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog" method="addEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="357" endline="357" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="415" endline="415" begincolumn="28" endcolumn="31" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'source' is never used (overwritten on line 421)
</violation>
<violation beginline="452" endline="468" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types" class="XMLCatalog" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="453" endline="453" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="483" endline="483" begincolumn="29" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog" variable="catalogResolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'catalogResolver'
</violation>
<violation beginline="483" endline="483" begincolumn="13" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types" class="XMLCatalog" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="499" endline="499" begincolumn="28" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog" method="getCatalogResolver" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="531" endline="543" begincolumn="15" endcolumn="13" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog" method="getCatalogResolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="640" endline="640" begincolumn="17" endcolumn="89" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog" method="filesystemLookup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="658" endline="659" begincolumn="21" endcolumn="84" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog" method="filesystemLookup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="658" endline="659" begincolumn="21" endcolumn="84" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog" method="filesystemLookup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="681" endline="683" begincolumn="23" endcolumn="21" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog" method="filesystemLookup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="706" endline="706" begincolumn="24" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog" method="classpathLookup" variable="loader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="711" endline="711" begincolumn="21" endcolumn="22" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog" method="classpathLookup" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="748" endline="748" begincolumn="17" endcolumn="89" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog" method="urlLookup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="763" endline="763" begincolumn="29" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog" method="urlLookup" variable="is" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="776" endline="778" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog" method="urlLookup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="817" endline="817" begincolumn="53" endcolumn="67" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog$InternalResolver" method="resolveEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "' location: '" appears 4 times in this file; the first occurrence is on line 817
</violation>
<violation beginline="839" endline="839" begincolumn="34" endcolumn="37" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog$InternalResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'source' is never used (overwritten on line 873)
</violation>
<violation beginline="866" endline="868" begincolumn="23" endcolumn="21" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog$InternalResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="900" endline="900" begincolumn="24" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="setXMLCatalog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'setXMLCatalog'
</violation>
<violation beginline="900" endline="900" begincolumn="40" endcolumn="43" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'setXMLCatalog' is never used (overwritten on line 923)
</violation>
<violation beginline="901" endline="901" begincolumn="24" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="parseCatalog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parseCatalog'
</violation>
<violation beginline="901" endline="901" begincolumn="39" endcolumn="42" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'parseCatalog' is never used (overwritten on line 926)
</violation>
<violation beginline="902" endline="902" begincolumn="24" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="resolveEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolveEntity'
</violation>
<violation beginline="902" endline="902" begincolumn="17" endcolumn="44" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field resolveEntity has the same name as a method
</violation>
<violation beginline="902" endline="902" begincolumn="40" endcolumn="43" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'resolveEntity' is never used (overwritten on line 929)
</violation>
<violation beginline="903" endline="903" begincolumn="24" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolve'
</violation>
<violation beginline="903" endline="903" begincolumn="17" endcolumn="38" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field resolve has the same name as a method
</violation>
<violation beginline="903" endline="903" begincolumn="34" endcolumn="37" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'resolve' is never used (overwritten on line 932)
</violation>
<violation beginline="906" endline="906" begincolumn="24" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="resolverImpl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolverImpl'
</violation>
<violation beginline="906" endline="906" begincolumn="24" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="resolverImpl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resolverImpl' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="906" endline="906" begincolumn="39" endcolumn="42" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'resolverImpl' is never used (overwritten on line 913)
</violation>
<violation beginline="908" endline="908" begincolumn="25" endcolumn="57" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" variable="externalCatalogsProcessed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'externalCatalogsProcessed'
</violation>
<violation beginline="969" endline="969" begincolumn="30" endcolumn="38" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="resolveEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="985" endline="985" begincolumn="26" endcolumn="34" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="resolveEntity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="994" endline="994" begincolumn="51" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="resolve" variable="base" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'base'
</violation>
<violation beginline="1029" endline="1031" begincolumn="23" endcolumn="21" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1048" endline="1048" begincolumn="30" endcolumn="38" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1071" endline="1071" begincolumn="26" endcolumn="34" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="resolve" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1091" endline="1091" begincolumn="26" endcolumn="34" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="processExternalCatalogs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1106" endline="1106" begincolumn="34" endcolumn="42" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types" class="XMLCatalog$ExternalResolver" method="processExternalCatalogs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/ZipFileSet.java">
<violation beginline="96" endline="101" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types" class="ZipFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="96" endline="101" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types" class="ZipFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/mappers/CutDirsMapper.java">
<violation beginline="36" endline="36" begincolumn="17" endcolumn="24" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.mappers" class="CutDirsMapper" variable="dirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dirs'
</violation>
<violation beginline="51" endline="52" begincolumn="46" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.mappers" class="CutDirsMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="59" endline="60" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.mappers" class="CutDirsMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/mappers/FilterMapper.java">
<violation beginline="73" endline="73" begincolumn="20" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.mappers" class="FilterMapper" method="mapFileName" variable="stringReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this StringReader object are closed after use
</violation>
<violation beginline="78" endline="78" begincolumn="52" endcolumn="59" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.mappers" class="FilterMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="86" endline="88" begincolumn="11" endcolumn="9" rule="AvoidRethrowingException" ruleset="Design" package="org.apache.tools.ant.types.mappers" class="FilterMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidrethrowingexception" priority="3">
A catch statement that catches an exception only to rethrow it should be avoided.
</violation>
<violation beginline="88" endline="88" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.mappers" class="FilterMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/AbstractScriptComponent.java">
<violation beginline="37" endline="37" begincolumn="32" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.optional" class="AbstractScriptComponent" variable="helper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'helper' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="42" endline="42" begincolumn="32" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional" class="AbstractScriptComponent" variable="runner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'runner'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/ScriptCondition.java">
<violation beginline="34" endline="34" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional" class="ScriptCondition" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'value'
</violation>
<violation beginline="45" endline="45" begincolumn="34" endcolumn="47" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.optional" class="ScriptCondition" method="eval" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="55" endline="57" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.types.optional" class="ScriptCondition" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/ScriptFilter.java">
<violation beginline="44" endline="44" begincolumn="32" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.optional" class="ScriptFilter" variable="helper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'helper' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="47" endline="47" begincolumn="32" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional" class="ScriptFilter" variable="runner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'runner'
</violation>
<violation beginline="76" endline="76" begincolumn="32" endcolumn="45" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.optional" class="ScriptFilter" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/ScriptMapper.java">
<violation beginline="30" endline="30" begincolumn="13" endcolumn="29" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.optional" class="ScriptMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="39" endline="40" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.optional" class="ScriptMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="48" endline="49" begincolumn="34" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.optional" class="ScriptMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="89" endline="89" begincolumn="16" endcolumn="54" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types.optional" class="ScriptMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/ScriptSelector.java">
<violation beginline="39" endline="39" begincolumn="32" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.optional" class="ScriptSelector" variable="helper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'helper' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="92" endline="92" begincolumn="32" endcolumn="45" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.optional" class="ScriptSelector" method="init" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/depend/ClassfileSet.java">
<violation beginline="44" endline="44" begincolumn="26" endcolumn="36" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" variable="rootClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'rootClasses' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="49" endline="49" begincolumn="27" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" variable="rootFileSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'rootFileSets' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="80" endline="81" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" method="ClassfileSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="129" endline="129" begincolumn="51" endcolumn="58" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" method="getDirectoryScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="164" endline="167" begincolumn="12" endcolumn="5" rule="ProperCloneImplementation" ruleset="Error Prone" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#propercloneimplementation" priority="2">
Object clone() should be implemented with super.clone()
</violation>
<violation beginline="164" endline="167" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="164" endline="167" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="170" endline="184" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.optional.depend" class="ClassfileSet" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/depend/DependScanner.java">
<violation beginline="45" endline="45" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="50" endline="50" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="52" endline="52" begincolumn="13" endcolumn="24" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="52" endline="52" begincolumn="26" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" variable="additionalBaseDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'additionalBaseDirs' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="52" endline="52" begincolumn="51" endcolumn="58" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="59" endline="59" begincolumn="30" endcolumn="42" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" variable="parentScanner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'parentScanner' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="77" endline="77" begincolumn="45" endcolumn="58" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="setRootClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="77" endline="79" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="setRootClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="88" endline="88" begincolumn="16" endcolumn="68" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="getIncludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="93" endline="98" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="getIncludedFilesCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="106" endline="106" begincolumn="44" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="106" endline="133" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="107" endline="107" begincolumn="24" endcolumn="31" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="115" endline="115" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="scan" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="139" endline="140" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="addDefaultExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="147" endline="149" begincolumn="12" endcolumn="5" rule="ReturnEmptyArrayRatherThanNull" ruleset="Error Prone" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="getExcludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull" priority="1">
Return an empty array rather than null.
</violation>
<violation beginline="156" endline="158" begincolumn="12" endcolumn="5" rule="ReturnEmptyArrayRatherThanNull" ruleset="Error Prone" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="getExcludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull" priority="1">
Return an empty array rather than null.
</violation>
<violation beginline="183" endline="185" begincolumn="12" endcolumn="5" rule="ReturnEmptyArrayRatherThanNull" ruleset="Error Prone" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="getNotIncludedDirectories" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull" priority="1">
Return an empty array rather than null.
</violation>
<violation beginline="192" endline="194" begincolumn="12" endcolumn="5" rule="ReturnEmptyArrayRatherThanNull" ruleset="Error Prone" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="getNotIncludedFiles" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull" priority="1">
Return an empty array rather than null.
</violation>
<violation beginline="201" endline="202" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="setExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="209" endline="210" begincolumn="48" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="setIncludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="217" endline="218" begincolumn="59" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.types.optional.depend" class="DependScanner" method="setCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/Arc.java">
<violation beginline="30" endline="121" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.optional.image" class="Arc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Arc
</violation>
<violation beginline="30" endline="121" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types.optional.image" class="Arc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Arc' is suspected to be a Data Class (WOC=16.667%, NOPA=0, NOAM=5, WMC=14)
</violation>
<violation beginline="32" endline="32" begincolumn="19" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Arc" variable="width" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'width'
</violation>
<violation beginline="33" endline="33" begincolumn="19" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Arc" variable="height" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'height'
</violation>
<violation beginline="34" endline="34" begincolumn="19" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Arc" variable="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'start'
</violation>
<violation beginline="35" endline="35" begincolumn="19" endcolumn="26" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Arc" variable="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'stop'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/BasicShape.java">
<violation beginline="25" endline="25" begincolumn="19" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="BasicShape" variable="stroke_width" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'stroke_width'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/Draw.java">
<violation beginline="29" endline="100" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.optional.image" class="Draw" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Draw
</violation>
<violation beginline="31" endline="31" begincolumn="19" endcolumn="26" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Draw" variable="xloc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'xloc'
</violation>
<violation beginline="32" endline="32" begincolumn="19" endcolumn="26" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Draw" variable="yloc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'yloc'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/Ellipse.java">
<violation beginline="33" endline="33" begincolumn="19" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Ellipse" variable="width" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'width'
</violation>
<violation beginline="34" endline="34" begincolumn="19" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Ellipse" variable="height" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'height'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/ImageOperation.java">
<violation beginline="30" endline="30" begincolumn="15" endcolumn="36" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="ImageOperation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="30" endline="30" begincolumn="57" endcolumn="64" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="ImageOperation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/Rectangle.java">
<violation beginline="30" endline="117" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types.optional.image" class="Rectangle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Rectangle' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=14)
</violation>
<violation beginline="32" endline="32" begincolumn="19" endcolumn="27" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Rectangle" variable="width" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'width'
</violation>
<violation beginline="33" endline="33" begincolumn="19" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Rectangle" variable="height" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'height'
</violation>
<violation beginline="34" endline="34" begincolumn="19" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Rectangle" variable="arcwidth" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'arcwidth'
</violation>
<violation beginline="35" endline="35" begincolumn="19" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Rectangle" variable="archeight" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'archeight'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/Rotate.java">
<violation beginline="36" endline="36" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Rotate" variable="angle" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'angle'
</violation>
<violation beginline="71" endline="71" begincolumn="62" endcolumn="66" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="Rotate" method="executeTransformOperation" variable="image" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'image'
</violation>
<violation beginline="71" endline="71" begincolumn="62" endcolumn="66" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="Rotate" method="executeTransformOperation" variable="image" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'image'
</violation>
<violation beginline="76" endline="76" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="Rotate" method="executeTransformOperation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="82" endline="82" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="Rotate" method="executeTransformOperation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="87" endline="87" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="Rotate" method="executeTransformOperation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="89" endline="89" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="Rotate" method="executeTransformOperation" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/Scale.java">
<violation beginline="146" endline="146" begincolumn="62" endcolumn="66" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.optional.image" class="Scale" method="executeTransformOperation" variable="image" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'image'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/image/Text.java">
<violation beginline="32" endline="136" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.optional.image" class="Text" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Text
</violation>
<violation beginline="32" endline="136" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types.optional.image" class="Text" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Text' is suspected to be a Data Class (WOC=28.571%, NOPA=0, NOAM=5, WMC=10)
</violation>
<violation beginline="38" endline="38" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Text" variable="bold" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'bold'
</violation>
<violation beginline="39" endline="39" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.optional.image" class="Text" variable="italic" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'italic'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/optional/xz/XzResource.java">
<violation beginline="41" endline="42" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.optional.xz" class="XzResource" method="XzResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resolver/ApacheCatalog.java">
<violation beginline="44" endline="44" begincolumn="35" endcolumn="49" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resolver" class="ApacheCatalog" variable="resolver" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resolver'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resolver/ApacheCatalogResolver.java">
<violation beginline="63" endline="63" begincolumn="24" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resolver" class="ApacheCatalogResolver" variable="xmlCatalog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'xmlCatalog'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/AbstractClasspathResource.java">
<violation beginline="139" endline="144" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="AbstractClasspathResource" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setRefid(Reference)' is missing an @Override annotation.
</violation>
<violation beginline="152" endline="162" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="AbstractClasspathResource" method="isExists" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isExists()' is missing an @Override annotation.
</violation>
<violation beginline="170" endline="195" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="AbstractClasspathResource" method="getInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getInputStream()' is missing an @Override annotation.
</violation>
<violation beginline="241" endline="253" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="AbstractClasspathResource" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="241" endline="253" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractClasspathResource" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="257" endline="257" begincolumn="23" endcolumn="38" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="AbstractClasspathResource$ClassLoaderWithFlag" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field cleanup has the same name as a method
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/AbstractResourceCollectionWrapper.java">
<violation beginline="48" endline="50" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="setCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="56" endline="58" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="isCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="65" endline="65" begincolumn="63" endcolumn="76" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="65" endline="83" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="90" endline="96" begincolumn="31" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="113" endline="119" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="133" endline="150" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="isFilesystemOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isFilesystemOnly()' is missing an @Override annotation.
</violation>
<violation beginline="133" endline="150" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="isFilesystemOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="159" endline="172" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="159" endline="172" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="160" endline="160" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="179" endline="185" begincolumn="34" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="getResourceCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="192" endline="201" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AbstractResourceCollectionWrapper" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/AllButFirst.java">
<violation beginline="44" endline="46" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AllButFirst" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/AllButLast.java">
<violation beginline="51" endline="53" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="AllButLast" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/ArchiveResource.java">
<violation beginline="38" endline="38" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="ArchiveResource" variable="haveEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haveEntry'
</violation>
<violation beginline="39" endline="39" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="ArchiveResource" variable="modeSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'modeSet'
</violation>
<violation beginline="40" endline="40" begincolumn="17" endcolumn="24" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="ArchiveResource" variable="mode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mode'
</violation>
<violation beginline="45" endline="46" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="ArchiveResource" method="ArchiveResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="64" endline="64" begincolumn="9" endcolumn="21" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ArchiveResource" method="ArchiveResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setArchive' called during object construction
</violation>
<violation beginline="75" endline="75" begincolumn="9" endcolumn="24" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ArchiveResource" method="ArchiveResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'addConfigured' called during object construction
</violation>
<violation beginline="257" endline="257" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ArchiveResource" method="checkEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="257" endline="278" begincolumn="34" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="ArchiveResource" method="checkEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="289" endline="301" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="ArchiveResource" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Archives.java">
<violation beginline="95" endline="102" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="Archives" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'iterator()' is missing an @Override annotation.
</violation>
<violation beginline="107" endline="114" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="Archives" method="isFilesystemOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isFilesystemOnly()' is missing an @Override annotation.
</violation>
<violation beginline="136" endline="145" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="Archives" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="136" endline="145" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="Archives" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="196" endline="208" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Archives" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="197" endline="197" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Archives" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/BCFileSet.java">
<violation beginline="34" endline="35" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="BCFileSet" method="BCFileSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/BZip2Resource.java">
<violation beginline="36" endline="36" begincolumn="33" endcolumn="61" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="BZip2Resource" variable="MAGIC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="BZip2Resource" method="BZip2Resource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionContainer.java">
<violation beginline="42" endline="42" begincolumn="34" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" variable="coll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'coll'
</violation>
<violation beginline="48" endline="49" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="BaseResourceCollectionContainer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="64" endline="66" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="setCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="72" endline="74" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="isCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="80" endline="80" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="clear" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="80" endline="88" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="clear" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="95" endline="95" begincolumn="63" endcolumn="76" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="95" endline="112" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="119" endline="119" begincolumn="88" endcolumn="101" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="addAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="119" endline="128" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="addAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="137" endline="143" begincolumn="31" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="150" endline="157" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="164" endline="177" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="isFilesystemOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="186" endline="201" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="186" endline="201" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="187" endline="187" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="207" endline="210" begincolumn="31" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="getResourceCollections" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="224" endline="234" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="224" endline="234" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="241" endline="250" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="257" endline="262" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionContainer" method="cacheCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/BaseResourceCollectionWrapper.java">
<violation beginline="33" endline="33" begincolumn="34" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionWrapper" variable="coll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'coll'
</violation>
<violation beginline="51" endline="56" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="BaseResourceCollectionWrapper" method="cacheCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/CompressedResource.java">
<violation beginline="34" endline="35" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="CompressedResource" method="CompressedResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/ContentTransformingResource.java">
<violation beginline="41" endline="42" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="ContentTransformingResource" method="ContentTransformingResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="64" endline="64" begincolumn="24" endcolumn="66" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ContentTransformingResource" method="getSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="88" endline="88" begincolumn="13" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ContentTransformingResource" method="getInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'in' is reassigned, but the original instance is not closed
</violation>
<violation beginline="105" endline="105" begincolumn="13" endcolumn="33" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ContentTransformingResource" method="getOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'out' is reassigned, but the original instance is not closed
</violation>
<violation beginline="114" endline="129" begincolumn="12" endcolumn="5" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="ContentTransformingResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/FailFast.java">
<violation beginline="41" endline="46" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="FailFast" method="invalidate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="41" endline="46" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="FailFast" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="48" endline="50" begincolumn="33" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="FailFast" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="52" endline="57" begincolumn="33" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="FailFast" method="remove" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="59" endline="64" begincolumn="33" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="FailFast" method="failFast" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="66" endline="66" begincolumn="19" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="FailFast" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="FailFast" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/FileResource.java">
<violation beginline="50" endline="51" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="FileResource" method="FileResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="68" endline="68" begincolumn="9" endcolumn="18" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="FileResource" method="FileResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setFile' called during object construction
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/FileResourceIterator.java">
<violation beginline="35" endline="35" begincolumn="17" endcolumn="23" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="FileResourceIterator" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'pos'
</violation>
<violation beginline="42" endline="43" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="FileResourceIterator" method="FileResourceIterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="85" endline="85" begincolumn="47" endcolumn="64" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="FileResourceIterator" method="FileResourceIterator" variable="filenames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="97" endline="97" begincolumn="64" endcolumn="81" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="FileResourceIterator" method="FileResourceIterator" variable="filenames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="99" endline="99" begincolumn="9" endcolumn="27" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="FileResourceIterator" method="FileResourceIterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'addFiles' called during object construction
</violation>
<violation beginline="106" endline="106" begincolumn="26" endcolumn="35" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="FileResourceIterator" method="addFiles" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Files.java">
<violation beginline="44" endline="44" begincolumn="13" endcolumn="30" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="Files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="44" endline="44" begincolumn="57" endcolumn="64" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="Files" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="51" endline="51" begincolumn="30" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="Files" variable="ds" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ds'
</violation>
<violation beginline="84" endline="84" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Files" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="101" endline="110" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="createPatternSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="116" endline="122" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="createInclude" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="128" endline="134" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="createIncludesFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="140" endline="146" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="createExclude" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="152" endline="158" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="createExcludesFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="168" endline="172" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="setIncludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="180" endline="180" begincolumn="45" endcolumn="61" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="Files" method="appendIncludes" variable="includes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="180" endline="188" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="appendIncludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="198" endline="202" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="setExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="210" endline="210" begincolumn="45" endcolumn="61" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="Files" method="appendExcludes" variable="excludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="210" endline="218" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="appendExcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="226" endline="226" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Files" method="setIncludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="226" endline="230" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="setIncludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="238" endline="238" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Files" method="setExcludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="238" endline="242" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="setExcludesfile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="249" endline="253" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="setDefaultexcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="259" endline="262" begincolumn="25" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="Files" method="getDefaultexcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="259" endline="262" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="getDefaultexcludes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="269" endline="273" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="setCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="281" endline="284" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="isCaseSensitive" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="291" endline="295" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="setFollowSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="303" endline="306" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="isFollowSymlinks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="313" endline="332" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="339" endline="346" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="353" endline="360" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="hasPatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="368" endline="374" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="appendSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="395" endline="406" begincolumn="25" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="Files" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="395" endline="406" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="395" endline="406" begincolumn="25" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="Files" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="401" endline="401" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="Files" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="434" endline="443" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="mergePatterns" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="464" endline="478" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Files" method="ensureDirectoryScannerSetup" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/GZipResource.java">
<violation beginline="39" endline="40" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="GZipResource" method="GZipResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/JavaConstantResource.java">
<violation beginline="60" endline="60" begincolumn="13" endcolumn="66" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="JavaConstantResource" method="openInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="62" endline="63" begincolumn="13" endcolumn="69" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="JavaConstantResource" method="openInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="65" endline="65" begincolumn="13" endcolumn="90" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="JavaConstantResource" method="openInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="66" endline="66" begincolumn="18" endcolumn="37" rule="AvoidCatchingNPE" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="JavaConstantResource" method="openInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingnpe" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
<violation beginline="66" endline="66" begincolumn="18" endcolumn="37" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.resources" class="JavaConstantResource" method="openInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="67" endline="67" begincolumn="13" endcolumn="91" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="JavaConstantResource" method="openInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/JavaResource.java">
<violation beginline="38" endline="39" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="JavaResource" method="JavaResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="60" endline="76" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="JavaResource" method="openInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'openInputStream(ClassLoader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Last.java">
<violation beginline="34" endline="68" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="Last" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Last
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/LazyResourceCollectionWrapper.java">
<violation beginline="81" endline="81" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="LazyResourceCollectionWrapper$FilteringIterator" variable="next" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'next'
</violation>
<violation beginline="81" endline="81" begincolumn="9" endcolumn="29" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="LazyResourceCollectionWrapper$FilteringIterator" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field next has the same name as a method
</violation>
<violation beginline="81" endline="81" begincolumn="9" endcolumn="29" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="LazyResourceCollectionWrapper$FilteringIterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="83" endline="83" begincolumn="17" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="LazyResourceCollectionWrapper$FilteringIterator" variable="ended" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ended'
</violation>
<violation beginline="83" endline="83" begincolumn="9" endcolumn="30" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="LazyResourceCollectionWrapper$FilteringIterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="127" endline="127" begincolumn="13" endcolumn="22" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="LazyResourceCollectionWrapper$CachedIterator" variable="cursor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cursor'
</violation>
<violation beginline="127" endline="127" begincolumn="9" endcolumn="23" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="LazyResourceCollectionWrapper$CachedIterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/LogOutputResource.java">
<violation beginline="34" endline="34" begincolumn="29" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.resources" class="LogOutputResource" variable="outputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'outputStream' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/MappedResource.java">
<violation beginline="76" endline="79" begincolumn="12" endcolumn="5" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="MappedResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/MappedResourceCollection.java">
<violation beginline="47" endline="47" begincolumn="32" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" variable="nested" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nested'
</violation>
<violation beginline="48" endline="48" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" variable="mapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapper'
</violation>
<violation beginline="49" endline="49" begincolumn="21" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" variable="enableMultipleMappings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'enableMultipleMappings'
</violation>
<violation beginline="50" endline="50" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" variable="cache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cache'
</violation>
<violation beginline="51" endline="51" begincolumn="34" endcolumn="50" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" variable="cachedColl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cachedColl'
</violation>
<violation beginline="58" endline="58" begincolumn="63" endcolumn="76" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="58" endline="70" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="77" endline="77" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="177" endline="188" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="177" endline="188" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="198" endline="215" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="199" endline="199" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="226" endline="231" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="MappedResourceCollection" method="cacheCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/MultiRootFileSet.java">
<violation beginline="67" endline="72" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="MultiRootFileSet" method="setCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="114" endline="122" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="MultiRootFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="114" endline="122" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="MultiRootFileSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="170" endline="180" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="MultiRootFileSet" method="merge" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/PropertyResource.java">
<violation beginline="51" endline="52" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="PropertyResource" method="PropertyResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/ResourceDecorator.java">
<violation beginline="44" endline="45" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="ResourceDecorator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="172" endline="174" begincolumn="12" endcolumn="5" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
<violation beginline="196" endline="196" begincolumn="16" endcolumn="25" rule="OverrideBothEqualsAndHashcode" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#overridebothequalsandhashcode" priority="3">
Ensure you override both equals() and hashCode()
</violation>
<violation beginline="220" endline="232" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="222" endline="222" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="242" endline="242" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="setName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="263" endline="263" begincolumn="59" endcolumn="72" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="setLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="274" endline="274" begincolumn="56" endcolumn="69" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="setDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="285" endline="285" begincolumn="43" endcolumn="56" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ResourceDecorator" method="setSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/ResourceList.java">
<violation beginline="48" endline="48" begincolumn="19" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ResourceList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="48" endline="48" begincolumn="58" endcolumn="65" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="ResourceList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="49" endline="49" begincolumn="19" endcolumn="47" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ResourceList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="51" endline="51" begincolumn="30" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="ResourceList" variable="cached" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cached'
</violation>
<violation beginline="52" endline="52" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="ResourceList" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="126" endline="126" begincolumn="46" endcolumn="59" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ResourceList" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="144" endline="149" begincolumn="31" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="ResourceList" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="157" endline="162" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="ResourceList" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="170" endline="175" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="ResourceList" method="isFilesystemOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="186" endline="204" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="ResourceList" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="187" endline="187" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="ResourceList" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="211" endline="219" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="ResourceList" method="cache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="255" endline="260" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ResourceList" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Resources.java">
<violation beginline="79" endline="80" begincolumn="9" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="Resources$MyCollection" method="MyCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="89" endline="99" begincolumn="30" endcolumn="9" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources$MyCollection" method="getCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="101" endline="101" begincolumn="50" endcolumn="52" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Resources$MyCollection$MyIterator" variable="rci" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'rci' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="102" endline="102" begincolumn="40" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="Resources$MyCollection$MyIterator" variable="ri" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ri'
</violation>
<violation beginline="127" endline="127" begincolumn="13" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="Resources" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="128" endline="128" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="Resources" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="129" endline="129" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources" class="Resources" variable="cache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cache'
</violation>
<violation beginline="129" endline="129" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="Resources" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="134" endline="135" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="Resources" method="Resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="151" endline="153" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources" method="setCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="159" endline="173" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="180" endline="186" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="193" endline="199" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="220" endline="230" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="241" endline="241" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Resources" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="272" endline="275" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="277" endline="279" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Resources" method="getNested" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Restrict.java">
<violation beginline="38" endline="38" begincolumn="43" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Restrict" variable="w" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'w' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="52" endline="61" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="67" endline="69" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="setCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="75" endline="77" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="isCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="84" endline="90" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="97" endline="103" begincolumn="31" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="iterator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="110" endline="116" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="123" endline="129" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="isFilesystemOnly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="136" endline="142" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="145" endline="157" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Restrict" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/SizeLimitCollection.java">
<violation beginline="36" endline="39" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="SizeLimitCollection" method="setCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="45" endline="47" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="SizeLimitCollection" method="getCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="54" endline="56" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="SizeLimitCollection" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Sort.java">
<violation beginline="39" endline="90" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources" class="Sort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Sort
</violation>
<violation beginline="41" endline="41" begincolumn="41" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Sort" variable="comp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'comp' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="48" endline="51" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Sort" method="getCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="58" endline="65" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Sort" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="75" endline="88" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Sort" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="76" endline="76" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Sort" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/StringResource.java">
<violation beginline="48" endline="49" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="StringResource" method="StringResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="67" endline="67" begincolumn="9" endcolumn="76" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="StringResource" method="StringResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setValue' called during object construction
</violation>
<violation beginline="75" endline="80" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="setName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="86" endline="88" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="setValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="95" endline="97" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="getName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="103" endline="105" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="132" endline="135" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="setEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="141" endline="143" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="getEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="151" endline="154" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="getSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="161" endline="161" begincolumn="29" endcolumn="38" rule="OverrideBothEqualsAndHashcode" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="StringResource" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#overridebothequalsandhashcode" priority="3">
Ensure you override both equals() and hashCode()
</violation>
<violation beginline="161" endline="167" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="189" endline="199" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="getInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="210" endline="218" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="getOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="226" endline="226" begincolumn="13" endcolumn="40" rule="UseEqualsToCompareStrings" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="StringResource" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#useequalstocomparestrings" priority="3">
Use equals() to compare strings instead of '==' or '!='
</violation>
<violation beginline="236" endline="238" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="StringResource" method="getContent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/TarResource.java">
<violation beginline="46" endline="47" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="TarResource" method="TarResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="85" endline="85" begincolumn="16" endcolumn="46" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="TarResource" method="getInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="182" endline="182" begincolumn="27" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="TarResource" method="fetchEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'te' is never used (overwritten on line 183)
</violation>
<violation beginline="183" endline="183" begincolumn="20" endcolumn="50" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="TarResource" method="fetchEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Tokens.java">
<violation beginline="52" endline="80" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="Tokens" method="getCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCollection()' is missing an @Override annotation.
</violation>
<violation beginline="52" endline="80" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Tokens" method="getCollection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="86" endline="88" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Tokens" method="setEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="95" endline="104" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Tokens" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="114" endline="130" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="Tokens" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="115" endline="115" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources" class="Tokens" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/URLResource.java">
<violation beginline="53" endline="54" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="URLResource" method="URLResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="61" endline="61" begincolumn="9" endcolumn="17" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="URLResource" method="URLResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setURL' called during object construction
</violation>
<violation beginline="69" endline="69" begincolumn="9" endcolumn="26" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="URLResource" method="URLResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setURL' called during object construction
</violation>
<violation beginline="77" endline="77" begincolumn="9" endcolumn="18" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="URLResource" method="URLResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setFile' called during object construction
</violation>
<violation beginline="93" endline="96" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="setURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="102" endline="108" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="setFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="116" endline="122" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="setBaseURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="130" endline="137" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="setRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="144" endline="162" begincolumn="25" endcolumn="6" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="getURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getURL()' is missing an @Override annotation.
</violation>
<violation beginline="144" endline="162" begincolumn="25" endcolumn="6" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="getURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="149" endline="159" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.types.resources" class="URLResource" method="getURL" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="168" endline="174" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setRefid(Reference)' is missing an @Override annotation.
</violation>
<violation beginline="168" endline="174" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="181" endline="187" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="getName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getName()' is missing an @Override annotation.
</violation>
<violation beginline="181" endline="187" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="getName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="193" endline="196" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="193" endline="196" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="202" endline="207" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="isExists" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isExists()' is missing an @Override annotation.
</violation>
<violation beginline="202" endline="207" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="isExists" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="227" endline="227" begincolumn="51" endcolumn="65" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="isExists" variable="closeConnection" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'closeConnection'
</violation>
<violation beginline="227" endline="254" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="isExists" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="239" endline="239" begincolumn="29" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="URLResource" method="isExists" variable="in" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="240" endline="244" begincolumn="17" endcolumn="17" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="isExists" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="263" endline="271" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="getLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLastModified()' is missing an @Override annotation.
</violation>
<violation beginline="263" endline="271" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="getLastModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="277" endline="281" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="isDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isDirectory()' is missing an @Override annotation.
</violation>
<violation beginline="277" endline="281" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="isDirectory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="288" endline="296" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="getSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getSize()' is missing an @Override annotation.
</violation>
<violation beginline="288" endline="296" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="getSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="303" endline="317" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'equals(Object)' is missing an @Override annotation.
</violation>
<violation beginline="303" endline="317" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="323" endline="328" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'hashCode()' is missing an @Override annotation.
</violation>
<violation beginline="323" endline="328" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="338" endline="348" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="getInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getInputStream()' is missing an @Override annotation.
</violation>
<violation beginline="338" endline="348" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="getInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="359" endline="369" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="URLResource" method="getOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getOutputStream()' is missing an @Override annotation.
</violation>
<violation beginline="359" endline="369" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="getOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="387" endline="402" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="connect" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="412" endline="418" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources" class="URLResource" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/Union.java">
<violation beginline="49" endline="50" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="Union" method="Union" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/ZipResource.java">
<violation beginline="48" endline="49" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources" class="ZipResource" method="ZipResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="60" endline="60" begincolumn="9" endcolumn="24" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ZipResource" method="ZipResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setEncoding' called during object construction
</violation>
<violation beginline="86" endline="91" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="addConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addConfigured(ResourceCollection)' is missing an @Override annotation.
</violation>
<violation beginline="115" endline="120" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="setRefid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setRefid(Reference)' is missing an @Override annotation.
</violation>
<violation beginline="128" endline="152" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="getInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getInputStream()' is missing an @Override annotation.
</violation>
<violation beginline="132" endline="132" begincolumn="23" endcolumn="23" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ZipResource" method="getInputStream" variable="z" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this ZipFile object are closed after use
</violation>
<violation beginline="140" endline="143" begincolumn="20" endcolumn="13" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'close()' is missing an @Override annotation.
</violation>
<violation beginline="144" endline="150" begincolumn="23" endcolumn="13" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="finalize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'finalize()' is missing an @Override annotation.
</violation>
<violation beginline="162" endline="168" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="getOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getOutputStream()' is missing an @Override annotation.
</violation>
<violation beginline="183" endline="183" begincolumn="9" endcolumn="22" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="getExtraFields" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'extras' may expose an internal array.
</violation>
<violation beginline="198" endline="209" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="fetchEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'fetchEntry()' is missing an @Override annotation.
</violation>
<violation beginline="199" endline="199" begincolumn="17" endcolumn="17" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.resources" class="ZipResource" method="fetchEntry" variable="z" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this ZipFile object are closed after use
</violation>
<violation beginline="200" endline="208" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.types.resources" class="ZipResource" method="fetchEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/Content.java">
<violation beginline="62" endline="68" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Content" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/Date.java">
<violation beginline="28" endline="41" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.comparators" class="Date" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Date
</violation>
<violation beginline="36" endline="39" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Date" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/DelegatedResourceComparator.java">
<violation beginline="37" endline="37" begincolumn="38" endcolumn="63" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources.comparators" class="DelegatedResourceComparator" variable="resourceComparators" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'resourceComparators'
</violation>
<violation beginline="43" endline="53" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.comparators" class="DelegatedResourceComparator" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="50" endline="50" begincolumn="67" endcolumn="74" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.resources.comparators" class="DelegatedResourceComparator" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="62" endline="74" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.comparators" class="DelegatedResourceComparator" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="81" endline="86" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.comparators" class="DelegatedResourceComparator" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="90" endline="92" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.comparators" class="DelegatedResourceComparator" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="103" endline="103" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources.comparators" class="DelegatedResourceComparator" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/Exists.java">
<violation beginline="37" endline="39" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Exists" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/FileSystem.java">
<violation beginline="45" endline="47" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="FileSystem" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/Name.java">
<violation beginline="26" endline="38" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.comparators" class="Name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Name
</violation>
<violation beginline="34" endline="36" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Name" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/ResourceComparator.java">
<violation beginline="64" endline="69" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.comparators" class="ResourceComparator" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/Reverse.java">
<violation beginline="42" endline="43" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.comparators" class="Reverse" method="Reverse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="50" endline="50" begincolumn="9" endcolumn="14" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources.comparators" class="Reverse" method="Reverse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="72" endline="75" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Reverse" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
<violation beginline="77" endline="90" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Reverse" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="78" endline="78" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources.comparators" class="Reverse" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/Size.java">
<violation beginline="28" endline="40" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.comparators" class="Size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Size
</violation>
<violation beginline="36" endline="38" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Size" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/comparators/Type.java">
<violation beginline="29" endline="42" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.comparators" class="Type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Type
</violation>
<violation beginline="38" endline="40" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.comparators" class="Type" method="resourceCompare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'resourceCompare(Resource, Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/And.java">
<violation beginline="26" endline="51" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="And" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like And
</violation>
<violation beginline="31" endline="32" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="And" method="And" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="47" endline="49" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="And" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Compare.java">
<violation beginline="40" endline="40" begincolumn="41" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.resources.selectors" class="Compare" variable="comp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'comp' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="52" endline="58" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="64" endline="69" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="setAgainst" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="75" endline="80" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="setWhen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="87" endline="97" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="createControl" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="101" endline="118" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
<violation beginline="101" endline="118" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="109" endline="109" begincolumn="9" endcolumn="24" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="isSelected" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="127" endline="141" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="127" endline="141" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="128" endline="128" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources.selectors" class="Compare" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Date.java">
<violation beginline="38" endline="161" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Date" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Date
</violation>
<violation beginline="38" endline="161" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types.resources.selectors" class="Date" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Date' is suspected to be a Data Class (WOC=9.091%, NOPA=0, NOAM=10, WMC=22)
</violation>
<violation beginline="43" endline="43" begincolumn="18" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources.selectors" class="Date" variable="millis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'millis'
</violation>
<violation beginline="44" endline="44" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources.selectors" class="Date" variable="dateTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dateTime'
</violation>
<violation beginline="45" endline="45" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources.selectors" class="Date" variable="pattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'pattern'
</violation>
<violation beginline="53" endline="55" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="setMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="61" endline="63" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="getMillis" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="69" endline="72" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="setDateTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="78" endline="80" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="getDatetime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="86" endline="88" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="setGranularity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="94" endline="96" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="getGranularity" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="102" endline="104" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="setPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="110" endline="112" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="getPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="118" endline="120" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="setWhen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="126" endline="128" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="getWhen" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="135" endline="159" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
<violation beginline="135" endline="159" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="143" endline="143" begincolumn="19" endcolumn="41" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="153" endline="155" begincolumn="17" endcolumn="33" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Date" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Exists.java">
<violation beginline="33" endline="35" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Exists" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/InstanceOf.java">
<violation beginline="105" endline="127" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="InstanceOf" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Majority.java">
<violation beginline="36" endline="37" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="Majority" method="Majority" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="51" endline="53" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Majority" method="setAllowtie" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="60" endline="82" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Majority" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
<violation beginline="60" endline="82" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.resources.selectors" class="Majority" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Name.java">
<violation beginline="31" endline="150" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Name
</violation>
<violation beginline="32" endline="32" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources.selectors" class="Name" variable="regex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'regex'
</violation>
<violation beginline="35" endline="35" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources.selectors" class="Name" variable="handleDirSep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'handleDirSep'
</violation>
<violation beginline="123" endline="130" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Name" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/None.java">
<violation beginline="26" endline="52" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="None" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like None
</violation>
<violation beginline="32" endline="33" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="None" method="None" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="48" endline="50" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="None" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Not.java">
<violation beginline="26" endline="66" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Not" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Not
</violation>
<violation beginline="33" endline="34" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="Not" method="Not" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="41" endline="41" begincolumn="9" endcolumn="14" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources.selectors" class="Not" method="Not" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="62" endline="64" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Not" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Or.java">
<violation beginline="26" endline="51" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Or" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Or
</violation>
<violation beginline="31" endline="32" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="Or" method="Or" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="47" endline="49" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Or" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/ResourceSelectorContainer.java">
<violation beginline="41" endline="42" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="ResourceSelectorContainer" method="ResourceSelectorContainer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="50" endline="50" begincolumn="13" endcolumn="21" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources.selectors" class="ResourceSelectorContainer" method="ResourceSelectorContainer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'add' called during object construction
</violation>
<violation beginline="122" endline="137" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="ResourceSelectorContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="123" endline="123" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.resources.selectors" class="ResourceSelectorContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Size.java">
<violation beginline="27" endline="73" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Size
</violation>
<violation beginline="27" endline="73" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types.resources.selectors" class="Size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Size' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=6)
</violation>
<violation beginline="28" endline="28" begincolumn="13" endcolumn="27" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources.selectors" class="Size" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="68" endline="71" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Size" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/resources/selectors/Type.java">
<violation beginline="28" endline="110" begincolumn="8" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Type
</violation>
<violation beginline="28" endline="110" begincolumn="8" endcolumn="1" rule="DataClass" ruleset="Design" package="org.apache.tools.ant.types.resources.selectors" class="Type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'Type' is suspected to be a Data Class (WOC=25.000%, NOPA=3, NOAM=1, WMC=7)
</violation>
<violation beginline="47" endline="47" begincolumn="39" endcolumn="91" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Type$FileDir" variable="VALUES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="52" endline="53" begincolumn="16" endcolumn="9" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="Type$FileDir" method="FileDir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="69" endline="69" begincolumn="13" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Type$FileDir" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'VALUES' may expose an internal array.
</violation>
<violation beginline="73" endline="73" begincolumn="21" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.resources.selectors" class="Type" variable="type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'type'
</violation>
<violation beginline="73" endline="73" begincolumn="13" endcolumn="32" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.types.resources.selectors" class="Type" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="73" endline="73" begincolumn="13" endcolumn="32" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.types.resources.selectors" class="Type" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="78" endline="79" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.resources.selectors" class="Type" method="Type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="86" endline="86" begincolumn="9" endcolumn="19" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.types.resources.selectors" class="Type" method="Type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setType' called during object construction
</violation>
<violation beginline="102" endline="108" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.resources.selectors" class="Type" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/AbstractSelectorContainer.java">
<violation beginline="63" endline="69" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="selectorCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'selectorCount()' is missing an @Override annotation.
</violation>
<violation beginline="76" endline="83" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="getSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getSelectors(Project)' is missing an @Override annotation.
</violation>
<violation beginline="82" endline="82" begincolumn="16" endcolumn="76" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="getSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="89" endline="95" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="selectorElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'selectorElements()' is missing an @Override annotation.
</violation>
<violation beginline="104" endline="107" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="114" endline="120" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="appendSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'appendSelector(FileSelector)' is missing an @Override annotation.
</violation>
<violation beginline="154" endline="156" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addSelector(SelectSelector)' is missing an @Override annotation.
</violation>
<violation beginline="162" endline="164" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addAnd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addAnd(AndSelector)' is missing an @Override annotation.
</violation>
<violation beginline="170" endline="172" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addOr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addOr(OrSelector)' is missing an @Override annotation.
</violation>
<violation beginline="178" endline="180" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addNot" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addNot(NotSelector)' is missing an @Override annotation.
</violation>
<violation beginline="186" endline="188" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addNone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addNone(NoneSelector)' is missing an @Override annotation.
</violation>
<violation beginline="194" endline="196" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addMajority" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addMajority(MajoritySelector)' is missing an @Override annotation.
</violation>
<violation beginline="202" endline="204" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDate(DateSelector)' is missing an @Override annotation.
</violation>
<violation beginline="210" endline="212" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addSize(SizeSelector)' is missing an @Override annotation.
</violation>
<violation beginline="218" endline="220" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addFilename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addFilename(FilenameSelector)' is missing an @Override annotation.
</violation>
<violation beginline="226" endline="228" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addCustom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addCustom(ExtendSelector)' is missing an @Override annotation.
</violation>
<violation beginline="234" endline="236" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addContains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addContains(ContainsSelector)' is missing an @Override annotation.
</violation>
<violation beginline="242" endline="244" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addPresent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addPresent(PresentSelector)' is missing an @Override annotation.
</violation>
<violation beginline="250" endline="252" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addDepth" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDepth(DepthSelector)' is missing an @Override annotation.
</violation>
<violation beginline="258" endline="260" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addDepend" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDepend(DependSelector)' is missing an @Override annotation.
</violation>
<violation beginline="266" endline="268" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addDifferent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDifferent(DifferentSelector)' is missing an @Override annotation.
</violation>
<violation beginline="274" endline="276" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addType(TypeSelector)' is missing an @Override annotation.
</violation>
<violation beginline="282" endline="284" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addContainsRegexp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addContainsRegexp(ContainsRegexpSelector)' is missing an @Override annotation.
</violation>
<violation beginline="291" endline="293" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="addModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addModified(ModifiedSelector)' is missing an @Override annotation.
</violation>
<violation beginline="348" endline="350" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'add(FileSelector)' is missing an @Override annotation.
</violation>
<violation beginline="352" endline="366" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="352" endline="366" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="368" endline="380" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'clone()' is missing an @Override annotation.
</violation>
<violation beginline="368" endline="380" begincolumn="25" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="368" endline="380" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="368" endline="380" begincolumn="25" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="375" endline="375" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="AbstractSelectorContainer" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/AndSelector.java">
<violation beginline="35" endline="43" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AndSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="55" endline="59" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="AndSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/BaseExtendSelector.java">
<violation beginline="39" endline="39" begincolumn="27" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="BaseExtendSelector" variable="parameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parameters'
</violation>
<violation beginline="50" endline="50" begincolumn="31" endcolumn="53" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseExtendSelector" method="setParameters" variable="parameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'parameters' is stored directly.
</violation>
<violation beginline="61" endline="61" begincolumn="9" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseExtendSelector" method="getParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'parameters' may expose an internal array.
</violation>
<violation beginline="76" endline="78" begincolumn="21" endcolumn="34" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseExtendSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
<violation beginline="78" endline="78" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="BaseExtendSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/BaseSelector.java">
<violation beginline="36" endline="36" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="BaseSelector" variable="errmsg" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'errmsg'
</violation>
<violation beginline="114" endline="115" begincolumn="21" endcolumn="50" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/BaseSelectorContainer.java">
<violation beginline="42" endline="42" begincolumn="32" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" variable="selectorsList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'selectorsList' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="48" endline="51" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="hasSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'hasSelectors()' is missing an @Override annotation.
</violation>
<violation beginline="57" endline="60" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="selectorCount" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'selectorCount()' is missing an @Override annotation.
</violation>
<violation beginline="67" endline="70" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="getSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getSelectors(Project)' is missing an @Override annotation.
</violation>
<violation beginline="69" endline="69" begincolumn="16" endcolumn="76" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="getSelectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="76" endline="79" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="selectorElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'selectorElements()' is missing an @Override annotation.
</violation>
<violation beginline="88" endline="92" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="99" endline="102" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="appendSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'appendSelector(FileSelector)' is missing an @Override annotation.
</violation>
<violation beginline="120" endline="129" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="validate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'validate()' is missing an @Override annotation.
</violation>
<violation beginline="141" endline="142" begincolumn="21" endcolumn="19" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
<violation beginline="150" endline="152" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addSelector(SelectSelector)' is missing an @Override annotation.
</violation>
<violation beginline="158" endline="160" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addAnd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addAnd(AndSelector)' is missing an @Override annotation.
</violation>
<violation beginline="166" endline="168" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addOr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addOr(OrSelector)' is missing an @Override annotation.
</violation>
<violation beginline="174" endline="176" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addNot" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addNot(NotSelector)' is missing an @Override annotation.
</violation>
<violation beginline="182" endline="184" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addNone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addNone(NoneSelector)' is missing an @Override annotation.
</violation>
<violation beginline="190" endline="192" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addMajority" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addMajority(MajoritySelector)' is missing an @Override annotation.
</violation>
<violation beginline="198" endline="200" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addDate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDate(DateSelector)' is missing an @Override annotation.
</violation>
<violation beginline="206" endline="208" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addSize(SizeSelector)' is missing an @Override annotation.
</violation>
<violation beginline="214" endline="216" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addFilename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addFilename(FilenameSelector)' is missing an @Override annotation.
</violation>
<violation beginline="222" endline="224" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addCustom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addCustom(ExtendSelector)' is missing an @Override annotation.
</violation>
<violation beginline="230" endline="232" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addContains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addContains(ContainsSelector)' is missing an @Override annotation.
</violation>
<violation beginline="238" endline="240" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addPresent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addPresent(PresentSelector)' is missing an @Override annotation.
</violation>
<violation beginline="246" endline="248" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addDepth" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDepth(DepthSelector)' is missing an @Override annotation.
</violation>
<violation beginline="254" endline="256" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addDepend" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDepend(DependSelector)' is missing an @Override annotation.
</violation>
<violation beginline="262" endline="264" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addDifferent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addDifferent(DifferentSelector)' is missing an @Override annotation.
</violation>
<violation beginline="270" endline="272" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addType" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addType(TypeSelector)' is missing an @Override annotation.
</violation>
<violation beginline="278" endline="280" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addContainsRegexp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addContainsRegexp(ContainsRegexpSelector)' is missing an @Override annotation.
</violation>
<violation beginline="287" endline="289" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="addModified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'addModified(ModifiedSelector)' is missing an @Override annotation.
</violation>
<violation beginline="344" endline="346" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'add(FileSelector)' is missing an @Override annotation.
</violation>
<violation beginline="348" endline="363" begincolumn="28" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'dieOnCircularReference(Stack, Project)' is missing an @Override annotation.
</violation>
<violation beginline="348" endline="363" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="349" endline="349" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="BaseSelectorContainer" method="dieOnCircularReference" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/ContainsRegexpSelector.java">
<violation beginline="53" endline="53" begincolumn="20" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" variable="userProvidedExpression" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'userProvidedExpression'
</violation>
<violation beginline="54" endline="54" begincolumn="31" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" variable="myRegExp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'myRegExp'
</violation>
<violation beginline="55" endline="55" begincolumn="20" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" variable="myExpression" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'myExpression'
</violation>
<violation beginline="57" endline="57" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" variable="multiLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'multiLine'
</violation>
<violation beginline="58" endline="58" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" variable="singleLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'singleLine'
</violation>
<violation beginline="63" endline="66" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="111" endline="129" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" method="setParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setParameters(Parameter...)' is missing an @Override annotation.
</violation>
<violation beginline="135" endline="139" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
<violation beginline="149" endline="151" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
<violation beginline="159" endline="193" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
<violation beginline="187" endline="187" begincolumn="17" endcolumn="79" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsRegexpSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/ContainsSelector.java">
<violation beginline="51" endline="51" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" variable="contains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'contains'
</violation>
<violation beginline="53" endline="53" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" variable="ignorewhitespace" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignorewhitespace'
</violation>
<violation beginline="54" endline="54" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="59" endline="62" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="107" endline="125" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="setParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setParameters(Parameter...)' is missing an @Override annotation.
</violation>
<violation beginline="132" endline="136" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
<violation beginline="147" endline="149" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
<violation beginline="158" endline="198" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
<violation beginline="168" endline="168" begincolumn="23" endcolumn="44" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="180" endline="180" begincolumn="35" endcolumn="55" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="192" endline="192" begincolumn="17" endcolumn="79" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ContainsSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/DateSelector.java">
<violation beginline="56" endline="56" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="DateSelector" variable="dateTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dateTime'
</violation>
<violation beginline="57" endline="57" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="DateSelector" variable="includeDirs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeDirs'
</violation>
<violation beginline="65" endline="75" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DateSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="67" endline="67" begincolumn="9" endcolumn="29" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="DateSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="68" endline="68" begincolumn="9" endcolumn="57" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="DateSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="160" endline="192" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DateSelector" method="setParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setParameters(Parameter...)' is missing an @Override annotation.
</violation>
<violation beginline="198" endline="221" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DateSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
<violation beginline="206" endline="206" begincolumn="19" endcolumn="41" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="DateSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="232" endline="236" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DateSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/DependSelector.java">
<violation beginline="36" endline="53" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DependSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="61" endline="63" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DependSelector" method="selectionTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'selectionTest(File, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/DepthSelector.java">
<violation beginline="52" endline="54" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DepthSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="80" endline="104" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DepthSelector" method="setParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setParameters(Parameter...)' is missing an @Override annotation.
</violation>
<violation beginline="110" endline="117" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DepthSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
<violation beginline="131" endline="164" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DepthSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/DifferentSelector.java">
<violation beginline="56" endline="56" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="DifferentSelector" variable="ignoreContents" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreContents'
</violation>
<violation beginline="81" endline="114" begincolumn="15" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="DifferentSelector" method="selectionTest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'selectionTest(File, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/ExecutableSelector.java">
<violation beginline="36" endline="38" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ExecutableSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/ExtendSelector.java">
<violation beginline="40" endline="40" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" variable="classname" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classname'
</violation>
<violation beginline="41" endline="41" begincolumn="26" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" variable="dynselector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dynselector'
</violation>
<violation beginline="42" endline="42" begincolumn="29" endcolumn="38" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" variable="parameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'parameters' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="44" endline="44" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="66" endline="66" begincolumn="36" endcolumn="37" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" method="selectorCreate" variable="al" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
<violation beginline="153" endline="169" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
<violation beginline="183" endline="192" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
<violation beginline="184" endline="184" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="189" endline="189" begincolumn="17" endcolumn="68" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="ExtendSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/FileSelector.java">
<violation beginline="48" endline="48" begincolumn="20" endcolumn="33" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="FileSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="56" endline="59" begincolumn="13" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="FileSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(Resource)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/FilenameSelector.java">
<violation beginline="44" endline="44" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" variable="pattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'pattern'
</violation>
<violation beginline="45" endline="45" begincolumn="20" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" variable="regex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'regex'
</violation>
<violation beginline="48" endline="48" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" variable="negated" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'negated'
</violation>
<violation beginline="57" endline="69" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="65" endline="65" begincolumn="9" endcolumn="48" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="66" endline="66" begincolumn="9" endcolumn="61" rule="ConsecutiveAppendsShouldReuse" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveappendsshouldreuse" priority="3">
StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.
</violation>
<violation beginline="78" endline="78" begincolumn="32" endcolumn="38" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="setName" variable="pattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pattern'
</violation>
<violation beginline="78" endline="78" begincolumn="32" endcolumn="38" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="setName" variable="pattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pattern'
</violation>
<violation beginline="125" endline="144" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="setParameters" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'setParameters(Parameter...)' is missing an @Override annotation.
</violation>
<violation beginline="151" endline="157" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
<violation beginline="171" endline="184" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="FilenameSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/MajoritySelector.java">
<violation beginline="42" endline="50" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="MajoritySelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="74" endline="94" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="MajoritySelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/MappingSelector.java">
<violation beginline="40" endline="40" begincolumn="20" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="MappingSelector" variable="targetdir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetdir'
</violation>
<violation beginline="41" endline="41" begincolumn="22" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="MappingSelector" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="42" endline="42" begincolumn="30" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="MappingSelector" variable="map" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'map'
</violation>
<violation beginline="62" endline="62" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="MappingSelector" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/NoneSelector.java">
<violation beginline="36" endline="44" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="NoneSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="56" endline="60" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="NoneSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/NotSelector.java">
<violation beginline="35" endline="36" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.selectors" class="NotSelector" method="NotSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="51" endline="59" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="NotSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="65" endline="70" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="NotSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/OrSelector.java">
<violation beginline="35" endline="43" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="OrSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="55" endline="59" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="OrSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/OwnedBySelector.java">
<violation beginline="72" endline="74" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="OwnedBySelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/PosixGroupSelector.java">
<violation beginline="72" endline="74" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="PosixGroupSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/PosixPermissionsSelector.java">
<violation beginline="82" endline="84" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="PosixPermissionsSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/PresentSelector.java">
<violation beginline="39" endline="39" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="PresentSelector" variable="targetdir" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'targetdir'
</violation>
<violation beginline="40" endline="40" begincolumn="20" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="PresentSelector" variable="mapperElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mapperElement'
</violation>
<violation beginline="41" endline="41" begincolumn="28" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="PresentSelector" variable="map" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'map'
</violation>
<violation beginline="85" endline="85" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="PresentSelector" method="createMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/SelectSelector.java">
<violation beginline="45" endline="62" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="70" endline="70" begincolumn="9" endcolumn="34" rule="UnnecessaryLocalBeforeReturn" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SelectSelector" method="getRef" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn" priority="3">
Consider simply returning the value vs storing it in local variable 'o'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/SelectorScanner.java">
<violation beginline="32" endline="32" begincolumn="23" endcolumn="46" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorScanner" method="setSelectors" variable="selectors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java">
<violation beginline="136" endline="160" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="146" endline="146" begincolumn="17" endcolumn="46" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="matchPatternStart" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="211" endline="310" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="221" endline="221" begincolumn="17" endcolumn="46" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="matchPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="233" endline="233" begincolumn="22" endcolumn="64" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="matchPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="247" endline="247" begincolumn="17" endcolumn="46" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="matchPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="259" endline="259" begincolumn="22" endcolumn="64" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="matchPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="269" endline="269" begincolumn="21" endcolumn="63" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="matchPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="294" endline="294" begincolumn="17" endcolumn="22" rule="AvoidBranchingStatementAsLastInLoop" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="matchPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop" priority="2">
Avoid using a branching statement as the last in a loop.
</violation>
<violation beginline="449" endline="449" begincolumn="17" endcolumn="22" rule="AvoidBranchingStatementAsLastInLoop" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="match" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop" priority="2">
Avoid using a branching statement as the last in a loop.
</violation>
<violation beginline="488" endline="488" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="tokenizePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="501" endline="501" begincolumn="54" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="tokenizePath" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'path'
</violation>
<violation beginline="501" endline="501" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="tokenizePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="502" endline="502" begincolumn="34" endcolumn="41" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="tokenizePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="519" endline="519" begincolumn="48" endcolumn="51" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" method="tokenizePathAsArray" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'path'
</violation>
<violation beginline="519" endline="564" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SelectorUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/SignedSelector.java">
<violation beginline="31" endline="31" begincolumn="22" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.selectors" class="SignedSelector" variable="isSigned" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'isSigned' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/SizeSelector.java">
<violation beginline="38" endline="38" begincolumn="38" endcolumn="44" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SizeSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 1000000 should separate every third digit with an underscore
</violation>
<violation beginline="40" endline="40" begincolumn="38" endcolumn="44" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SizeSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 1048576 should separate every third digit with an underscore
</violation>
<violation beginline="42" endline="42" begincolumn="38" endcolumn="48" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SizeSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 1000000000L should separate every third digit with an underscore
</violation>
<violation beginline="44" endline="44" begincolumn="38" endcolumn="48" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SizeSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 1073741824L should separate every third digit with an underscore
</violation>
<violation beginline="46" endline="46" begincolumn="38" endcolumn="51" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SizeSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 1000000000000L should separate every third digit with an underscore
</violation>
<violation beginline="48" endline="48" begincolumn="38" endcolumn="51" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="SizeSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 1099511627776L should separate every third digit with an underscore
</violation>
<violation beginline="70" endline="73" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SizeSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="195" endline="203" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SizeSelector" method="verifySettings" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'verifySettings()' is missing an @Override annotation.
</violation>
<violation beginline="251" endline="261" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SizeSelector$ByteUnits" method="getValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValues()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/SymlinkSelector.java">
<violation beginline="35" endline="37" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="SymlinkSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isSelected(File, String, File)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/TokenizedPath.java">
<violation beginline="44" endline="44" begincolumn="36" endcolumn="70" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" variable="CS_SCAN_ONLY" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="46" endline="46" begincolumn="36" endcolumn="79" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" variable="CS_THEN_NON_CS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="49" endline="49" begincolumn="19" endcolumn="41" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="80" endline="80" begincolumn="32" endcolumn="46" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" method="TokenizedPath" variable="tokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="80" endline="80" begincolumn="32" endcolumn="46" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" method="TokenizedPath" variable="tokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'tokens' is stored directly.
</violation>
<violation beginline="102" endline="104" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="103" endline="103" begincolumn="9" endcolumn="29" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" method="getTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'tokenizedPath' may expose an internal array.
</violation>
<violation beginline="114" endline="114" begincolumn="31" endcolumn="34" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" method="findFile" variable="base" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'base'
</violation>
<violation beginline="141" endline="141" begincolumn="35" endcolumn="38" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" method="isSymlink" variable="base" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'base'
</violation>
<violation beginline="181" endline="181" begincolumn="39" endcolumn="42" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPath" method="findFile" variable="base" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'base'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/TokenizedPattern.java">
<violation beginline="43" endline="43" begincolumn="19" endcolumn="44" rule="AvoidFieldNameMatchingTypeName" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors" class="TokenizedPattern" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename" priority="3">
It is somewhat confusing to have a field name matching the declaring class name
</violation>
<violation beginline="54" endline="54" begincolumn="38" endcolumn="52" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPattern" method="TokenizedPattern" variable="tokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="54" endline="54" begincolumn="38" endcolumn="52" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPattern" method="TokenizedPattern" variable="tokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'tokens' is stored directly.
</violation>
<violation beginline="92" endline="94" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPattern" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
<violation beginline="105" endline="108" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPattern" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'equals(Object)' is missing an @Override annotation.
</violation>
<violation beginline="110" endline="112" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TokenizedPattern" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'hashCode()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/TypeSelector.java">
<violation beginline="36" endline="36" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors" class="TypeSelector" variable="type" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'type'
</violation>
<violation beginline="41" endline="43" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors" class="TypeSelector" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/modifiedselector/ChecksumAlgorithm.java">
<violation beginline="69" endline="69" begincolumn="22" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ChecksumAlgorithm" variable="checksum" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'checksum'
</violation>
<violation beginline="128" endline="129" begincolumn="44" endcolumn="17" rule="EmptyWhileStmt" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ChecksumAlgorithm" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptywhilestmt" priority="3">
Avoid empty while statements
</violation>
<violation beginline="131" endline="131" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ChecksumAlgorithm" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/modifiedselector/DigestAlgorithm.java">
<violation beginline="77" endline="77" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="DigestAlgorithm" variable="provider" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'provider'
</violation>
<violation beginline="82" endline="82" begincolumn="27" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="DigestAlgorithm" variable="messageDigest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'messageDigest'
</violation>
<violation beginline="82" endline="82" begincolumn="13" endcolumn="47" rule="AvoidMessageDigestField" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="DigestAlgorithm" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidmessagedigestfield" priority="3">
You shouldnt declare field of MessageDigest type, because unsynchronized access could cause problems
</violation>
<violation beginline="87" endline="87" begincolumn="17" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="DigestAlgorithm" variable="readBufferSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'readBufferSize' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="165" endline="166" begincolumn="60" endcolumn="13" rule="EmptyWhileStmt" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors.modifiedselector" class="DigestAlgorithm" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptywhilestmt" priority="3">
Avoid empty while statements
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/modifiedselector/EqualComparator.java">
<violation beginline="41" endline="49" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="EqualComparator" method="compare" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'compare(Object, Object)' is missing an @Override annotation.
</violation>
<violation beginline="55" endline="57" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="EqualComparator" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/modifiedselector/HashvalueAlgorithm.java">
<violation beginline="42" endline="44" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="HashvalueAlgorithm" method="isValid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isValid()' is missing an @Override annotation.
</violation>
<violation beginline="55" endline="69" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="HashvalueAlgorithm" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getValue(File)' is missing an @Override annotation.
</violation>
<violation beginline="56" endline="56" begincolumn="16" endcolumn="16" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors.modifiedselector" class="HashvalueAlgorithm" method="getValue" variable="r" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this Reader object are closed after use
</violation>
<violation beginline="57" endline="68" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="HashvalueAlgorithm" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="61" endline="61" begincolumn="21" endcolumn="30" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="HashvalueAlgorithm" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
<violation beginline="64" endline="64" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="HashvalueAlgorithm" method="getValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="76" endline="78" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="HashvalueAlgorithm" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'toString()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/modifiedselector/ModifiedSelector.java">
<violation beginline="158" endline="158" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="cacheName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cacheName'
</violation>
<violation beginline="164" endline="164" begincolumn="27" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="algoName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'algoName'
</violation>
<violation beginline="170" endline="170" begincolumn="28" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="compName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'compName'
</violation>
<violation beginline="195" endline="195" begincolumn="40" endcolumn="56" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="comparator" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'comparator'
</violation>
<violation beginline="198" endline="198" begincolumn="23" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="algorithm" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'algorithm'
</violation>
<violation beginline="201" endline="201" begincolumn="19" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="cache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cache'
</violation>
<violation beginline="204" endline="204" begincolumn="17" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="modified" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'modified'
</violation>
<violation beginline="207" endline="207" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="isConfigured" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'isConfigured'
</violation>
<violation beginline="213" endline="213" begincolumn="29" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="configParameter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'configParameter' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="222" endline="222" begincolumn="29" endcolumn="44" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="specialParameter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'specialParameter' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="226" endline="226" begincolumn="25" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="myClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'myClassLoader'
</violation>
<violation beginline="229" endline="229" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" variable="classpath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'classpath'
</violation>
<violation beginline="236" endline="237" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" method="ModifiedSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="236" endline="237" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" method="ModifiedSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="415" endline="415" begincolumn="13" endcolumn="83" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="416" endline="416" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="463" endline="463" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" method="isSelected" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="608" endline="610" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" method="getDelayUpdate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="763" endline="765" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.types.selectors.modifiedselector" class="ModifiedSelector" method="tryToSetAParameter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/selectors/modifiedselector/PropertiesfileCache.java">
<violation beginline="63" endline="63" begincolumn="18" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="PropertiesfileCache" variable="cachefile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cachefile'
</violation>
<violation beginline="73" endline="73" begincolumn="21" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.types.selectors.modifiedselector" class="PropertiesfileCache" variable="cacheLoaded" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cacheLoaded'
</violation>
<violation beginline="83" endline="84" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.types.selectors.modifiedselector" class="PropertiesfileCache" method="PropertiesfileCache" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="137" endline="137" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="PropertiesfileCache" method="load" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="138" endline="138" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="PropertiesfileCache" method="load" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="163" endline="163" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.types.selectors.modifiedselector" class="PropertiesfileCache" method="save" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="164" endline="164" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.types.selectors.modifiedselector" class="PropertiesfileCache" method="save" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/types/spi/Service.java">
<violation beginline="37" endline="37" begincolumn="28" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.types.spi" class="Service" variable="providerList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'providerList' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/Base64Converter.java">
<violation beginline="109" endline="109" begincolumn="17" endcolumn="26" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="Base64Converter" method="encode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The updated value of variable 'outIndex' is never used
</violation>
<violation beginline="120" endline="120" begincolumn="17" endcolumn="26" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="Base64Converter" method="encode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The updated value of variable 'outIndex' is never used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ClasspathUtils.java">
<violation beginline="319" endline="319" begincolumn="25" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ClasspathUtils$Delegate" variable="reverseLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reverseLoader'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/CollectionUtils.java">
<violation beginline="55" endline="55" begincolumn="34" endcolumn="42" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="CollectionUtils" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="55" endline="55" begincolumn="48" endcolumn="56" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="CollectionUtils" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="139" endline="139" begincolumn="39" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="CollectionUtils$EmptyEnumeration" method="nextElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="224" endline="224" begincolumn="23" endcolumn="44" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.ant.util" class="CollectionUtils$CompoundEnumeration" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="237" endline="237" begincolumn="39" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="CollectionUtils$CompoundEnumeration" method="nextElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/CompositeMapper.java">
<violation beginline="30" endline="35" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="CompositeMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'mapFileName(String)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ConcatFileInputStream.java">
<violation beginline="39" endline="39" begincolumn="21" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ConcatFileInputStream" variable="eof" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'eof'
</violation>
<violation beginline="40" endline="40" begincolumn="20" endcolumn="23" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="ConcatFileInputStream" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'file' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="50" endline="50" begincolumn="34" endcolumn="44" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ConcatFileInputStream" method="ConcatFileInputStream" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="50" endline="50" begincolumn="34" endcolumn="44" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ConcatFileInputStream" method="ConcatFileInputStream" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'file' is stored directly.
</violation>
<violation beginline="107" endline="107" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ConcatFileInputStream" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="109" endline="109" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ConcatFileInputStream" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ConcatResourceInputStream.java">
<violation beginline="39" endline="39" begincolumn="21" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ConcatResourceInputStream" variable="eof" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'eof'
</violation>
<violation beginline="40" endline="40" begincolumn="32" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="ConcatResourceInputStream" variable="iter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'iter' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="43" endline="43" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ConcatResourceInputStream" variable="ignoreErrors" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'ignoreErrors'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ContainerMapper.java">
<violation beginline="34" endline="34" begincolumn="34" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="ContainerMapper" variable="mappers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'mappers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="65" endline="73" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ContainerMapper" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="81" endline="92" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ContainerMapper" method="contains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="98" endline="100" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ContainerMapper" method="getMappers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="107" endline="109" begincolumn="12" endcolumn="5" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant.util" class="ContainerMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
<violation beginline="116" endline="118" begincolumn="12" endcolumn="5" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant.util" class="ContainerMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/DOMElementWriter.java">
<violation beginline="72" endline="72" begincolumn="33" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="DOMElementWriter" variable="nsPrefixMap" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nsPrefixMap' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="77" endline="77" begincolumn="17" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="DOMElementWriter" variable="nextPrefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nextPrefix'
</violation>
<violation beginline="82" endline="82" begincolumn="40" endcolumn="53" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="DOMElementWriter" variable="nsURIByElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'nsURIByElement' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="90" endline="90" begincolumn="25" endcolumn="39" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="DOMElementWriter$XmlNamespacePolicy" variable="qualifyElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'qualifyElements' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="91" endline="91" begincolumn="25" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="DOMElementWriter$XmlNamespacePolicy" variable="qualifyAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'qualifyAttributes' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="126" endline="127" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.util" class="DOMElementWriter" method="DOMElementWriter" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="159" endline="159" begincolumn="15" endcolumn="75" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="DOMElementWriter" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="490" endline="490" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant.util" class="DOMElementWriter" method="encodedata" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/DOMUtils.java">
<violation beginline="36" endline="166" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.util" class="DOMUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/DateUtils.java">
<violation beginline="113" endline="113" begincolumn="9" endcolumn="32" rule="UnsynchronizedStaticFormatter" ruleset="Multithreading" package="org.apache.tools.ant.util" class="DateUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#unsynchronizedstaticformatter" priority="3">
Static Formatter objects should be accessed in a synchronized manner
</violation>
<violation beginline="114" endline="114" begincolumn="9" endcolumn="32" rule="UnsynchronizedStaticFormatter" ruleset="Multithreading" package="org.apache.tools.ant.util" class="DateUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#unsynchronizedstaticformatter" priority="3">
Static Formatter objects should be accessed in a synchronized manner
</violation>
<violation beginline="160" endline="160" begincolumn="16" endcolumn="36" rule="UnsynchronizedStaticFormatter" ruleset="Multithreading" package="org.apache.tools.ant.util" class="DateUtils" method="formatElapsedTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#unsynchronizedstaticformatter" priority="3">
Static Formatter objects should be accessed in a synchronized manner
</violation>
<violation beginline="169" endline="169" begincolumn="32" endcolumn="60" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.util" class="DateUtils" method="createDateFormat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="250" endline="250" begincolumn="50" endcolumn="60" rule="AvoidCalendarDateCreation" ruleset="Performance" package="org.apache.tools.ant.util" class="DateUtils" method="getDateForHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidcalendardatecreation" priority="3">
A Calendar is used to create a Date or DateTime, this is expensive.
</violation>
<violation beginline="283" endline="283" begincolumn="16" endcolumn="61" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.util" class="DateUtils" method="parseIso8601DateTime" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="298" endline="298" begincolumn="16" endcolumn="57" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.util" class="DateUtils" method="parseIso8601Date" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="321" endline="325" begincolumn="26" endcolumn="15" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="DateUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="324" endline="324" begincolumn="22" endcolumn="70" rule="SimpleDateFormatNeedsLocale" ruleset="Error Prone" package="org.apache.tools.ant.util" class="DateUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#simpledateformatneedslocale" priority="3">
When instantiating a SimpleDateFormat object, specify a Locale
</violation>
<violation beginline="326" endline="329" begincolumn="26" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="DateUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/DeweyDecimal.java">
<violation beginline="43" endline="43" begincolumn="25" endcolumn="46" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.util" class="DeweyDecimal" method="DeweyDecimal" variable="components" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="55" endline="55" begincolumn="16" endcolumn="36" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="DeweyDecimal" method="DeweyDecimal" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/FileUtils.java">
<violation beginline="79" endline="79" begincolumn="5" endcolumn="37" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.util" class="FileUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="105" endline="105" begincolumn="20" endcolumn="35" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="FileUtils" variable="cacheFromUriLock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'cacheFromUriLock' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="106" endline="106" begincolumn="20" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="FileUtils" variable="cacheFromUriRequest" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cacheFromUriRequest'
</violation>
<violation beginline="107" endline="107" begincolumn="20" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="FileUtils" variable="cacheFromUriResponse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cacheFromUriResponse'
</violation>
<violation beginline="135" endline="136" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.util" class="FileUtils" method="FileUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="281" endline="281" begincolumn="55" endcolumn="73" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="copyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="311" endline="311" begincolumn="55" endcolumn="73" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="copyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="446" endline="446" begincolumn="55" endcolumn="73" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="copyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="482" endline="482" begincolumn="42" endcolumn="60" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="copyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="520" endline="520" begincolumn="55" endcolumn="73" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="copyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="560" endline="560" begincolumn="55" endcolumn="73" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="copyFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="607" endline="607" begincolumn="34" endcolumn="37" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="resolveFile" variable="file" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'file'
</violation>
<violation beginline="607" endline="607" begincolumn="47" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="resolveFile" variable="filename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'filename'
</violation>
<violation beginline="607" endline="607" begincolumn="47" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="resolveFile" variable="filename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'filename'
</violation>
<violation beginline="607" endline="607" begincolumn="47" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="resolveFile" variable="filename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'filename'
</violation>
<violation beginline="636" endline="636" begincolumn="56" endcolumn="63" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="isContextRelativePath" variable="filename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'filename'
</violation>
<violation beginline="660" endline="660" begincolumn="49" endcolumn="56" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="isAbsolutePath" variable="filename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'filename'
</violation>
<violation beginline="785" endline="785" begincolumn="36" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="dissect" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'path'
</violation>
<violation beginline="785" endline="785" begincolumn="36" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="dissect" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'path'
</violation>
<violation beginline="785" endline="785" begincolumn="36" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="dissect" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'path'
</violation>
<violation beginline="785" endline="785" begincolumn="36" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="dissect" variable="path" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'path'
</violation>
<violation beginline="912" endline="912" begincolumn="26" endcolumn="58" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="FileUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="935" endline="935" begincolumn="39" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="createTempFile" variable="prefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'prefix'
</violation>
<violation beginline="935" endline="935" begincolumn="54" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="createTempFile" variable="suffix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'suffix'
</violation>
<violation beginline="1354" endline="1354" begincolumn="29" endcolumn="32" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="rename" variable="from" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'from'
</violation>
<violation beginline="1354" endline="1354" begincolumn="40" endcolumn="41" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="rename" variable="to" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'to'
</violation>
<violation beginline="1359" endline="1359" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="rename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="1363" endline="1363" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="rename" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="1430" endline="1430" begincolumn="40" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="hasErrorInCase" variable="localFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'localFile'
</violation>
<violation beginline="1562" endline="1562" begincolumn="29" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.util" class="FileUtils" method="close" variable="jf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this JarFile object are closed after use
</violation>
<violation beginline="1567" endline="1569" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="FileUtils" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1585" endline="1585" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="FileUtils" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="1585" endline="1587" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="FileUtils" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="1627" endline="1627" begincolumn="17" endcolumn="25" rule="DoNotCallGarbageCollectionExplicitly" ruleset="Error Prone" package="org.apache.tools.ant.util" class="FileUtils" method="tryHardToDelete" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly" priority="2">
Do not explicitly trigger a garbage collection.
</violation>
<violation beginline="1654" endline="1654" begincolumn="77" endcolumn="85" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.util" class="FileUtils" method="getRelativePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="1749" endline="1753" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.util" class="FileUtils" method="getDefaultEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/FlatFileNameMapper.java">
<violation beginline="36" endline="37" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.util" class="FlatFileNameMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="44" endline="45" begincolumn="34" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.util" class="FlatFileNameMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/GlobPatternMapper.java">
<violation beginline="42" endline="42" begincolumn="22" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="GlobPatternMapper" variable="fromPrefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fromPrefix'
</violation>
<violation beginline="47" endline="47" begincolumn="22" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="GlobPatternMapper" variable="fromPostfix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fromPostfix'
</violation>
<violation beginline="62" endline="62" begincolumn="22" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="GlobPatternMapper" variable="toPrefix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'toPrefix'
</violation>
<violation beginline="67" endline="67" begincolumn="22" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="GlobPatternMapper" variable="toPostfix" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'toPostfix'
</violation>
<violation beginline="71" endline="71" begincolumn="21" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="GlobPatternMapper" variable="fromContainsStar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fromContainsStar'
</violation>
<violation beginline="72" endline="72" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="GlobPatternMapper" variable="toContainsStar" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'toContainsStar'
</violation>
<violation beginline="73" endline="73" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="GlobPatternMapper" variable="handleDirSep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'handleDirSep'
</violation>
<violation beginline="92" endline="94" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.util" class="GlobPatternMapper" method="getHandleDirSep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="197" endline="197" begincolumn="38" endcolumn="41" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="GlobPatternMapper" method="modifyName" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="197" endline="197" begincolumn="38" endcolumn="41" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="GlobPatternMapper" method="modifyName" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="199" endline="199" begincolumn="20" endcolumn="37" rule="UseLocaleWithCaseConversions" ruleset="Error Prone" package="org.apache.tools.ant.util" class="GlobPatternMapper" method="modifyName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#uselocalewithcaseconversions" priority="3">
When doing a String.toLowerCase()/toUpperCase() call, use a Locale
</violation>
<violation beginline="202" endline="204" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.util" class="GlobPatternMapper" method="modifyName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/IdentityMapper.java">
<violation beginline="35" endline="36" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.util" class="IdentityMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="43" endline="44" begincolumn="34" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.util" class="IdentityMapper" method="setTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/IdentityStack.java">
<violation beginline="54" endline="55" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.util" class="IdentityStack" method="IdentityStack" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="74" endline="76" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="IdentityStack" method="contains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="86" endline="94" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="IdentityStack" method="indexOf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="104" endline="111" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="IdentityStack" method="lastIndexOf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="114" endline="114" begincolumn="57" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="IdentityStack" method="removeAll" variable="c" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'c'
</violation>
<violation beginline="114" endline="119" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="IdentityStack" method="removeAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="122" endline="122" begincolumn="57" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="IdentityStack" method="retainAll" variable="c" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'c'
</violation>
<violation beginline="122" endline="127" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="IdentityStack" method="retainAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="130" endline="136" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="IdentityStack" method="containsAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/JAXPUtils.java">
<violation beginline="59" endline="59" begincolumn="37" endcolumn="56" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="JAXPUtils" variable="parserFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'parserFactory'
</violation>
<violation beginline="66" endline="66" begincolumn="37" endcolumn="58" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="JAXPUtils" variable="nsParserFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'nsParserFactory'
</violation>
<violation beginline="73" endline="73" begincolumn="43" endcolumn="63" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="JAXPUtils" variable="builderFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'builderFactory'
</violation>
<violation beginline="84" endline="91" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="JAXPUtils" method="getParserFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="85" endline="85" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="getParserFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="102" endline="110" begincolumn="32" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="JAXPUtils" method="getNSParserFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="103" endline="103" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="getNSParserFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="119" endline="119" begincolumn="62" endcolumn="75" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="newParserFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="139" endline="139" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="getParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="156" endline="156" begincolumn="51" endcolumn="64" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="getXMLReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="172" endline="172" begincolumn="60" endcolumn="73" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="getNamespaceXMLReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="200" endline="200" begincolumn="63" endcolumn="76" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="getDocumentBuilder" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="215" endline="215" begincolumn="17" endcolumn="30" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="newSAXParser" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="245" endline="257" begincolumn="9" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="JAXPUtils" method="getDocumentBuilderFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="246" endline="246" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="JAXPUtils" method="getDocumentBuilderFactory" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/JavaEnvUtils.java">
<violation beginline="44" endline="44" begincolumn="26" endcolumn="61" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="46" endline="46" begincolumn="26" endcolumn="67" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="48" endline="48" begincolumn="26" endcolumn="59" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="51" endline="51" begincolumn="26" endcolumn="76" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="54" endline="54" begincolumn="26" endcolumn="73" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="57" endline="57" begincolumn="20" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="60" endline="60" begincolumn="20" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="63" endline="63" begincolumn="26" endcolumn="56" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="66" endline="66" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="68" endline="68" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="71" endline="71" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="73" endline="73" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="76" endline="76" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="78" endline="78" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="81" endline="81" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="83" endline="83" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="86" endline="86" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="88" endline="88" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="91" endline="91" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="93" endline="93" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="96" endline="96" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="98" endline="98" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="101" endline="101" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="103" endline="103" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="106" endline="106" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="108" endline="108" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="115" endline="115" begincolumn="25" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="121" endline="121" begincolumn="25" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="127" endline="127" begincolumn="25" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="132" endline="132" begincolumn="25" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="135" endline="135" begincolumn="20" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="138" endline="138" begincolumn="20" endcolumn="45" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="141" endline="141" begincolumn="20" endcolumn="39" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="144" endline="144" begincolumn="20" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="147" endline="147" begincolumn="20" endcolumn="33" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="147" endline="147" begincolumn="20" endcolumn="46" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="JavaEnvUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="198" endline="201" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="198" endline="201" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="207" endline="209" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="207" endline="209" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="214" endline="216" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="214" endline="216" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="221" endline="223" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="221" endline="223" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="228" endline="230" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="228" endline="230" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="JavaEnvUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="466" endline="466" begincolumn="27" endcolumn="34" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util" class="JavaEnvUtils" method="buildJrePackages" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="513" endline="513" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="JavaEnvUtils" method="getJrePackageTestCases" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="514" endline="514" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util" class="JavaEnvUtils" method="getJrePackageTestCases" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="563" endline="563" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="JavaEnvUtils" method="getJrePackages" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="578" endline="578" begincolumn="48" endcolumn="60" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.util" class="JavaEnvUtils" method="createVmsJavaOptionFile" variable="cmds" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="581" endline="581" begincolumn="58" endcolumn="67" rule="AvoidFileStream" ruleset="Performance" package="org.apache.tools.ant.util" class="JavaEnvUtils" method="createVmsJavaOptionFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidfilestream" priority="1">
Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/KeepAliveInputStream.java">
<violation beginline="53" endline="55" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="KeepAliveInputStream" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'close()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/KeepAliveOutputStream.java">
<violation beginline="53" endline="55" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="KeepAliveOutputStream" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'close()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LayoutPreservingProperties.java">
<violation beginline="154" endline="154" begincolumn="68" endcolumn="87" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="put" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="163" endline="163" begincolumn="16" endcolumn="35" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="setProperty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="178" endline="178" begincolumn="42" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="innerSetProperty" variable="key" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'key'
</violation>
<violation beginline="178" endline="178" begincolumn="54" endcolumn="58" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="innerSetProperty" variable="value" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'value'
</violation>
<violation beginline="215" endline="230" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="215" endline="230" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="256" endline="256" begincolumn="28" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="saveAs" variable="fos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="287" endline="289" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="store" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="297" endline="300" begincolumn="21" endcolumn="21" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="store" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="319" endline="319" begincolumn="30" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="readLines" variable="pbr" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStreamReader object are closed after use
</violation>
<violation beginline="327" endline="327" begincolumn="30" endcolumn="31" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="readLines" variable="br" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this PushbackReader object are closed after use
</violation>
<violation beginline="338" endline="338" begincolumn="19" endcolumn="19" rule="UseStringBufferForStringAppends" ruleset="Performance" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="readLines" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usestringbufferforstringappends" priority="3">
Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings
</violation>
<violation beginline="467" endline="467" begincolumn="26" endcolumn="26" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="unescape" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="479" endline="479" begincolumn="21" endcolumn="21" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="unescape" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="582" endline="582" begincolumn="45" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="removeCommentsEndingAt" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="582" endline="582" begincolumn="45" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="removeCommentsEndingAt" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="582" endline="582" begincolumn="45" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="removeCommentsEndingAt" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="582" endline="582" begincolumn="45" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="removeCommentsEndingAt" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="582" endline="582" begincolumn="45" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties" method="removeCommentsEndingAt" variable="pos" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'pos'
</violation>
<violation beginline="668" endline="784" begincolumn="20" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Pair
</violation>
<violation beginline="677" endline="677" begincolumn="13" endcolumn="27" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="Pair" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setValue' called during object construction
</violation>
<violation beginline="707" endline="716" begincolumn="16" endcolumn="9" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="707" endline="716" begincolumn="16" endcolumn="9" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="713" endline="713" begincolumn="17" endcolumn="35" rule="AvoidPrintStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidprintstacktrace" priority="3">
Avoid printStackTrace(); use a logger call instead.
</violation>
<violation beginline="750" endline="750" begincolumn="47" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="findFirstSeparator" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 's'
</violation>
<violation beginline="750" endline="750" begincolumn="47" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="findFirstSeparator" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 's'
</violation>
<violation beginline="750" endline="750" begincolumn="47" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="findFirstSeparator" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 's'
</violation>
<violation beginline="750" endline="750" begincolumn="47" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="findFirstSeparator" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 's'
</violation>
<violation beginline="750" endline="750" begincolumn="47" endcolumn="47" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LayoutPreservingProperties$Pair" method="findFirstSeparator" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 's'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LazyFileOutputStream.java">
<violation beginline="23" endline="23" begincolumn="1" endcolumn="43" rule="ImportFromSamePackage" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LazyFileOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#importfromsamepackage" priority="3">
No need to import a type that lives in the same package
</violation>
<violation beginline="38" endline="38" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="LazyFileOutputStream" variable="opened" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'opened'
</violation>
<violation beginline="39" endline="39" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="LazyFileOutputStream" variable="closed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'closed'
</violation>
<violation beginline="111" endline="119" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LazyFileOutputStream" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="139" endline="143" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LazyFileOutputStream" method="write" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="151" endline="154" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LazyFileOutputStream" method="write" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="156" endline="165" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LazyFileOutputStream" method="ensureOpened" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LazyHashtable.java">
<violation beginline="32" endline="121" begincolumn="8" endcolumn="1" rule="MissingSerialVersionUID" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LazyHashtable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingserialversionuid" priority="3">
Classes implementing Serializable should set a serialVersionUID
</violation>
<violation beginline="34" endline="34" begincolumn="23" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="LazyHashtable" variable="initAllDone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'initAllDone'
</violation>
<violation beginline="38" endline="40" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.ant.util" class="LazyHashtable" method="LazyHashtable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="58" endline="61" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LazyHashtable" method="elements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'elements()' is missing an @Override annotation.
</violation>
<violation beginline="67" endline="70" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LazyHashtable" method="isEmpty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'isEmpty()' is missing an @Override annotation.
</violation>
<violation beginline="76" endline="79" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LazyHashtable" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'size()' is missing an @Override annotation.
</violation>
<violation beginline="86" endline="89" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LazyHashtable" method="contains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'contains(Object)' is missing an @Override annotation.
</violation>
<violation beginline="96" endline="99" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LazyHashtable" method="containsKey" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'containsKey(Object)' is missing an @Override annotation.
</violation>
<violation beginline="106" endline="108" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LazyHashtable" method="containsValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'containsValue(Object)' is missing an @Override annotation.
</violation>
<violation beginline="114" endline="117" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LazyHashtable" method="keys" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'keys()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LeadPipeInputStream.java">
<violation beginline="85" endline="103" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LeadPipeInputStream" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="109" endline="125" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LeadPipeInputStream" method="setBufferSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="155" endline="155" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LeadPipeInputStream" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="157" endline="157" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LeadPipeInputStream" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LineOrientedOutputStream.java">
<violation beginline="42" endline="42" begincolumn="35" endcolumn="40" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="LineOrientedOutputStream" variable="buffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'buffer' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="44" endline="44" begincolumn="21" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="LineOrientedOutputStream" variable="skip" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'skip'
</violation>
<violation beginline="71" endline="72" begincolumn="12" endcolumn="5" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant.util" class="LineOrientedOutputStream" method="flush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
<violation beginline="71" endline="72" begincolumn="44" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.util" class="LineOrientedOutputStream" method="flush" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LineOrientedOutputStreamRedirector.java">
<violation beginline="35" endline="35" begincolumn="26" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="LineOrientedOutputStreamRedirector" variable="stream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'stream' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LineTokenizer.java">
<violation beginline="35" endline="35" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="LineTokenizer" variable="includeDelims" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeDelims'
</violation>
<violation beginline="56" endline="102" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LineTokenizer" method="getToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getToken(Reader)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LinkedHashtable.java">
<violation beginline="44" endline="44" begincolumn="19" endcolumn="37" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LinkedHashtable" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'LinkedHashMap'; use the interface instead
</violation>
<violation beginline="62" endline="64" begincolumn="25" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LinkedHashtable" method="clear" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'clear()' is missing an @Override annotation.
</violation>
<violation beginline="62" endline="64" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="clear" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="72" endline="74" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="containsKey" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="77" endline="79" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="containsValue" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="87" endline="89" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="entrySet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="92" endline="94" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="97" endline="99" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="get" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="102" endline="104" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="107" endline="109" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="isEmpty" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="117" endline="119" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="keySet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="122" endline="124" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="put" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="127" endline="129" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="putAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="132" endline="134" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="remove" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="137" endline="139" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="size" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="142" endline="144" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="toString" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="147" endline="149" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="LinkedHashtable" method="values" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/LoaderUtils.java">
<violation beginline="76" endline="76" begincolumn="46" endcolumn="51" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LoaderUtils" method="normalizeSource" variable="source" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'source'
</violation>
<violation beginline="80" endline="82" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="LoaderUtils" method="normalizeSource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="112" endline="112" begincolumn="54" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="LoaderUtils" method="getResourceSource" variable="c" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'c'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/MergingMapper.java">
<violation beginline="31" endline="31" begincolumn="24" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="MergingMapper" variable="mergedFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mergedFile'
</violation>
<violation beginline="34" endline="35" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.util" class="MergingMapper" method="MergingMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="42" endline="42" begincolumn="9" endcolumn="17" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.util" class="MergingMapper" method="MergingMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setTo' called during object construction
</violation>
<violation beginline="50" endline="51" begincolumn="38" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.ant.util" class="MergingMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="69" endline="69" begincolumn="9" endcolumn="26" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.ant.util" class="MergingMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'mergedFile' may expose an internal array.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/Native2AsciiUtils.java">
<violation beginline="61" endline="61" begincolumn="40" endcolumn="40" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="Native2AsciiUtils" method="ascii2native" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="66" endline="66" begincolumn="25" endcolumn="25" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="Native2AsciiUtils" method="ascii2native" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/OutputStreamFunneler.java">
<violation beginline="39" endline="39" begincolumn="25" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="OutputStreamFunneler$Funnel" variable="closed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'closed'
</violation>
<violation beginline="39" endline="39" begincolumn="25" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="OutputStreamFunneler$Funnel" variable="closed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'closed' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="85" endline="85" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="OutputStreamFunneler" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="86" endline="86" begincolumn="17" endcolumn="25" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="OutputStreamFunneler" variable="count" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'count'
</violation>
<violation beginline="86" endline="86" begincolumn="13" endcolumn="26" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="OutputStreamFunneler" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="87" endline="87" begincolumn="13" endcolumn="27" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="OutputStreamFunneler" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="88" endline="88" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="OutputStreamFunneler" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="125" endline="127" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="OutputStreamFunneler" method="setTimeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="136" endline="144" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="OutputStreamFunneler" method="getFunnelInstance" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="146" endline="170" begincolumn="26" endcolumn="4" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="OutputStreamFunneler" method="release" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="163" endline="163" begincolumn="21" endcolumn="32" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util" class="OutputStreamFunneler" method="release" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="172" endline="179" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="OutputStreamFunneler" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="181" endline="185" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="OutputStreamFunneler" method="dieIfClosed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/PermissionUtils.java">
<violation beginline="42" endline="246" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.util" class="PermissionUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="58" endline="58" begincolumn="20" endcolumn="22" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.ant.util" class="PermissionUtils" method="modeFromPermissions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="61" endline="61" begincolumn="20" endcolumn="22" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.ant.util" class="PermissionUtils" method="modeFromPermissions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="64" endline="64" begincolumn="20" endcolumn="22" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.ant.util" class="PermissionUtils" method="modeFromPermissions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="220" endline="231" begincolumn="23" endcolumn="9" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.ant.util" class="PermissionUtils$FileType" method="of" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
<violation beginline="239" endline="244" begincolumn="23" endcolumn="9" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.ant.util" class="PermissionUtils$FileType" method="of" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ProcessUtil.java">
<violation beginline="26" endline="65" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.util" class="ProcessUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="51" endline="53" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ProcessUtil" method="getProcessId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="58" endline="58" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ProcessUtil" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="60" endline="60" begincolumn="26" endcolumn="31" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.ant.util" class="ProcessUtil" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 120000 should separate every third digit with an underscore
</violation>
<violation beginline="61" endline="61" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ProcessUtil" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="61" endline="63" begincolumn="11" endcolumn="9" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ProcessUtil" method="main" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ProxySetup.java">
<violation beginline="33" endline="33" begincolumn="21" endcolumn="25" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="ProxySetup" variable="owner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'owner' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ReaderInputStream.java">
<violation beginline="75" endline="95" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ReaderInputStream" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="77" endline="77" begincolumn="35" endcolumn="49" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ReaderInputStream" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Stream Closed" appears 4 times in this file; the first occurrence is on line 77
</violation>
<violation beginline="83" endline="83" begincolumn="17" endcolumn="39" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ReaderInputStream" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="108" endline="108" begincolumn="57" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ReaderInputStream" method="read" variable="len" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'len'
</violation>
<violation beginline="108" endline="140" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ReaderInputStream" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="149" endline="155" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ReaderInputStream" method="mark" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="153" endline="153" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.ant.util" class="ReaderInputStream" method="mark" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="153" endline="153" begincolumn="13" endcolumn="57" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ReaderInputStream" method="mark" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="162" endline="173" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ReaderInputStream" method="available" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="189" endline="195" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ReaderInputStream" method="reset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="203" endline="209" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ReaderInputStream" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ReflectUtil.java">
<violation beginline="36" endline="216" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="54" endline="54" begincolumn="38" endcolumn="50" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ReflectUtil" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="58" endline="58" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="71" endline="71" begincolumn="23" endcolumn="33" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "unchecked" appears 5 times in this file; the first occurrence is on line 71
</violation>
<violation beginline="76" endline="76" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="96" endline="96" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="117" endline="117" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="142" endline="142" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="158" endline="158" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="163" endline="163" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="176" endline="176" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" method="throwBuildException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="208" endline="208" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" method="respondsTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="212" endline="212" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectUtil" method="respondsTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ReflectWrapper.java">
<violation beginline="42" endline="42" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ReflectWrapper" method="ReflectWrapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/RegexpPatternMapper.java">
<violation beginline="38" endline="38" begincolumn="29" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="RegexpPatternMapper" variable="reg" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reg'
</violation>
<violation beginline="38" endline="38" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="RegexpPatternMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'reg' is never used (overwritten on line 48)
</violation>
<violation beginline="39" endline="39" begincolumn="22" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="RegexpPatternMapper" variable="to" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'to'
</violation>
<violation beginline="40" endline="40" begincolumn="15" endcolumn="26" rule="AvoidStringBufferField" ruleset="Best Practices" package="org.apache.tools.ant.util" class="RegexpPatternMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidstringbufferfield" priority="3">
StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
</violation>
<violation beginline="47" endline="47" begincolumn="41" endcolumn="54" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="RegexpPatternMapper" method="RegexpPatternMapper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="51" endline="51" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="RegexpPatternMapper" variable="handleDirSep" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'handleDirSep'
</violation>
<violation beginline="51" endline="51" begincolumn="13" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="RegexpPatternMapper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="52" endline="52" begincolumn="21" endcolumn="37" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="RegexpPatternMapper" variable="regexpOptions" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'regexpOptions'
</violation>
<violation beginline="52" endline="52" begincolumn="13" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="RegexpPatternMapper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="81" endline="81" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util" class="RegexpPatternMapper" method="setFrom" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="117" endline="117" begincolumn="40" endcolumn="53" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="RegexpPatternMapper" method="mapFileName" variable="sourceFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'sourceFileName'
</violation>
<violation beginline="122" endline="124" begincolumn="13" endcolumn="13" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.ant.util" class="RegexpPatternMapper" method="mapFileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="145" endline="145" begincolumn="21" endcolumn="35" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util" class="RegexpPatternMapper" method="replaceReferences" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="145" endline="145" begincolumn="23" endcolumn="23" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="RegexpPatternMapper" method="replaceReferences" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ResourceUtils.java">
<violation beginline="166" endline="166" begincolumn="71" endcolumn="76" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="selectSources" variable="source" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'source'
</violation>
<violation beginline="187" endline="187" begincolumn="28" endcolumn="36" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ResourceUtils" method="selectSources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="199" endline="199" begincolumn="21" endcolumn="30" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="selectSources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'targetname'
</violation>
<violation beginline="290" endline="290" begincolumn="71" endcolumn="89" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="327" endline="327" begincolumn="70" endcolumn="88" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="367" endline="367" begincolumn="70" endcolumn="88" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="424" endline="424" begincolumn="27" endcolumn="32" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " to " appears 5 times in this file; the first occurrence is on line 424
</violation>
<violation beginline="430" endline="430" begincolumn="25" endcolumn="42" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyResource" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="638" endline="638" begincolumn="50" endcolumn="68" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyWithFilterSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="646" endline="646" begincolumn="13" endcolumn="78" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyWithFilterSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="646" endline="646" begincolumn="26" endcolumn="51" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyWithFilterSets" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "Skipping (self) copy of " appears 4 times in this file; the first occurrence is on line 646
</violation>
<violation beginline="673" endline="673" begincolumn="9" endcolumn="27" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="filterWith" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="681" endline="681" begincolumn="13" endcolumn="40" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ResourceUtils" method="filterWith" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
'r' is reassigned, but the original instance is not closed
</violation>
<violation beginline="692" endline="692" begincolumn="65" endcolumn="83" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyWithFilterChainsOrTranscoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="701" endline="701" begincolumn="13" endcolumn="78" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyWithFilterChainsOrTranscoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="728" endline="728" begincolumn="13" endcolumn="86" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyUsingFileChannels" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="761" endline="761" begincolumn="13" endcolumn="78" rule="GuardLogStatement" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="copyUsingStreams" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#guardlogstatement" priority="2">
Logger calls should be surrounded by log level guards.
</violation>
<violation beginline="788" endline="788" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="getOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
<violation beginline="810" endline="810" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ResourceUtils" method="log" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.out.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/RetryHandler.java">
<violation beginline="32" endline="32" begincolumn="17" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="RetryHandler" variable="retriesAllowed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'retriesAllowed'
</violation>
<violation beginline="32" endline="32" begincolumn="17" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="RetryHandler" variable="retriesAllowed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'retriesAllowed' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="32" endline="32" begincolumn="34" endcolumn="34" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="RetryHandler" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'retriesAllowed' is never used (overwritten on line 42)
</violation>
<violation beginline="33" endline="33" begincolumn="18" endcolumn="21" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="RetryHandler" variable="task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'task' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ScriptFixBSFPath.java">
<violation beginline="47" endline="56" begincolumn="35" endcolumn="61" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.ant.util" class="ScriptFixBSFPath" variable="BSF_LANGUAGES" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="102" endline="102" begincolumn="24" endcolumn="32" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ScriptFixBSFPath" method="fixClassLoader" variable="fixLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this AntClassLoader object are closed after use
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ScriptRunner.java">
<violation beginline="26" endline="26" begincolumn="13" endcolumn="59" rule="UnnecessaryFullyQualifiedName" ruleset="Code Style" package="org.apache.tools.ant.util" class="ScriptRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname" priority="4">
Unnecessary use of fully qualified name 'org.apache.tools.ant.util.optional.ScriptRunner' due to existing same package import 'org.apache.tools.ant.util.*'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ScriptRunnerBase.java">
<violation beginline="47" endline="47" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ScriptRunnerBase" variable="keepEngine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'keepEngine'
</violation>
<violation beginline="79" endline="84" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util" class="ScriptRunnerBase" method="addBeans" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="183" endline="185" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.util" class="ScriptRunnerBase" method="getKeepEngine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="201" endline="203" begincolumn="18" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.util" class="ScriptRunnerBase" method="getCompiled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ScriptRunnerCreator.java">
<violation beginline="41" endline="41" begincolumn="25" endcolumn="31" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" variable="project" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'project' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="44" endline="44" begincolumn="25" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" variable="scriptLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'scriptLoader'
</violation>
<violation beginline="62" endline="97" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" method="createRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="71" endline="71" begincolumn="14" endcolumn="33" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" method="createRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="79" endline="79" begincolumn="32" endcolumn="35" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" method="createRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ret' is never used (overwritten on line 80)
</violation>
<violation beginline="112" endline="112" begincolumn="35" endcolumn="38" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" method="createRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'runner' is never used (overwritten on line 129)
</violation>
<violation beginline="113" endline="113" begincolumn="14" endcolumn="33" rule="LiteralsFirstInComparisons" ruleset="Best Practices" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" method="createRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#literalsfirstincomparisons" priority="3">
Position literals first in String comparisons
</violation>
<violation beginline="124" endline="124" begincolumn="22" endcolumn="30" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" method="createRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="132" endline="132" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util" class="ScriptRunnerCreator" method="createRunner" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/ScriptRunnerHelper.java">
<violation beginline="32" endline="32" begincolumn="37" endcolumn="53" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ScriptRunnerHelper" variable="cpDelegate" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cpDelegate'
</violation>
<violation beginline="38" endline="38" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ScriptRunnerHelper" variable="compiled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'compiled'
</violation>
<violation beginline="41" endline="41" begincolumn="25" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="ScriptRunnerHelper" variable="scriptLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'scriptLoader'
</violation>
<violation beginline="42" endline="42" begincolumn="19" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="ScriptRunnerHelper" variable="resources" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'resources' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="199" endline="201" begincolumn="12" endcolumn="5" rule="BooleanGetMethodName" ruleset="Code Style" package="org.apache.tools.ant.util" class="ScriptRunnerHelper" method="getCompiled" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#booleangetmethodname" priority="4">
A getX() method which returns a boolean should be named isX()
</violation>
<violation beginline="225" endline="235" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="ScriptRunnerHelper" method="generateClassLoader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/SplitClassLoader.java">
<violation beginline="41" endline="41" begincolumn="29" endcolumn="49" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.util" class="SplitClassLoader" method="SplitClassLoader" variable="splitClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="41" endline="41" begincolumn="29" endcolumn="49" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.ant.util" class="SplitClassLoader" method="SplitClassLoader" variable="splitClasses" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'splitClasses' is stored directly.
</violation>
<violation beginline="49" endline="63" begincolumn="28" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="SplitClassLoader" method="loadClass" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/StreamUtils.java">
<violation beginline="39" endline="45" begincolumn="28" endcolumn="21" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StreamUtils" method="tryAdvance" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'tryAdvance(Consumer)' is missing an @Override annotation.
</violation>
<violation beginline="46" endline="50" begincolumn="28" endcolumn="21" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StreamUtils" method="forEachRemaining" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'forEachRemaining(Consumer)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/StringTokenizer.java">
<violation beginline="38" endline="38" begincolumn="20" endcolumn="32" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="StringTokenizer" variable="delims" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'delims'
</violation>
<violation beginline="39" endline="39" begincolumn="21" endcolumn="43" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="StringTokenizer" variable="delimsAreTokens" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'delimsAreTokens'
</violation>
<violation beginline="40" endline="40" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="StringTokenizer" variable="suppressDelims" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'suppressDelims'
</violation>
<violation beginline="41" endline="41" begincolumn="21" endcolumn="41" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="StringTokenizer" variable="includeDelims" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'includeDelims'
</violation>
<violation beginline="86" endline="132" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringTokenizer" method="getToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getToken(Reader)' is missing an @Override annotation.
</violation>
<violation beginline="87" endline="87" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringTokenizer" method="getToken" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'ch' is never used (overwritten on lines 89 and 92)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/StringUtils.java">
<violation beginline="49" endline="49" begincolumn="25" endcolumn="65" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="StringUtils" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="57" endline="57" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringUtils" method="lineSplit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="68" endline="68" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringUtils" method="split" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="69" endline="69" begincolumn="36" endcolumn="43" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util" class="StringUtils" method="split" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="70" endline="70" begincolumn="19" endcolumn="20" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringUtils" method="split" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'pos' is never used (overwritten on line 72)
</violation>
<violation beginline="72" endline="72" begincolumn="16" endcolumn="48" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util" class="StringUtils" method="split" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="167" endline="188" begincolumn="17" endcolumn="17" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.ant.util" class="StringUtils" method="resolveBackSlash" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
<violation beginline="203" endline="203" begincolumn="65" endcolumn="73" rule="SignatureDeclareThrowsException" ruleset="Design" package="org.apache.tools.ant.util" class="StringUtils" method="parseHumanSizes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#signaturedeclarethrowsexception" priority="3">
A method/constructor should not explicitly throw java.lang.Exception
</violation>
<violation beginline="203" endline="203" begincolumn="47" endcolumn="55" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringUtils" method="parseHumanSizes" variable="humanSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'humanSize'
</violation>
<violation beginline="203" endline="203" begincolumn="47" endcolumn="55" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringUtils" method="parseHumanSizes" variable="humanSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'humanSize'
</violation>
<violation beginline="203" endline="203" begincolumn="47" endcolumn="55" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="StringUtils" method="parseHumanSizes" variable="humanSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'humanSize'
</violation>
<violation beginline="221" endline="239" begincolumn="13" endcolumn="13" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.ant.util" class="StringUtils" method="parseHumanSizes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/SymbolicLinkUtils.java">
<violation beginline="60" endline="61" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="SymbolicLinkUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="214" endline="214" begincolumn="41" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" variable="link" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'link'
</violation>
<violation beginline="260" endline="260" begincolumn="32" endcolumn="42" rule="ExceptionAsFlowControl" ruleset="Design" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#exceptionasflowcontrol" priority="3">
Avoid using exceptions as flow control.
</violation>
<violation beginline="260" endline="260" begincolumn="32" endcolumn="42" rule="ExceptionAsFlowControl" ruleset="Design" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#exceptionasflowcontrol" priority="3">
Avoid using exceptions as flow control.
</violation>
<violation beginline="261" endline="263" begincolumn="21" endcolumn="77" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="273" endline="294" begincolumn="15" endcolumn="13" rule="DoNotThrowExceptionInFinally" ruleset="Error Prone" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally" priority="4">
A throw statement in a finally block makes the control flow hard to understand.
</violation>
<violation beginline="278" endline="278" begincolumn="36" endcolumn="46" rule="ExceptionAsFlowControl" ruleset="Design" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#exceptionasflowcontrol" priority="3">
Avoid using exceptions as flow control.
</violation>
<violation beginline="278" endline="278" begincolumn="36" endcolumn="46" rule="ExceptionAsFlowControl" ruleset="Design" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#exceptionasflowcontrol" priority="3">
Avoid using exceptions as flow control.
</violation>
<violation beginline="288" endline="288" begincolumn="29" endcolumn="55" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="290" endline="290" begincolumn="29" endcolumn="46" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.ant.util" class="SymbolicLinkUtils" method="deleteSymbolicLink" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/TaskLogger.java">
<violation beginline="30" endline="30" begincolumn="18" endcolumn="21" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="TaskLogger" variable="task" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'task' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/TeeOutputStream.java">
<violation beginline="29" endline="29" begincolumn="26" endcolumn="29" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="TeeOutputStream" variable="left" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'left' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="30" endline="30" begincolumn="26" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="TeeOutputStream" variable="right" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'right' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="48" endline="52" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.ant.util" class="TeeOutputStream" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/UUEncoder.java">
<violation beginline="38" endline="38" begincolumn="20" endcolumn="23" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="UUEncoder" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'name' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="66" endline="66" begincolumn="16" endcolumn="64" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util" class="UUEncoder" method="encode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="85" endline="85" begincolumn="21" endcolumn="26" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.ant.util" class="UUEncoder" method="encodeString" variable="writer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="123" endline="123" begincolumn="31" endcolumn="31" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="UUEncoder" method="encodeLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="125" endline="125" begincolumn="35" endcolumn="35" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="UUEncoder" method="encodeLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="127" endline="127" begincolumn="39" endcolumn="39" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util" class="UUEncoder" method="encodeLine" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/UnicodeUtil.java">
<violation beginline="25" endline="46" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.util" class="UnicodeUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/VectorSet.java">
<violation beginline="43" endline="43" begincolumn="19" endcolumn="28" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util" class="VectorSet" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'HashSet'; use the interface instead
</violation>
<violation beginline="43" endline="43" begincolumn="19" endcolumn="51" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.ant.util" class="VectorSet" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field set has the same name as a method
</violation>
<violation beginline="64" endline="70" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="add" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="81" endline="94" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="doAdd" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="97" endline="99" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="addElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="102" endline="108" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="addAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="115" endline="115" begincolumn="44" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="VectorSet" method="addAll" variable="index" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'index'
</violation>
<violation beginline="115" endline="136" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="addAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="139" endline="142" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="clear" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="145" endline="150" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.ant.util" class="VectorSet" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="153" endline="155" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="contains" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="158" endline="160" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="containsAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="168" endline="172" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="remove" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="179" endline="192" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="doRemove" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="195" endline="201" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="removeAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="204" endline="207" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="removeAllElements" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="215" endline="217" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="removeElementAt" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="220" endline="220" begincolumn="67" endcolumn="73" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="VectorSet" method="removeRange" variable="toIndex" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'toIndex'
</violation>
<violation beginline="220" endline="224" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="removeRange" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="227" endline="227" begincolumn="57" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="VectorSet" method="retainAll" variable="c" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'c'
</violation>
<violation beginline="227" endline="242" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="retainAll" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="245" endline="257" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="VectorSet" method="set" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/Watchdog.java">
<violation beginline="41" endline="41" begincolumn="35" endcolumn="43" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="Watchdog" variable="observers" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'observers' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="43" endline="43" begincolumn="18" endcolumn="24" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="Watchdog" variable="timeout" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'timeout' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="43" endline="43" begincolumn="28" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="Watchdog" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'timeout' is never used (overwritten on line 59)
</violation>
<violation beginline="49" endline="49" begincolumn="30" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="Watchdog" variable="stopped" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'stopped'
</violation>
<violation beginline="89" endline="94" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="Watchdog" method="start" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="99" endline="102" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="Watchdog" method="stop" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="111" endline="126" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="Watchdog" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/WeakishReference.java">
<violation beginline="41" endline="41" begincolumn="35" endcolumn="41" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="WeakishReference" variable="weakref" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'weakref' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/WorkerAnt.java">
<violation beginline="40" endline="40" begincolumn="30" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util" class="WorkerAnt" variable="finished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'finished'
</violation>
<violation beginline="80" endline="82" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="WorkerAnt" method="getBuildException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="89" endline="91" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="WorkerAnt" method="getException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="110" endline="112" begincolumn="25" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="WorkerAnt" method="isFinished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="149" endline="154" begincolumn="26" endcolumn="5" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.ant.util" class="WorkerAnt" method="caught" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="160" endline="175" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util" class="WorkerAnt" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'run()' is missing an @Override annotation.
</violation>
<violation beginline="165" endline="167" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util" class="WorkerAnt" method="run" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/XMLFragment.java">
<violation beginline="43" endline="43" begincolumn="22" endcolumn="24" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="XMLFragment" variable="doc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'doc' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="44" endline="44" begincolumn="30" endcolumn="37" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="XMLFragment" variable="fragment" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'fragment' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="94" endline="94" begincolumn="41" endcolumn="41" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.ant.util" class="XMLFragment" method="addText" variable="s" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 's'
</violation>
<violation beginline="107" endline="107" begincolumn="25" endcolumn="25" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util" class="XMLFragment$Child" variable="e" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'e' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="147" endline="147" begincolumn="26" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.ant.util" class="XMLFragment$Child" method="createDynamicElement" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'e2' is never used (overwritten on lines 149 and 151)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/XmlConstants.java">
<violation beginline="29" endline="65" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.ant.util" class="XmlConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="35" endline="36" begincolumn="25" endcolumn="78" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="38" endline="39" begincolumn="25" endcolumn="89" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="41" endline="42" begincolumn="25" endcolumn="77" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="44" endline="44" begincolumn="25" endcolumn="96" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="47" endline="47" begincolumn="25" endcolumn="93" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="49" endline="49" begincolumn="25" endcolumn="93" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="51" endline="52" begincolumn="25" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="54" endline="55" begincolumn="25" endcolumn="67" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="57" endline="58" begincolumn="25" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="60" endline="61" begincolumn="25" endcolumn="68" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="63" endline="64" begincolumn="25" endcolumn="67" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.ant.util" class="XmlConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/depend/AbstractAnalyzer.java">
<violation beginline="39" endline="39" begincolumn="18" endcolumn="27" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" variable="sourcePath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'sourcePath' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="42" endline="42" begincolumn="18" endcolumn="26" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" variable="classPath" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'classPath' could be made final; it is only initialized in the declaration or constructor.
</violation>
<violation beginline="45" endline="45" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="48" endline="48" begincolumn="21" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" variable="determined" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'determined'
</violation>
<violation beginline="51" endline="51" begincolumn="13" endcolumn="24" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="53" endline="53" begincolumn="13" endcolumn="26" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="60" endline="60" begincolumn="9" endcolumn="15" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" method="AbstractAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'reset' called during object construction
</violation>
<violation beginline="204" endline="206" begincolumn="12" endcolumn="5" rule="EmptyMethodInAbstractClassShouldBeAbstract" ruleset="Code Style" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" method="config" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract" priority="1">
An empty method in an abstract class should be abstract instead
</violation>
<violation beginline="216" endline="216" begincolumn="32" endcolumn="39" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" method="reset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="217" endline="217" begincolumn="33" endcolumn="40" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" method="reset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="248" endline="248" begincolumn="51" endcolumn="62" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="248" endline="248" begincolumn="71" endcolumn="84" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="267" endline="267" begincolumn="64" endcolumn="77" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.ant.util.depend" class="AbstractAnalyzer" method="getResourceContainer" variable="paths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/depend/bcel/AncestorAnalyzer.java">
<violation beginline="49" endline="49" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util.depend.bcel" class="AncestorAnalyzer" method="AncestorAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="52" endline="52" begincolumn="19" endcolumn="19" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.util.depend.bcel" class="AncestorAnalyzer" method="AncestorAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
<violation beginline="78" endline="78" begincolumn="16" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util.depend.bcel" class="AncestorAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="110" endline="112" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util.depend.bcel" class="AncestorAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/depend/bcel/DependencyVisitor.java">
<violation beginline="169" endline="171" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.ant.util.depend.bcel" class="DependencyVisitor" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/depend/bcel/FullAnalyzer.java">
<violation beginline="49" endline="49" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util.depend.bcel" class="FullAnalyzer" method="FullAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="52" endline="52" begincolumn="19" endcolumn="19" rule="AvoidInstanceofChecksInCatchClause" ruleset="Error Prone" package="org.apache.tools.ant.util.depend.bcel" class="FullAnalyzer" method="FullAnalyzer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause" priority="3">
An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.
</violation>
<violation beginline="77" endline="77" begincolumn="16" endcolumn="57" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util.depend.bcel" class="FullAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="100" endline="102" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.ant.util.depend.bcel" class="FullAnalyzer" method="determineDependencies" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/facade/FacadeTaskHelper.java">
<violation beginline="42" endline="42" begincolumn="50" endcolumn="53" rule="ImmutableField" ruleset="Design" package="org.apache.tools.ant.util.facade" class="FacadeTaskHelper" variable="args" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'args' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/optional/JavaxScriptRunner.java">
<violation beginline="65" endline="65" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util.optional" class="JavaxScriptRunner" method="supportsLanguage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="81" endline="81" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.optional" class="JavaxScriptRunner" method="executeScript" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="93" endline="93" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.optional" class="JavaxScriptRunner" method="evaluateScript" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="93" endline="175" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.ant.util.optional" class="JavaxScriptRunner" method="evaluateScript" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'evaluateScript(String)' is missing an @Override annotation.
</violation>
<violation beginline="160" endline="160" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util.optional" class="JavaxScriptRunner" method="evaluateScript" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="171" endline="171" begincolumn="13" endcolumn="40" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.ant.util.optional" class="JavaxScriptRunner" method="evaluateScript" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/optional/ScriptRunner.java">
<violation beginline="75" endline="82" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util.optional" class="ScriptRunner" method="supportsLanguage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="92" endline="92" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.optional" class="ScriptRunner" method="executeScript" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="119" endline="119" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.optional" class="ScriptRunner" method="evaluateScript" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/JakartaOroMatcher.java">
<violation beginline="67" endline="67" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaOroMatcher" method="getCompiledPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="71" endline="71" begincolumn="24" endcolumn="32" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaOroMatcher" method="getCompiledPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="83" endline="83" begincolumn="58" endcolumn="71" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaOroMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="96" endline="96" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaOroMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="112" endline="112" begincolumn="67" endcolumn="80" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaOroMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="129" endline="129" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaOroMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="133" endline="133" begincolumn="38" endcolumn="45" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util.regexp" class="JakartaOroMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/JakartaOroRegexp.java">
<violation beginline="41" endline="41" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaOroRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="47" endline="47" begincolumn="29" endcolumn="34" rule="ConsecutiveLiteralAppends" ruleset="Performance" package="org.apache.tools.ant.util.regexp" class="JakartaOroRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveliteralappends" priority="3">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.
</violation>
<violation beginline="50" endline="50" begincolumn="21" endcolumn="43" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util.regexp" class="JakartaOroRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="50" endline="50" begincolumn="23" endcolumn="23" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util.regexp" class="JakartaOroRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/JakartaRegexpMatcher.java">
<violation beginline="60" endline="60" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpMatcher" method="getCompiledPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="78" endline="78" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="91" endline="91" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="111" endline="111" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="128" endline="128" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="133" endline="133" begincolumn="32" endcolumn="39" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/JakartaRegexpRegexp.java">
<violation beginline="56" endline="56" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="64" endline="64" begincolumn="21" endcolumn="43" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="64" endline="64" begincolumn="23" endcolumn="23" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util.regexp" class="JakartaRegexpRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/Jdk14RegexpMatcher.java">
<violation beginline="63" endline="63" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpMatcher" method="getCompiledPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="78" endline="78" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="91" endline="91" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="94" endline="94" begincolumn="18" endcolumn="26" rule="AvoidCatchingGenericException" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidcatchinggenericexception" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
<violation beginline="111" endline="111" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="128" endline="128" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="134" endline="134" begincolumn="32" endcolumn="39" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/Jdk14RegexpRegexp.java">
<violation beginline="56" endline="56" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="62" endline="62" begincolumn="29" endcolumn="34" rule="ConsecutiveLiteralAppends" ruleset="Performance" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#consecutiveliteralappends" priority="3">
StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.
</violation>
<violation beginline="65" endline="65" begincolumn="21" endcolumn="43" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="65" endline="65" begincolumn="23" endcolumn="23" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.ant.util.regexp" class="Jdk14RegexpRegexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/Regexp.java">
<violation beginline="49" endline="49" begincolumn="16" endcolumn="29" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="Regexp" method="substitute" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/RegexpFactory.java">
<violation beginline="38" endline="38" begincolumn="38" endcolumn="51" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpFactory" method="newRegexp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="49" endline="49" begincolumn="47" endcolumn="60" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpFactory" method="newRegexp" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="76" endline="76" begincolumn="68" endcolumn="81" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpFactory" method="createRegexpInstance" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/RegexpMatcher.java">
<violation beginline="58" endline="58" begincolumn="44" endcolumn="57" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="setPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="65" endline="65" begincolumn="32" endcolumn="45" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="getPattern" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="73" endline="73" begincolumn="45" endcolumn="58" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="86" endline="86" begincolumn="54" endcolumn="67" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="86" endline="86" begincolumn="5" endcolumn="18" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="97" endline="97" begincolumn="55" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="matches" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="108" endline="108" begincolumn="64" endcolumn="77" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="108" endline="108" begincolumn="5" endcolumn="18" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.ant.util.regexp" class="RegexpMatcher" method="getGroups" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/util/regexp/RegexpMatcherFactory.java">
<violation beginline="41" endline="41" begincolumn="52" endcolumn="65" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcherFactory" method="newRegexpMatcher" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="52" endline="52" begincolumn="61" endcolumn="74" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcherFactory" method="newRegexpMatcher" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="76" endline="76" begincolumn="69" endcolumn="82" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcherFactory" method="createInstance" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="87" endline="87" begincolumn="62" endcolumn="75" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.ant.util.regexp" class="RegexpMatcherFactory" method="testAvailability" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="90" endline="92" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util.regexp" class="RegexpMatcherFactory" method="testAvailability" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
<violation beginline="106" endline="108" begincolumn="11" endcolumn="9" rule="AvoidCatchingThrowable" ruleset="Error Prone" package="org.apache.tools.ant.util.regexp" class="RegexpMatcherFactory" method="regexpMatcherPresent" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidcatchingthrowable" priority="3">
A catch statement should never catch throwable since it includes errors.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/bzip2/BZip2Constants.java">
<violation beginline="37" endline="37" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="37" endline="37" begincolumn="25" endcolumn="30" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BZip2Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 100000 should separate every third digit with an underscore
</violation>
<violation beginline="38" endline="38" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="39" endline="39" begincolumn="5" endcolumn="26" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="40" endline="40" begincolumn="5" endcolumn="17" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="41" endline="41" begincolumn="5" endcolumn="17" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="42" endline="42" begincolumn="5" endcolumn="21" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="43" endline="43" begincolumn="5" endcolumn="20" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="44" endline="44" begincolumn="5" endcolumn="20" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="45" endline="45" begincolumn="5" endcolumn="48" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="45" endline="45" begincolumn="31" endcolumn="36" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BZip2Constants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 900000 should separate every third digit with an underscore
</violation>
<violation beginline="46" endline="46" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="55" endline="108" begincolumn="5" endcolumn="6" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BZip2Constants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/bzip2/BlockSort.java">
<violation beginline="141" endline="141" begincolumn="40" endcolumn="44" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 65537 should separate every third digit with an underscore
</violation>
<violation beginline="154" endline="179" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="159" endline="159" begincolumn="24" endcolumn="28" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" method="blockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 10000 should separate every third digit with an underscore
</violation>
<violation beginline="186" endline="199" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="299" endline="299" begincolumn="26" endcolumn="62" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="313" endline="313" begincolumn="61" endcolumn="63" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="fvswap" variable="yyn" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'yyn'
</violation>
<violation beginline="313" endline="313" begincolumn="41" endcolumn="44" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="fvswap" variable="yyp1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'yyp1'
</violation>
<violation beginline="313" endline="313" begincolumn="51" endcolumn="54" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="fvswap" variable="yyp2" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'yyp2'
</violation>
<violation beginline="349" endline="349" begincolumn="9" endcolumn="45" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="fallbackQSort3" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="372" endline="372" begincolumn="36" endcolumn="40" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" method="fallbackQSort3" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 32768 should separate every third digit with an underscore
</violation>
<violation beginline="373" endline="373" begincolumn="13" endcolumn="32" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="fallbackQSort3" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="453" endline="453" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="479" endline="577" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="481" endline="481" begincolumn="9" endcolumn="37" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="fallbackSort" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="496" endline="498" begincolumn="9" endcolumn="9" rule="AvoidArrayLoops" ruleset="Performance" package="org.apache.tools.bzip2" class="BlockSort" method="fallbackSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidarrayloops" priority="3">
System.arraycopy is more efficient
</violation>
<violation beginline="586" endline="588" begincolumn="26" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="587" endline="587" begincolumn="60" endcolumn="65" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 265720 should separate every third digit with an underscore
</violation>
<violation beginline="587" endline="587" begincolumn="46" endcolumn="50" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 29524 should separate every third digit with an underscore
</violation>
<violation beginline="587" endline="587" begincolumn="68" endcolumn="73" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 797161 should separate every third digit with an underscore
</violation>
<violation beginline="587" endline="587" begincolumn="53" endcolumn="57" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 88573 should separate every third digit with an underscore
</violation>
<violation beginline="588" endline="588" begincolumn="40" endcolumn="46" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 2391484 should separate every third digit with an underscore
</violation>
<violation beginline="624" endline="624" begincolumn="20" endcolumn="28" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="630" endline="630" begincolumn="33" endcolumn="55" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="630" endline="756" begincolumn="17" endcolumn="17" rule="JumbledIncrementer" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#jumbledincrementer" priority="3">
Avoid modifying an outer loop incrementer in an inner loop for update expression
</violation>
<violation beginline="630" endline="630" begincolumn="58" endcolumn="58" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'i'
</violation>
<violation beginline="651" endline="651" begincolumn="33" endcolumn="46" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="669" endline="669" begincolumn="49" endcolumn="84" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="682" endline="682" begincolumn="89" endcolumn="110" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="685" endline="685" begincolumn="89" endcolumn="110" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSimpleSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="777" endline="777" begincolumn="63" endcolumn="63" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="vswap" variable="n" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'n'
</violation>
<violation beginline="777" endline="777" begincolumn="47" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="vswap" variable="p1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'p1'
</violation>
<violation beginline="777" endline="777" begincolumn="55" endcolumn="56" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="vswap" variable="p2" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'p2'
</violation>
<violation beginline="791" endline="791" begincolumn="26" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="792" endline="792" begincolumn="26" endcolumn="47" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="793" endline="793" begincolumn="26" endcolumn="46" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="811" endline="811" begincolumn="26" endcolumn="34" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainQSort3" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="872" endline="872" begincolumn="21" endcolumn="22" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainQSort3" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'sp'
</violation>
<violation beginline="887" endline="887" begincolumn="21" endcolumn="22" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainQSort3" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'sp'
</violation>
<violation beginline="892" endline="892" begincolumn="21" endcolumn="22" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainQSort3" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'sp'
</violation>
<violation beginline="897" endline="897" begincolumn="21" endcolumn="22" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainQSort3" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'sp'
</violation>
<violation beginline="903" endline="903" begincolumn="26" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="904" endline="904" begincolumn="26" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="906" endline="1070" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="919" endline="919" begincolumn="29" endcolumn="36" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="919" endline="919" begincolumn="22" endcolumn="26" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 65537 should separate every third digit with an underscore
</violation>
<violation beginline="931" endline="931" begincolumn="75" endcolumn="82" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="938" endline="938" begincolumn="18" endcolumn="32" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'c1' is never used (overwritten on lines 942 and 949)
</violation>
<violation beginline="942" endline="942" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'c1' is never used (overwritten on lines 942 and 949)
</violation>
<violation beginline="945" endline="945" begincolumn="30" endcolumn="34" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 65536 should separate every third digit with an underscore
</violation>
<violation beginline="949" endline="949" begincolumn="14" endcolumn="28" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'c1' is never used (overwritten on lines 953 and 1029)
</violation>
<violation beginline="953" endline="953" begincolumn="18" endcolumn="19" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'c1' is never used (overwritten on lines 953 and 1029)
</violation>
<violation beginline="962" endline="962" begincolumn="27" endcolumn="34" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="968" endline="968" begincolumn="13" endcolumn="13" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'h'
</violation>
<violation beginline="1027" endline="1027" begincolumn="18" endcolumn="90" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="1036" endline="1036" begincolumn="31" endcolumn="38" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1055" endline="1055" begincolumn="45" endcolumn="49" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="BlockSort" method="mainSort" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 65534 should separate every third digit with an underscore
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/bzip2/CBZip2InputStream.java">
<violation beginline="90" endline="90" begincolumn="13" endcolumn="33" rule="SingularField" ruleset="Design" package="org.apache.tools.bzip2" class="CBZip2InputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'computedBlockCRC' could be replaced by a local variable.
</violation>
<violation beginline="202" endline="202" begincolumn="21" endcolumn="59" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="401" endline="401" begincolumn="21" endcolumn="28" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="close" variable="inShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="419" endline="419" begincolumn="31" endcolumn="38" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="bsR" variable="inShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="424" endline="424" begincolumn="43" endcolumn="68" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="bsR" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "unexpected end of stream" appears 7 times in this file; the first occurrence is on line 424
</violation>
<violation beginline="476" endline="476" begincolumn="14" endcolumn="35" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="479" endline="479" begincolumn="26" endcolumn="27" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'pp'
</violation>
<violation beginline="484" endline="484" begincolumn="36" endcolumn="42" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="493" endline="496" begincolumn="9" endcolumn="9" rule="AvoidArrayLoops" ruleset="Performance" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidarrayloops" priority="3">
System.arraycopy is more efficient
</violation>
<violation beginline="493" endline="493" begincolumn="14" endcolumn="35" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="494" endline="494" begincolumn="13" endcolumn="13" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'b'
</violation>
<violation beginline="498" endline="498" begincolumn="14" endcolumn="49" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="500" endline="500" begincolumn="13" endcolumn="15" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'vec'
</violation>
<violation beginline="501" endline="501" begincolumn="13" endcolumn="13" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'b'
</violation>
<violation beginline="503" endline="503" begincolumn="13" endcolumn="15" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="hbCreateDecodeTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'vec'
</violation>
<violation beginline="527" endline="527" begincolumn="27" endcolumn="34" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="recvDecodingTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="558" endline="558" begincolumn="31" endcolumn="38" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="recvDecodingTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="565" endline="569" begincolumn="13" endcolumn="13" rule="AvoidArrayLoops" ruleset="Performance" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="recvDecodingTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidarrayloops" priority="3">
System.arraycopy is more efficient
</violation>
<violation beginline="608" endline="608" begincolumn="37" endcolumn="44" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="createHuffmanDecodingTables" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="627" endline="627" begincolumn="27" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="getAndMoveToFrontDecode" variable="inShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="638" endline="638" begincolumn="56" endcolumn="61" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="getAndMoveToFrontDecode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 100000 should separate every third digit with an underscore
</violation>
<violation beginline="646" endline="646" begincolumn="27" endcolumn="34" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="getAndMoveToFrontDecode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="724" endline="724" begincolumn="24" endcolumn="31" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="getAndMoveToFrontDecode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="732" endline="732" begincolumn="21" endcolumn="45" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="getAndMoveToFrontDecode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="747" endline="747" begincolumn="38" endcolumn="38" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="getAndMoveToFrontDecode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'j'
</violation>
<violation beginline="807" endline="807" begincolumn="27" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="getAndMoveToFrontDecode0" variable="inShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this InputStream object are closed after use
</violation>
<violation beginline="849" endline="852" begincolumn="9" endcolumn="9" rule="AvoidArrayLoops" ruleset="Performance" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#avoidarrayloops" priority="3">
System.arraycopy is more efficient
</violation>
<violation beginline="849" endline="849" begincolumn="14" endcolumn="36" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupBlock" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="850" endline="850" begincolumn="13" endcolumn="13" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'c'
</violation>
<violation beginline="854" endline="854" begincolumn="14" endcolumn="46" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupBlock" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="883" endline="883" begincolumn="21" endcolumn="42" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupRandPartA" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="924" endline="924" begincolumn="20" endcolumn="39" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupRandPartB" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="929" endline="929" begincolumn="21" endcolumn="42" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupRandPartB" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="964" endline="964" begincolumn="20" endcolumn="39" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="setupNoRandPartB" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="988" endline="1049" begincolumn="26" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Data
</violation>
<violation beginline="991" endline="991" begincolumn="9" endcolumn="51" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="993" endline="993" begincolumn="9" endcolumn="50" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="994" endline="994" begincolumn="9" endcolumn="60" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="995" endline="995" begincolumn="9" endcolumn="60" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1001" endline="1001" begincolumn="9" endcolumn="43" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1003" endline="1003" begincolumn="9" endcolumn="64" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1004" endline="1004" begincolumn="9" endcolumn="64" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1005" endline="1005" begincolumn="9" endcolumn="64" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1006" endline="1006" begincolumn="9" endcolumn="48" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1008" endline="1008" begincolumn="9" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1009" endline="1009" begincolumn="9" endcolumn="67" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1010" endline="1010" begincolumn="9" endcolumn="79" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1011" endline="1011" begincolumn="9" endcolumn="65" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1015" endline="1015" begincolumn="9" endcolumn="17" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1016" endline="1016" begincolumn="9" endcolumn="19" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1035" endline="1047" begincolumn="15" endcolumn="9" rule="UnnecessaryModifier" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" method="initTT" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessarymodifier" priority="3">
Unnecessary modifier 'final' on method 'initTT': the method is already in a final class
</violation>
<violation beginline="1035" endline="1047" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2InputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1056" endline="1056" begincolumn="9" endcolumn="26" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2InputStream" method="reportCRCError" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/bzip2/CBZip2OutputStream.java">
<violation beginline="208" endline="208" begincolumn="60" endcolumn="65" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 265720 should separate every third digit with an underscore
</violation>
<violation beginline="208" endline="208" begincolumn="46" endcolumn="50" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 29524 should separate every third digit with an underscore
</violation>
<violation beginline="208" endline="208" begincolumn="68" endcolumn="73" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 797161 should separate every third digit with an underscore
</violation>
<violation beginline="208" endline="208" begincolumn="53" endcolumn="57" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 88573 should separate every third digit with an underscore
</violation>
<violation beginline="209" endline="209" begincolumn="40" endcolumn="46" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 2391484 should separate every third digit with an underscore
</violation>
<violation beginline="231" endline="231" begincolumn="33" endcolumn="40" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="236" endline="236" begincolumn="13" endcolumn="19" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'tooLong'
</violation>
<violation beginline="265" endline="265" begincolumn="26" endcolumn="26" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'yy' is never used (overwritten on lines 270 and 295)
</violation>
<violation beginline="295" endline="295" begincolumn="22" endcolumn="22" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'yy' is never used (overwritten on line 300)
</violation>
<violation beginline="338" endline="338" begincolumn="23" endcolumn="23" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'tmp' is never used (overwritten on line 340)
</violation>
<violation beginline="356" endline="356" begincolumn="36" endcolumn="62" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="363" endline="363" begincolumn="21" endcolumn="27" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'tooLong'
</violation>
<violation beginline="388" endline="388" begincolumn="33" endcolumn="40" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="393" endline="393" begincolumn="13" endcolumn="19" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'tooLong'
</violation>
<violation beginline="420" endline="420" begincolumn="26" endcolumn="26" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'yy' is never used (overwritten on lines 425 and 450)
</violation>
<violation beginline="450" endline="450" begincolumn="22" endcolumn="22" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'yy' is never used (overwritten on line 455)
</violation>
<violation beginline="491" endline="491" begincolumn="23" endcolumn="23" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'tmp' is never used (overwritten on line 493)
</violation>
<violation beginline="507" endline="507" begincolumn="36" endcolumn="62" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="514" endline="514" begincolumn="21" endcolumn="27" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="hbMakeCodeLengths" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'tooLong'
</violation>
<violation beginline="531" endline="531" begincolumn="13" endcolumn="21" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="537" endline="537" begincolumn="19" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="539" endline="539" begincolumn="13" endcolumn="23" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="540" endline="540" begincolumn="13" endcolumn="23" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="541" endline="541" begincolumn="19" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="543" endline="543" begincolumn="13" endcolumn="23" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="545" endline="545" begincolumn="13" endcolumn="21" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="547" endline="547" begincolumn="13" endcolumn="33" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="548" endline="548" begincolumn="17" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="runLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'runLength'
</violation>
<violation beginline="548" endline="548" begincolumn="13" endcolumn="30" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="550" endline="550" begincolumn="13" endcolumn="25" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="550" endline="550" begincolumn="13" endcolumn="25" rule="SingularField" ruleset="Design" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#singularfield" priority="3">
Perhaps 'blockCRC' could be replaced by a local variable.
</violation>
<violation beginline="551" endline="551" begincolumn="13" endcolumn="28" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="552" endline="552" begincolumn="19" endcolumn="41" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="557" endline="557" begincolumn="13" endcolumn="22" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="558" endline="558" begincolumn="13" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="560" endline="560" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="575" endline="575" begincolumn="33" endcolumn="38" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="chooseBlockSize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 132000 should separate every third digit with an underscore
</violation>
<violation beginline="745" endline="745" begincolumn="26" endcolumn="34" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="close" variable="outShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="753" endline="753" begincolumn="22" endcolumn="30" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="flush" variable="outShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="785" endline="785" begincolumn="27" endcolumn="34" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="initBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="859" endline="859" begincolumn="45" endcolumn="48" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="write" variable="offs" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offs'
</violation>
<violation beginline="885" endline="885" begincolumn="29" endcolumn="29" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="write0" variable="b" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'b'
</violation>
<violation beginline="889" endline="889" begincolumn="21" endcolumn="42" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="write0" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="931" endline="931" begincolumn="28" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="bsW" variable="outShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="960" endline="960" begincolumn="32" endcolumn="39" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="962" endline="962" begincolumn="37" endcolumn="44" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1020" endline="1020" begincolumn="37" endcolumn="44" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues0" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1052" endline="1052" begincolumn="35" endcolumn="42" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1055" endline="1055" begincolumn="41" endcolumn="48" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1100" endline="1100" begincolumn="43" endcolumn="50" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1106" endline="1106" begincolumn="47" endcolumn="54" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1117" endline="1117" begincolumn="55" endcolumn="62" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1117" endline="1117" begincolumn="44" endcolumn="52" rule="UseUnderscoresInNumericLiterals" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals" priority="3">
Number 999999999 should separate every third digit with an underscore
</violation>
<violation beginline="1117" endline="1117" begincolumn="22" endcolumn="52" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="1120" endline="1120" begincolumn="25" endcolumn="26" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'bc'
</violation>
<violation beginline="1137" endline="1137" begincolumn="17" endcolumn="18" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues1" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'gs'
</violation>
<violation beginline="1157" endline="1157" begincolumn="31" endcolumn="38" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues2" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1186" endline="1186" begincolumn="37" endcolumn="44" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues3" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1207" endline="1207" begincolumn="26" endcolumn="33" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues4" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1210" endline="1210" begincolumn="30" endcolumn="37" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues4" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1221" endline="1221" begincolumn="28" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues4" variable="outShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="1252" endline="1252" begincolumn="28" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues5" variable="outShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="1259" endline="1259" begincolumn="18" endcolumn="54" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues5" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="1287" endline="1287" begincolumn="28" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues6" variable="outShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="1352" endline="1352" begincolumn="28" endcolumn="36" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues7" variable="outShadow" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this OutputStream object are closed after use
</violation>
<violation beginline="1384" endline="1384" begincolumn="17" endcolumn="18" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues7" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'gs'
</violation>
<violation beginline="1387" endline="1387" begincolumn="13" endcolumn="14" rule="AvoidReassigningLoopVariables" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="sendMTFValues7" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables" priority="3">
Avoid reassigning the loop control variable 'gs'
</violation>
<violation beginline="1439" endline="1439" begincolumn="36" endcolumn="43" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CBZip2OutputStream" method="generateMTFValues" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1515" endline="1573" begincolumn="18" endcolumn="5" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like Data
</violation>
<violation beginline="1519" endline="1519" begincolumn="9" endcolumn="49" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1520" endline="1520" begincolumn="9" endcolumn="48" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1521" endline="1521" begincolumn="9" endcolumn="54" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1522" endline="1522" begincolumn="9" endcolumn="56" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1523" endline="1523" begincolumn="9" endcolumn="59" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1525" endline="1525" begincolumn="9" endcolumn="58" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1526" endline="1526" begincolumn="9" endcolumn="78" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1528" endline="1528" begincolumn="9" endcolumn="78" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1530" endline="1530" begincolumn="9" endcolumn="59" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1531" endline="1531" begincolumn="9" endcolumn="63" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1532" endline="1532" begincolumn="9" endcolumn="77" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1534" endline="1534" begincolumn="9" endcolumn="61" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1535" endline="1535" begincolumn="9" endcolumn="65" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1537" endline="1537" begincolumn="9" endcolumn="55" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1538" endline="1538" begincolumn="9" endcolumn="57" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1539" endline="1539" begincolumn="9" endcolumn="57" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1547" endline="1547" begincolumn="9" endcolumn="27" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1550" endline="1550" begincolumn="9" endcolumn="25" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1551" endline="1551" begincolumn="9" endcolumn="27" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1562" endline="1562" begincolumn="9" endcolumn="20" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CBZip2OutputStream$Data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/bzip2/CRC.java">
<violation beginline="32" endline="140" begincolumn="7" endcolumn="1" rule="ShortClassName" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortclassname" priority="4">
Avoid short class names like CRC
</violation>
<violation beginline="33" endline="98" begincolumn="5" endcolumn="6" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="104" endline="106" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="108" endline="110" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="112" endline="114" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="116" endline="118" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="120" endline="126" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="128" endline="128" begincolumn="34" endcolumn="39" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.bzip2" class="CRC" method="updateCRC" variable="repeat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'repeat'
</violation>
<violation beginline="128" endline="137" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="130" endline="130" begincolumn="16" endcolumn="27" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.bzip2" class="CRC" method="updateCRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="139" endline="139" begincolumn="5" endcolumn="18" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="139" endline="139" begincolumn="5" endcolumn="18" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.bzip2" class="CRC" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/mail/MailMessage.java">
<violation beginline="115" endline="115" begincolumn="13" endcolumn="24" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field from has the same name as a method
</violation>
<violation beginline="118" endline="118" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="118" endline="118" begincolumn="19" endcolumn="58" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field replyto has the same name as a method
</violation>
<violation beginline="118" endline="118" begincolumn="48" endcolumn="55" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="121" endline="121" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="121" endline="121" begincolumn="19" endcolumn="53" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field to has the same name as a method
</violation>
<violation beginline="121" endline="121" begincolumn="43" endcolumn="50" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="124" endline="124" begincolumn="19" endcolumn="32" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="124" endline="124" begincolumn="19" endcolumn="53" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field cc has the same name as a method
</violation>
<violation beginline="124" endline="124" begincolumn="43" endcolumn="50" rule="UseArrayListInsteadOfVector" ruleset="Performance" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#usearraylistinsteadofvector" priority="3">
Use ArrayList instead of Vector
</violation>
<violation beginline="176" endline="176" begincolumn="9" endcolumn="17" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" method="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'connect' called during object construction
</violation>
<violation beginline="177" endline="177" begincolumn="9" endcolumn="18" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" method="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'sendHelo' called during object construction
</violation>
<violation beginline="218" endline="221" begincolumn="12" endcolumn="5" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" method="to" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
<violation beginline="230" endline="233" begincolumn="12" endcolumn="5" rule="ShortMethodName" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" method="cc" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#shortmethodname" priority="3">
Avoid using short method names
</violation>
<violation beginline="291" endline="293" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="296" endline="300" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="302" endline="306" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="308" endline="312" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="314" endline="314" begincolumn="25" endcolumn="38" rule="LooseCoupling" ruleset="Best Practices" package="org.apache.tools.mail" class="MailMessage" method="vectorToList" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#loosecoupling" priority="3">
Avoid using implementation types like 'Vector'; use the interface instead
</violation>
<violation beginline="314" endline="316" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="318" endline="326" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="345" endline="375" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="379" endline="385" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="387" endline="394" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="396" endline="400" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="402" endline="405" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="407" endline="410" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="412" endline="415" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="417" endline="420" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="422" endline="429" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="431" endline="431" begincolumn="27" endcolumn="34" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.mail" class="MailMessage" method="send" variable="ok" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="431" endline="438" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="440" endline="440" begincolumn="43" endcolumn="50" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.mail" class="MailMessage" method="isResponseOK" variable="ok" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="440" endline="448" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="443" endline="443" begincolumn="37" endcolumn="38" rule="AddEmptyString" ruleset="Performance" package="org.apache.tools.mail" class="MailMessage" method="isResponseOK" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#addemptystring" priority="3">
Do not add empty strings
</violation>
<violation beginline="450" endline="468" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailMessage" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="457" endline="459" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" method="disconnect" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="464" endline="466" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.mail" class="MailMessage" method="disconnect" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="506" endline="508" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailPrintStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="510" endline="514" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.mail" class="MailPrintStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/mail/SmtpResponseReader.java">
<violation beginline="36" endline="36" begincolumn="30" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.mail" class="SmtpResponseReader" variable="reader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'reader'
</violation>
<violation beginline="36" endline="36" begincolumn="39" endcolumn="42" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.mail" class="SmtpResponseReader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The field initializer for 'reader' is never used (overwritten on line 44)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/tar/TarArchiveSparseEntry.java">
<violation beginline="45" endline="45" begincolumn="13" endcolumn="31" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.tar" class="TarArchiveSparseEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field isExtended has the same name as a method
</violation>
<violation beginline="45" endline="45" begincolumn="21" endcolumn="30" rule="ImmutableField" ruleset="Design" package="org.apache.tools.tar" class="TarArchiveSparseEntry" variable="isExtended" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#immutablefield" priority="3">
Private field 'isExtended' could be made final; it is only initialized in the declaration or constructor.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/tar/TarBuffer.java">
<violation beginline="171" endline="171" begincolumn="14" endcolumn="44" rule="ForLoopVariableCount" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="isEOFRecord" variable="VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#forloopvariablecount" priority="3">
Too many control variables in the for statement
</violation>
<violation beginline="186" endline="186" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="skipRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="187" endline="187" begincolumn="34" endcolumn="45" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.tar" class="TarBuffer" method="skipRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal " blkIdx = " appears 4 times in this file; the first occurrence is on line 187
</violation>
<violation beginline="209" endline="209" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="readRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="240" endline="240" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="readBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="291" endline="295" begincolumn="17" endcolumn="17" rule="CollapsibleIfStatements" ruleset="Design" package="org.apache.tools.tar" class="TarBuffer" method="readBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#collapsibleifstatements" priority="3">
These nested if statements could be combined
</violation>
<violation beginline="292" endline="292" begincolumn="21" endcolumn="38" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="readBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="331" endline="331" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="writeRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="339" endline="339" begincolumn="35" endcolumn="62" rule="AvoidDuplicateLiterals" ruleset="Error Prone" package="org.apache.tools.tar" class="TarBuffer" method="writeRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidduplicateliterals" priority="3">
The String literal "writing to an input buffer" appears 4 times in this file; the first occurrence is on line 339
</violation>
<violation beginline="371" endline="371" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="writeRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="405" endline="405" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="writeBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="423" endline="435" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.tar" class="TarBuffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="425" endline="425" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="flushBlock" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="444" endline="444" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarBuffer" method="close" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/tar/TarConstants.java">
<violation beginline="38" endline="38" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="43" endline="43" begincolumn="5" endcolumn="28" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="48" endline="48" begincolumn="5" endcolumn="25" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="53" endline="53" begincolumn="5" endcolumn="23" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="58" endline="58" begincolumn="5" endcolumn="22" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="63" endline="63" begincolumn="5" endcolumn="22" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="69" endline="69" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="69" endline="69" begincolumn="21" endcolumn="29" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.tar" class="TarConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="74" endline="74" begincolumn="5" endcolumn="25" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="80" endline="80" begincolumn="5" endcolumn="24" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="86" endline="86" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="86" endline="86" begincolumn="22" endcolumn="34" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.tar" class="TarConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="89" endline="89" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="93" endline="93" begincolumn="5" endcolumn="24" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="98" endline="98" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="101" endline="101" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="106" endline="106" begincolumn="5" endcolumn="26" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="111" endline="111" begincolumn="5" endcolumn="27" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="116" endline="116" begincolumn="5" endcolumn="25" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="121" endline="121" begincolumn="5" endcolumn="25" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="126" endline="126" begincolumn="5" endcolumn="22" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="132" endline="132" begincolumn="5" endcolumn="27" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="138" endline="138" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="144" endline="144" begincolumn="5" endcolumn="29" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="150" endline="150" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="156" endline="156" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="162" endline="162" begincolumn="5" endcolumn="27" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="168" endline="168" begincolumn="5" endcolumn="30" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="174" endline="174" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="180" endline="180" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="186" endline="186" begincolumn="5" endcolumn="38" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="192" endline="192" begincolumn="5" endcolumn="40" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="198" endline="198" begincolumn="5" endcolumn="26" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="203" endline="203" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="208" endline="208" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="213" endline="213" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="218" endline="218" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="223" endline="223" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="228" endline="228" begincolumn="5" endcolumn="31" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="233" endline="233" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="238" endline="238" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="243" endline="243" begincolumn="5" endcolumn="42" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="248" endline="248" begincolumn="5" endcolumn="42" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="253" endline="253" begincolumn="5" endcolumn="40" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="260" endline="260" begincolumn="5" endcolumn="48" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="265" endline="265" begincolumn="5" endcolumn="48" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="270" endline="270" begincolumn="5" endcolumn="52" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="272" endline="272" begincolumn="5" endcolumn="28" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="277" endline="277" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="278" endline="278" begincolumn="5" endcolumn="32" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="283" endline="283" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="285" endline="285" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="286" endline="286" begincolumn="5" endcolumn="37" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="291" endline="291" begincolumn="5" endcolumn="42" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.tar" class="TarConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/tar/TarEntry.java">
<violation beginline="155" endline="155" begincolumn="13" endcolumn="31" rule="AvoidFieldNameMatchingMethodName" ruleset="Error Prone" package="org.apache.tools.tar" class="TarEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname" priority="3">
Field isExtended has the same name as a method
</violation>
<violation beginline="167" endline="167" begincolumn="48" endcolumn="53" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.tar" class="TarEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="170" endline="170" begincolumn="49" endcolumn="55" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.tar" class="TarEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="215" endline="215" begincolumn="28" endcolumn="31" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="TarEntry" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="308" endline="308" begincolumn="9" endcolumn="33" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.tar" class="TarEntry" method="TarEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'parseTarHeader' called during object construction
</violation>
<violation beginline="323" endline="323" begincolumn="9" endcolumn="43" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.tar" class="TarEntry" method="TarEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'parseTarHeader' called during object construction
</violation>
<violation beginline="333" endline="335" begincolumn="12" endcolumn="5" rule="SuspiciousEqualsMethodName" ruleset="Error Prone" package="org.apache.tools.tar" class="TarEntry" method="equals" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#suspiciousequalsmethodname" priority="2">
The method name and parameter number are suspiciously close to equals(Object)
</violation>
<violation beginline="831" endline="831" begincolumn="27" endcolumn="42" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.tar" class="TarEntry" method="writeEntryHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="831" endline="831" begincolumn="17" endcolumn="48" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="writeEntryHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="917" endline="917" begincolumn="27" endcolumn="42" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.tar" class="TarEntry" method="parseTarHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="917" endline="917" begincolumn="17" endcolumn="48" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="parseTarHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="975" endline="1002" begincolumn="9" endcolumn="9" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.tar" class="TarEntry" method="parseTarHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
<violation beginline="986" endline="986" begincolumn="27" endcolumn="41" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="parseTarHeader" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'offset' is never used
</violation>
<violation beginline="1009" endline="1009" begincolumn="52" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="normalizeFileName" variable="fileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'fileName'
</violation>
<violation beginline="1009" endline="1009" begincolumn="52" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="normalizeFileName" variable="fileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'fileName'
</violation>
<violation beginline="1009" endline="1009" begincolumn="52" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="normalizeFileName" variable="fileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'fileName'
</violation>
<violation beginline="1009" endline="1009" begincolumn="52" endcolumn="59" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarEntry" method="normalizeFileName" variable="fileName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'fileName'
</violation>
<violation beginline="1080" endline="1080" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.tar" class="TarEntry" method="matchAsciiBuffer" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/tar/TarInputStream.java">
<violation beginline="236" endline="237" begincolumn="37" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.tar" class="TarInputStream" method="mark" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="243" endline="244" begincolumn="25" endcolumn="5" rule="UncommentedEmptyMethodBody" ruleset="Documentation" package="org.apache.tools.tar" class="TarInputStream" method="reset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptymethodbody" priority="3">
Document empty method body
</violation>
<violation beginline="268" endline="268" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="getNextEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="300" endline="300" begincolumn="13" endcolumn="30" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="getNextEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="356" endline="356" begincolumn="22" endcolumn="22" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="getLongNameData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The initializer for variable 'length' is never used (overwritten on line 357)
</violation>
<violation beginline="357" endline="357" begincolumn="16" endcolumn="46" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.tar" class="TarInputStream" method="getLongNameData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="401" endline="401" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="getRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="406" endline="406" begincolumn="17" endcolumn="34" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="getRecord" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.println is used
</violation>
<violation beginline="420" endline="468" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.tar" class="TarInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="427" endline="427" begincolumn="20" endcolumn="40" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.tar" class="TarInputStream" method="parsePaxHeaders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="432" endline="432" begincolumn="28" endcolumn="48" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.tar" class="TarInputStream" method="parsePaxHeaders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="440" endline="440" begincolumn="36" endcolumn="73" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.tar" class="TarInputStream" method="parsePaxHeaders" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="483" endline="514" begincolumn="13" endcolumn="13" rule="SwitchStmtsShouldHaveDefault" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="applyPaxHeadersToCurrentEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault" priority="3">
Switch statements should have a default label
</violation>
<violation beginline="575" endline="575" begincolumn="49" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="read" variable="numToRead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'numToRead'
</violation>
<violation beginline="575" endline="575" begincolumn="49" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="read" variable="numToRead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'numToRead'
</violation>
<violation beginline="575" endline="575" begincolumn="49" endcolumn="57" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="read" variable="numToRead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'numToRead'
</violation>
<violation beginline="575" endline="575" begincolumn="37" endcolumn="42" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="read" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="575" endline="575" begincolumn="37" endcolumn="42" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarInputStream" method="read" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/tar/TarOutputStream.java">
<violation beginline="81" endline="81" begincolumn="21" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.tar" class="TarOutputStream" variable="closed" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'closed'
</violation>
<violation beginline="84" endline="84" begincolumn="21" endcolumn="45" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.tar" class="TarOutputStream" variable="haveUnclosedEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'haveUnclosedEntry'
</violation>
<violation beginline="87" endline="87" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.tar" class="TarOutputStream" variable="finished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'finished'
</violation>
<violation beginline="91" endline="91" begincolumn="21" endcolumn="57" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.tar" class="TarOutputStream" variable="addPaxHeadersForNonAsciiNames" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'addPaxHeadersForNonAsciiNames'
</violation>
<violation beginline="312" endline="312" begincolumn="13" endcolumn="27" rule="UseCollectionIsEmpty" ruleset="Best Practices" package="org.apache.tools.tar" class="TarOutputStream" method="putNextEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usecollectionisempty" priority="3">
Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()
</violation>
<violation beginline="411" endline="411" begincolumn="53" endcolumn="62" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarOutputStream" method="write" variable="numToWrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'numToWrite'
</violation>
<violation beginline="411" endline="411" begincolumn="53" endcolumn="62" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarOutputStream" method="write" variable="numToWrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'numToWrite'
</violation>
<violation beginline="411" endline="411" begincolumn="53" endcolumn="62" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarOutputStream" method="write" variable="numToWrite" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'numToWrite'
</violation>
<violation beginline="411" endline="411" begincolumn="40" endcolumn="46" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarOutputStream" method="write" variable="wOffset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'wOffset'
</violation>
<violation beginline="411" endline="411" begincolumn="40" endcolumn="46" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarOutputStream" method="write" variable="wOffset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'wOffset'
</violation>
<violation beginline="411" endline="411" begincolumn="40" endcolumn="46" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.tar" class="TarOutputStream" method="write" variable="wOffset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'wOffset'
</violation>
<violation beginline="479" endline="521" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.tar" class="TarOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="598" endline="598" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.tar" class="TarOutputStream" method="failForBigNumber" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="650" endline="650" begincolumn="27" endcolumn="42" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.tar" class="TarOutputStream" method="handleLongName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/tar/TarUtils.java">
<violation beginline="38" endline="566" begincolumn="8" endcolumn="1" rule="ClassWithOnlyPrivateConstructorsShouldBeFinal" ruleset="Design" package="org.apache.tools.tar" class="TarUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal" priority="1">
A class which only has private constructors should be final
</violation>
<violation beginline="42" endline="43" begincolumn="5" endcolumn="47" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.tar" class="TarUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="48" endline="76" begincolumn="5" endcolumn="10" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.tar" class="TarUtils" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="49" endline="51" begincolumn="20" endcolumn="13" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.tar" class="TarUtils" method="canEncode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'canEncode(String)' is missing an @Override annotation.
</violation>
<violation beginline="53" endline="62" begincolumn="20" endcolumn="13" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.tar" class="TarUtils" method="encode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'encode(String)' is missing an @Override annotation.
</violation>
<violation beginline="64" endline="75" begincolumn="20" endcolumn="13" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.tar" class="TarUtils" method="decode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'decode(byte)' is missing an @Override annotation.
</violation>
<violation beginline="267" endline="267" begincolumn="27" endcolumn="42" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.tar" class="TarUtils" method="parseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="267" endline="267" begincolumn="17" endcolumn="48" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.tar" class="TarUtils" method="parseName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="327" endline="327" begincolumn="27" endcolumn="42" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.tar" class="TarUtils" method="formatNameBytes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="327" endline="327" begincolumn="17" endcolumn="48" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.tar" class="TarUtils" method="formatNameBytes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/AbstractUnicodeExtraField.java">
<violation beginline="33" endline="34" begincolumn="15" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.zip" class="AbstractUnicodeExtraField" method="AbstractUnicodeExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="57" endline="57" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="AbstractUnicodeExtraField" method="AbstractUnicodeExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="131" endline="141" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AbstractUnicodeExtraField" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryData()' is missing an @Override annotation.
</violation>
<violation beginline="144" endline="149" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AbstractUnicodeExtraField" method="getCentralDirectoryLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryLength()' is missing an @Override annotation.
</violation>
<violation beginline="152" endline="154" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AbstractUnicodeExtraField" method="getLocalFileDataData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataData()' is missing an @Override annotation.
</violation>
<violation beginline="157" endline="159" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AbstractUnicodeExtraField" method="getLocalFileDataLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataLength()' is missing an @Override annotation.
</violation>
<violation beginline="162" endline="181" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AbstractUnicodeExtraField" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromLocalFileData(byte, int, int)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/AsiExtraField.java">
<violation beginline="61" endline="61" begincolumn="17" endcolumn="24" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="AsiExtraField" variable="mode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'mode'
</violation>
<violation beginline="67" endline="67" begincolumn="17" endcolumn="23" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="AsiExtraField" variable="uid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'uid'
</violation>
<violation beginline="73" endline="73" begincolumn="17" endcolumn="23" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="AsiExtraField" variable="gid" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'gid'
</violation>
<violation beginline="87" endline="87" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="AsiExtraField" variable="dirFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dirFlag'
</violation>
<violation beginline="97" endline="98" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.zip" class="AsiExtraField" method="AsiExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="97" endline="98" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.zip" class="AsiExtraField" method="AsiExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="105" endline="107" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AsiExtraField" method="getHeaderId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getHeaderId()' is missing an @Override annotation.
</violation>
<violation beginline="115" endline="123" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AsiExtraField" method="getLocalFileDataLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataLength()' is missing an @Override annotation.
</violation>
<violation beginline="130" endline="132" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AsiExtraField" method="getCentralDirectoryLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryLength()' is missing an @Override annotation.
</violation>
<violation beginline="140" endline="166" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AsiExtraField" method="getLocalFileDataData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataData()' is missing an @Override annotation.
</violation>
<violation beginline="173" endline="175" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AsiExtraField" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryData()' is missing an @Override annotation.
</violation>
<violation beginline="292" endline="323" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="AsiExtraField" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromLocalFileData(byte, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="342" endline="351" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.zip" class="AsiExtraField" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="342" endline="351" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.zip" class="AsiExtraField" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="349" endline="349" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="AsiExtraField" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ExtraFieldUtils.java">
<violation beginline="66" endline="66" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="ExtraFieldUtils" method="register" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="66" endline="66" begincolumn="13" endcolumn="80" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.zip" class="ExtraFieldUtils" method="register" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="68" endline="68" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="ExtraFieldUtils" method="register" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="68" endline="68" begincolumn="13" endcolumn="71" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.zip" class="ExtraFieldUtils" method="register" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="70" endline="70" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="ExtraFieldUtils" method="register" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="70" endline="70" begincolumn="13" endcolumn="83" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.zip" class="ExtraFieldUtils" method="register" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="143" endline="166" begincolumn="17" endcolumn="17" rule="MissingBreakInSwitch" ruleset="Error Prone" package="org.apache.tools.zip" class="ExtraFieldUtils" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#missingbreakinswitch" priority="3">
A switch statement does not contain a break
</violation>
<violation beginline="178" endline="178" begincolumn="17" endcolumn="56" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.zip" class="ExtraFieldUtils" method="parse" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="193" endline="193" begincolumn="49" endcolumn="68" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.zip" class="ExtraFieldUtils" method="mergeLocalFileDataData" variable="data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="227" endline="227" begincolumn="52" endcolumn="71" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.zip" class="ExtraFieldUtils" method="mergeCentralDirectoryData" variable="data" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="258" endline="303" begincolumn="25" endcolumn="5" rule="DataClass" ruleset="Design" package="org.apache.tools.zip" class="ExtraFieldUtils$UnparseableExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#dataclass" priority="3">
The class 'UnparseableExtraField' is suspected to be a Data Class (WOC=0.000%, NOPA=6, NOAM=1, WMC=2)
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/FallbackZipEncoding.java">
<violation beginline="66" endline="68" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="FallbackZipEncoding" method="canEncode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'canEncode(String)' is missing an @Override annotation.
</violation>
<violation beginline="73" endline="79" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="FallbackZipEncoding" method="encode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'encode(String)' is missing an @Override annotation.
</violation>
<violation beginline="84" endline="90" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="FallbackZipEncoding" method="decode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'decode(byte)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/GeneralPurposeBit.java">
<violation beginline="52" endline="52" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="GeneralPurposeBit" variable="languageEncodingFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'languageEncodingFlag'
</violation>
<violation beginline="53" endline="53" begincolumn="21" endcolumn="46" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="GeneralPurposeBit" variable="dataDescriptorFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dataDescriptorFlag'
</violation>
<violation beginline="54" endline="54" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="GeneralPurposeBit" variable="encryptionFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encryptionFlag'
</violation>
<violation beginline="55" endline="55" begincolumn="21" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="GeneralPurposeBit" variable="strongEncryptionFlag" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'strongEncryptionFlag'
</violation>
<violation beginline="57" endline="58" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.zip" class="GeneralPurposeBit" method="GeneralPurposeBit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="57" endline="58" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.zip" class="GeneralPurposeBit" method="GeneralPurposeBit" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="204" endline="211" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.zip" class="GeneralPurposeBit" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="209" endline="209" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="GeneralPurposeBit" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/JarMarker.java">
<violation beginline="37" endline="39" begincolumn="12" endcolumn="5" rule="UnnecessaryConstructor" ruleset="Code Style" package="org.apache.tools.zip" class="JarMarker" method="JarMarker" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#unnecessaryconstructor" priority="3">
Avoid unnecessary constructors - the compiler will generate these for you
</violation>
<violation beginline="53" endline="55" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="JarMarker" method="getHeaderId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getHeaderId()' is missing an @Override annotation.
</violation>
<violation beginline="62" endline="64" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="JarMarker" method="getLocalFileDataLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataLength()' is missing an @Override annotation.
</violation>
<violation beginline="71" endline="73" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="JarMarker" method="getCentralDirectoryLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryLength()' is missing an @Override annotation.
</violation>
<violation beginline="81" endline="83" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="JarMarker" method="getLocalFileDataData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataData()' is missing an @Override annotation.
</violation>
<violation beginline="90" endline="92" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="JarMarker" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryData()' is missing an @Override annotation.
</violation>
<violation beginline="102" endline="107" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="JarMarker" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromLocalFileData(byte, int, int)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/NioZipEncoding.java">
<violation beginline="56" endline="62" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="NioZipEncoding" method="canEncode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'canEncode(String)' is missing an @Override annotation.
</violation>
<violation beginline="67" endline="108" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="NioZipEncoding" method="encode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'encode(String)' is missing an @Override annotation.
</violation>
<violation beginline="113" endline="118" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="NioZipEncoding" method="decode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'decode(byte)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/Simple8BitZipEncoding.java">
<violation beginline="61" endline="63" begincolumn="16" endcolumn="9" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Simple8BitZipEncoding$Simple8BitChar" method="compareTo" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'compareTo(Simple8BitChar)' is missing an @Override annotation.
</violation>
<violation beginline="90" endline="90" begincolumn="19" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="Simple8BitZipEncoding" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="97" endline="97" begincolumn="19" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="Simple8BitZipEncoding" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="103" endline="103" begincolumn="34" endcolumn="55" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.zip" class="Simple8BitZipEncoding" method="Simple8BitZipEncoding" variable="highChars" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="217" endline="229" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Simple8BitZipEncoding" method="canEncode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'canEncode(String)' is missing an @Override annotation.
</violation>
<violation beginline="234" endline="253" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Simple8BitZipEncoding" method="encode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'encode(String)' is missing an @Override annotation.
</violation>
<violation beginline="258" endline="266" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Simple8BitZipEncoding" method="decode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'decode(byte)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/UnicodeCommentExtraField.java">
<violation beginline="35" endline="36" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.zip" class="UnicodeCommentExtraField" method="UnicodeCommentExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="65" endline="67" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnicodeCommentExtraField" method="getHeaderId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getHeaderId()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/UnicodePathExtraField.java">
<violation beginline="34" endline="35" begincolumn="12" endcolumn="5" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.zip" class="UnicodePathExtraField" method="UnicodePathExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="63" endline="65" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnicodePathExtraField" method="getHeaderId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getHeaderId()' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/UnixStat.java">
<violation beginline="33" endline="33" begincolumn="5" endcolumn="34" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.zip" class="UnixStat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="33" endline="33" begincolumn="29" endcolumn="33" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="UnixStat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="39" endline="39" begincolumn="5" endcolumn="36" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.zip" class="UnixStat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="39" endline="39" begincolumn="29" endcolumn="35" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="UnixStat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="45" endline="45" begincolumn="5" endcolumn="36" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.zip" class="UnixStat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="45" endline="45" begincolumn="29" endcolumn="35" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="UnixStat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="51" endline="51" begincolumn="5" endcolumn="35" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.zip" class="UnixStat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="51" endline="51" begincolumn="29" endcolumn="34" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="UnixStat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="63" endline="63" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.zip" class="UnixStat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="63" endline="63" begincolumn="29" endcolumn="32" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="UnixStat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="69" endline="69" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.zip" class="UnixStat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="69" endline="69" begincolumn="29" endcolumn="32" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="UnixStat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="75" endline="75" begincolumn="5" endcolumn="33" rule="ConstantsInInterface" ruleset="Best Practices" package="org.apache.tools.zip" class="UnixStat" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#constantsininterface" priority="3">
Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.
</violation>
<violation beginline="75" endline="75" begincolumn="29" endcolumn="32" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="UnixStat" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/UnparseableExtraFieldData.java">
<violation beginline="44" endline="46" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="getHeaderId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getHeaderId()' is missing an @Override annotation.
</violation>
<violation beginline="53" endline="55" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="getLocalFileDataLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataLength()' is missing an @Override annotation.
</violation>
<violation beginline="62" endline="66" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="getCentralDirectoryLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryLength()' is missing an @Override annotation.
</violation>
<violation beginline="73" endline="75" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="getLocalFileDataData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataData()' is missing an @Override annotation.
</violation>
<violation beginline="82" endline="85" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryData()' is missing an @Override annotation.
</violation>
<violation beginline="83" endline="84" begincolumn="9" endcolumn="74" rule="MethodReturnsInternalArray" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#methodreturnsinternalarray" priority="3">
Returning 'centralDirectoryData' may expose an internal array.
</violation>
<violation beginline="94" endline="97" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromLocalFileData(byte, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="106" endline="113" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnparseableExtraFieldData" method="parseFromCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromCentralDirectoryData(byte, int, int)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/UnrecognizedExtraField.java">
<violation beginline="51" endline="53" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnrecognizedExtraField" method="getHeaderId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getHeaderId()' is missing an @Override annotation.
</violation>
<violation beginline="61" endline="61" begincolumn="13" endcolumn="29" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="UnrecognizedExtraField" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="76" endline="78" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnrecognizedExtraField" method="getLocalFileDataLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataLength()' is missing an @Override annotation.
</violation>
<violation beginline="84" endline="86" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnrecognizedExtraField" method="getLocalFileDataData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataData()' is missing an @Override annotation.
</violation>
<violation beginline="94" endline="94" begincolumn="13" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="UnrecognizedExtraField" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="109" endline="114" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnrecognizedExtraField" method="getCentralDirectoryLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryLength()' is missing an @Override annotation.
</violation>
<violation beginline="120" endline="125" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnrecognizedExtraField" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryData()' is missing an @Override annotation.
</violation>
<violation beginline="133" endline="137" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnrecognizedExtraField" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromLocalFileData(byte, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="144" endline="152" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="UnrecognizedExtraField" method="parseFromCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromCentralDirectoryData(byte, int, int)' is missing an @Override annotation.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/Zip64ExtendedInformationExtraField.java">
<violation beginline="44" endline="44" begincolumn="5" endcolumn="59" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="51" endline="51" begincolumn="13" endcolumn="75" rule="OneDeclarationPerLine" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" variable="VariableDeclaratorId, VariableDeclaratorId, VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#onedeclarationperline" priority="4">
Use one line for each declaration, it enhances code readability.
</violation>
<violation beginline="68" endline="68" begincolumn="12" endcolumn="51" rule="UncommentedEmptyConstructor" ruleset="Documentation" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="Zip64ExtendedInformationExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_documentation.html#uncommentedemptyconstructor" priority="3">
Document empty constructor
</violation>
<violation beginline="102" endline="104" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="getHeaderId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getHeaderId()' is missing an @Override annotation.
</violation>
<violation beginline="107" endline="109" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="getLocalFileDataLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataLength()' is missing an @Override annotation.
</violation>
<violation beginline="112" endline="117" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="getCentralDirectoryLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryLength()' is missing an @Override annotation.
</violation>
<violation beginline="120" endline="130" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="getLocalFileDataData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getLocalFileDataData()' is missing an @Override annotation.
</violation>
<violation beginline="133" endline="145" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'getCentralDirectoryData()' is missing an @Override annotation.
</violation>
<violation beginline="142" endline="142" begincolumn="20" endcolumn="23" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="getCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'off' is never used
</violation>
<violation beginline="148" endline="148" begincolumn="59" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromLocalFileData" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="148" endline="148" begincolumn="59" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromLocalFileData" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="148" endline="148" begincolumn="59" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromLocalFileData" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="148" endline="148" begincolumn="59" endcolumn="64" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromLocalFileData" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="148" endline="175" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromLocalFileData(byte, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="172" endline="172" begincolumn="23" endcolumn="26" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'offset' is never used
</violation>
<violation beginline="173" endline="173" begincolumn="26" endcolumn="29" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromLocalFileData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'remaining' is never used
</violation>
<violation beginline="178" endline="178" begincolumn="66" endcolumn="71" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromCentralDirectoryData" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="178" endline="178" begincolumn="66" endcolumn="71" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromCentralDirectoryData" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="178" endline="202" begincolumn="12" endcolumn="5" rule="MissingOverride" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="parseFromCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#missingoverride" priority="3">
The method 'parseFromCentralDirectoryData(byte, int, int)' is missing an @Override annotation.
</violation>
<violation beginline="254" endline="254" begincolumn="27" endcolumn="30" rule="UnusedAssignment" ruleset="Best Practices" package="org.apache.tools.zip" class="Zip64ExtendedInformationExtraField" method="reparseCentralDirectoryData" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#unusedassignment" priority="3">
The value assigned to variable 'offset' is never used
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/Zip64RequiredException.java">
<violation beginline="36" endline="38" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="Zip64RequiredException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="40" endline="41" begincolumn="18" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="Zip64RequiredException" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="40" endline="41" begincolumn="5" endcolumn="54" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="Zip64RequiredException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="43" endline="44" begincolumn="18" endcolumn="52" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="Zip64RequiredException" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="43" endline="44" begincolumn="5" endcolumn="52" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="Zip64RequiredException" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipConstants.java">
<violation beginline="27" endline="27" begincolumn="18" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="27" endline="27" begincolumn="5" endcolumn="38" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="30" endline="30" begincolumn="18" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="30" endline="30" begincolumn="5" endcolumn="31" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="33" endline="33" begincolumn="18" endcolumn="30" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="33" endline="33" begincolumn="5" endcolumn="30" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="36" endline="36" begincolumn="18" endcolumn="31" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="36" endline="36" begincolumn="5" endcolumn="31" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="39" endline="39" begincolumn="18" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="39" endline="39" begincolumn="5" endcolumn="42" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="42" endline="42" begincolumn="18" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="42" endline="42" begincolumn="5" endcolumn="54" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="45" endline="45" begincolumn="18" endcolumn="44" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="45" endline="45" begincolumn="5" endcolumn="44" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="51" endline="51" begincolumn="18" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="51" endline="51" begincolumn="5" endcolumn="48" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="57" endline="57" begincolumn="18" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="57" endline="57" begincolumn="5" endcolumn="48" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipConstants" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipEncodingHelper.java">
<violation beginline="31" endline="250" begincolumn="17" endcolumn="1" rule="AbstractClassWithoutAbstractMethod" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEncodingHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod" priority="3">
This abstract class does not have any abstract methods
</violation>
<violation beginline="50" endline="50" begincolumn="30" endcolumn="51" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEncodingHelper$SimpleEncodingHolder" method="SimpleEncodingHolder" variable="highChars" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="50" endline="50" begincolumn="30" endcolumn="51" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEncodingHelper$SimpleEncodingHolder" method="SimpleEncodingHolder" variable="highChars" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'highChars' is stored directly.
</violation>
<violation beginline="58" endline="63" begincolumn="29" endcolumn="9" rule="AvoidSynchronizedAtMethodLevel" ruleset="Multithreading" package="org.apache.tools.zip" class="ZipEncodingHelper$SimpleEncodingHolder" method="getEncoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel" priority="3">
Use block level rather than method level synchronization
</violation>
<violation beginline="66" endline="66" begincolumn="26" endcolumn="75" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="71" endline="93" begincolumn="22" endcolumn="39" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="cp437_high_chars" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="103" endline="125" begincolumn="22" endcolumn="39" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="cp850_high_chars" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="149" endline="158" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="165" endline="168" begincolumn="33" endcolumn="5" rule="UseShortArrayInitializer" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="HEX_DIGITS" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#useshortarrayinitializer" priority="3">
Array initialization can be written shorter
</violation>
<violation beginline="165" endline="168" begincolumn="26" endcolumn="6" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="177" endline="186" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="192" endline="192" begincolumn="18" endcolumn="38" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="192" endline="192" begincolumn="5" endcolumn="38" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="197" endline="197" begincolumn="26" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="202" endline="202" begincolumn="18" endcolumn="79" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="202" endline="202" begincolumn="5" endcolumn="79" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="242" endline="242" begincolumn="34" endcolumn="41" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEncodingHelper" method="isUTF8" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'encoding'
</violation>
<violation beginline="242" endline="249" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipEncodingHelper" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipEntry.java">
<violation beginline="74" endline="74" begincolumn="17" endcolumn="38" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipEntry" variable="internalAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'internalAttributes'
</violation>
<violation beginline="76" endline="76" begincolumn="18" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipEntry" variable="externalAttributes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'externalAttributes'
</violation>
<violation beginline="78" endline="78" begincolumn="39" endcolumn="61" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipEntry" variable="unparseableExtra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'unparseableExtra'
</violation>
<violation beginline="79" endline="79" begincolumn="20" endcolumn="30" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipEntry" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'name'
</violation>
<violation beginline="80" endline="80" begincolumn="20" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipEntry" variable="rawName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'rawName'
</violation>
<violation beginline="95" endline="95" begincolumn="9" endcolumn="21" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="ZipEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setName' called during object construction
</violation>
<violation beginline="110" endline="110" begincolumn="9" endcolumn="32" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="ZipEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setName' called during object construction
</violation>
<violation beginline="113" endline="114" begincolumn="13" endcolumn="64" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="ZipEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setExtraFields' called during object construction
</violation>
<violation beginline="117" endline="117" begincolumn="13" endcolumn="22" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="ZipEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setExtra' called during object construction
</violation>
<violation beginline="137" endline="137" begincolumn="9" endcolumn="49" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="ZipEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setExtraFields' called during object construction
</violation>
<violation beginline="140" endline="140" begincolumn="9" endcolumn="86" rule="ConstructorCallsOverridableMethod" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="ZipEntry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod" priority="1">
Overridable method 'setGeneralPurposeBit' called during object construction
</violation>
<violation beginline="178" endline="185" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="178" endline="185" begincolumn="12" endcolumn="5" rule="CloneThrowsCloneNotSupportedException" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception" priority="3">
clone() method should throw CloneNotSupportedException
</violation>
<violation beginline="263" endline="263" begincolumn="42" endcolumn="45" rule="AvoidUsingOctalValues" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="setUnixMode" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#avoidusingoctalvalues" priority="3">
Do not start a literal by 0 unless its an octal value
</violation>
<violation beginline="310" endline="310" begincolumn="32" endcolumn="59" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEntry" method="setExtraFields" variable="fields" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="319" endline="319" begincolumn="23" endcolumn="76" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.zip" class="ZipEntry" method="setExtraFields" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="358" endline="358" begincolumn="36" endcolumn="54" rule="UseVarargs" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEntry" method="copyOf" variable="src" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usevarargs" priority="4">
Consider using varargs for methods or constructors which take an array the last parameter.
</violation>
<violation beginline="470" endline="470" begincolumn="23" endcolumn="76" rule="OptimizableToArrayCall" ruleset="Performance" package="org.apache.tools.zip" class="ZipEntry" method="removeExtraField" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#optimizabletoarraycall" priority="3">
This call to Collection.toArray() may be optimizable
</violation>
<violation beginline="522" endline="522" begincolumn="53" endcolumn="68" rule="AvoidUncheckedExceptionsInSignatures" ruleset="Design" package="org.apache.tools.zip" class="ZipEntry" method="setExtra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures" priority="3">
A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause
</violation>
<violation beginline="529" endline="529" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="ZipEntry" method="setExtra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="557" endline="557" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="ZipEntry" method="setCentralDirectoryExtra" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
<violation beginline="625" endline="625" begincolumn="35" endcolumn="38" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEntry" method="setName" variable="name" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'name'
</violation>
<violation beginline="666" endline="666" begincolumn="47" endcolumn="66" rule="ArrayIsStoredDirectly" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipEntry" method="setName" variable="rawName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#arrayisstoreddirectly" priority="3">
The user-supplied array 'rawName' is stored directly.
</violation>
<violation beginline="680" endline="687" begincolumn="12" endcolumn="5" rule="ReturnEmptyArrayRatherThanNull" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipEntry" method="getRawName" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull" priority="1">
Return an empty array rather than null.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipFile.java">
<violation beginline="19" endline="1045" begincolumn="1" endcolumn="2" rule="TooManyStaticImports" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#toomanystaticimports" priority="3">
Too many static imports may lead to messy code
</violation>
<violation beginline="78" endline="78" begincolumn="5" endcolumn="40" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="79" endline="79" begincolumn="5" endcolumn="36" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="109" endline="109" begincolumn="19" endcolumn="34" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="114" endline="114" begincolumn="19" endcolumn="42" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="119" endline="119" begincolumn="19" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="124" endline="124" begincolumn="19" endcolumn="43" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="129" endline="129" begincolumn="19" endcolumn="48" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="134" endline="134" begincolumn="22" endcolumn="36" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="137" endline="137" begincolumn="19" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="138" endline="138" begincolumn="19" endcolumn="51" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="139" endline="139" begincolumn="19" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="140" endline="140" begincolumn="19" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="214" endline="228" begincolumn="9" endcolumn="9" rule="UseTryWithResources" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipFile" method="ZipFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#usetrywithresources" priority="3">
Consider using a try-with-resources statement instead of explicitly closing the resource
</violation>
<violation beginline="224" endline="226" begincolumn="19" endcolumn="17" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipFile" method="ZipFile" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="263" endline="265" begincolumn="15" endcolumn="13" rule="EmptyCatchBlock" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipFile" method="closeQuietly" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock" priority="3">
Avoid empty catch blocks
</violation>
<violation beginline="407" endline="407" begincolumn="17" endcolumn="33" rule="SystemPrintln" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipFile" method="finalize" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#systemprintln" priority="2">
System.err.printf is used
</violation>
<violation beginline="420" endline="436" begincolumn="26" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="438" endline="439" begincolumn="26" endcolumn="50" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="616" endline="629" begincolumn="26" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="635" endline="636" begincolumn="26" endcolumn="68" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="644" endline="653" begincolumn="26" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="660" endline="667" begincolumn="26" endcolumn="58" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="675" endline="679" begincolumn="26" endcolumn="58" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="687" endline="701" begincolumn="26" endcolumn="54" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="838" endline="847" begincolumn="26" endcolumn="53" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="915" endline="915" begincolumn="25" endcolumn="44" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipFile$BoundedInputStream" variable="addDummyByte" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'addDummyByte'
</violation>
<violation beginline="924" endline="924" begincolumn="17" endcolumn="32" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipFile$BoundedInputStream" method="read" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="938" endline="938" begincolumn="60" endcolumn="62" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipFile$BoundedInputStream" method="read" variable="len" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'len'
</violation>
<violation beginline="971" endline="973" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile$BoundedInputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="993" endline="1009" begincolumn="19" endcolumn="6" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1022" endline="1024" begincolumn="9" endcolumn="9" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipFile$Entry" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipLong.java">
<violation beginline="62" endline="62" begincolumn="5" endcolumn="77" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipLong" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="129" endline="129" begincolumn="60" endcolumn="65" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipLong" method="putLong" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="129" endline="129" begincolumn="60" endcolumn="65" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipLong" method="putLong" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="129" endline="129" begincolumn="60" endcolumn="65" rule="AvoidReassigningParameters" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipLong" method="putLong" variable="offset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#avoidreassigningparameters" priority="2">
Avoid reassigning parameters such as 'offset'
</violation>
<violation beginline="185" endline="192" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipLong" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="190" endline="190" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="ZipLong" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipOutputStream.java">
<violation beginline="19" endline="1737" begincolumn="1" endcolumn="2" rule="TooManyStaticImports" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#toomanystaticimports" priority="3">
Too many static imports may lead to messy code
</violation>
<violation beginline="111" endline="111" begincolumn="21" endcolumn="36" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="finished" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'finished'
</violation>
<violation beginline="146" endline="146" begincolumn="5" endcolumn="48" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="185" endline="185" begincolumn="21" endcolumn="54" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="hasCompressionLevelChanged" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'hasCompressionLevelChanged'
</violation>
<violation beginline="213" endline="213" begincolumn="18" endcolumn="28" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="written" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'written'
</violation>
<violation beginline="220" endline="220" begincolumn="18" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="cdOffset" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cdOffset'
</violation>
<violation beginline="227" endline="227" begincolumn="18" endcolumn="29" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="cdLength" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'cdLength'
</violation>
<violation beginline="261" endline="261" begincolumn="20" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="encoding" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'encoding'
</violation>
<violation beginline="311" endline="311" begincolumn="21" endcolumn="42" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="fallbackToUTF8" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'fallbackToUTF8'
</violation>
<violation beginline="321" endline="321" begincolumn="21" endcolumn="40" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream" variable="hasUsedZip64" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'hasUsedZip64'
</violation>
<violation beginline="346" endline="346" begincolumn="26" endcolumn="29" rule="CloseResource" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipOutputStream" method="ZipOutputStream" variable="ranf" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#closeresource" priority="3">
Ensure that resources like this RandomAccessFile object are closed after use
</violation>
<violation beginline="522" endline="522" begincolumn="17" endcolumn="39" rule="AssignmentInOperand" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipOutputStream" method="writeCentralDirectoryInChunks" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#assignmentinoperand" priority="3">
Avoid assignments in operands
</violation>
<violation beginline="1005" endline="1005" begincolumn="28" endcolumn="71" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1011" endline="1011" begincolumn="28" endcolumn="69" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1017" endline="1017" begincolumn="28" endcolumn="71" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1023" endline="1023" begincolumn="28" endcolumn="75" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1027" endline="1027" begincolumn="18" endcolumn="71" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1027" endline="1027" begincolumn="5" endcolumn="71" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1031" endline="1031" begincolumn="18" endcolumn="75" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1031" endline="1031" begincolumn="5" endcolumn="75" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1427" endline="1427" begincolumn="13" endcolumn="80" rule="PreserveStackTrace" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipOutputStream" method="getBytes" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#preservestacktrace" priority="3">
New exception is thrown in catch block, original stack trace may be lost
</violation>
<violation beginline="1655" endline="1662" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="1707" endline="1707" begincolumn="23" endcolumn="37" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1712" endline="1712" begincolumn="22" endcolumn="39" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="localDataStart" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'localDataStart'
</violation>
<violation beginline="1712" endline="1712" begincolumn="17" endcolumn="40" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1716" endline="1716" begincolumn="22" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="dataStart" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'dataStart'
</violation>
<violation beginline="1716" endline="1716" begincolumn="17" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1721" endline="1721" begincolumn="22" endcolumn="34" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="bytesRead" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'bytesRead'
</violation>
<violation beginline="1721" endline="1721" begincolumn="17" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1725" endline="1725" begincolumn="25" endcolumn="48" rule="RedundantFieldInitializer" ruleset="Performance" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="causedUseOfZip64" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_performance.html#redundantfieldinitializer" priority="3">
Avoid using redundant field initializer for 'causedUseOfZip64'
</violation>
<violation beginline="1725" endline="1725" begincolumn="17" endcolumn="49" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
<violation beginline="1734" endline="1734" begincolumn="17" endcolumn="35" rule="FieldDeclarationsShouldBeAtStartOfClass" ruleset="Code Style" package="org.apache.tools.zip" class="ZipOutputStream$CurrentEntry" variable="VariableDeclaratorId" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass" priority="3">
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipShort.java">
<violation beginline="150" endline="157" begincolumn="12" endcolumn="5" rule="CloneMethodReturnTypeMustMatchClassName" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipShort" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname" priority="3">
The return type of the clone() method must be the class name when implements Cloneable
</violation>
<violation beginline="155" endline="155" begincolumn="23" endcolumn="38" rule="AvoidThrowingRawExceptionTypes" ruleset="Design" package="org.apache.tools.zip" class="ZipShort" method="clone" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes" priority="1">
Avoid throwing raw exception types.
</violation>
</file>
<file name="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/zip/ZipUtil.java">
<violation beginline="29" endline="270" begincolumn="17" endcolumn="1" rule="AbstractClassWithoutAbstractMethod" ruleset="Best Practices" package="org.apache.tools.zip" class="ZipUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod" priority="3">
This abstract class does not have any abstract methods
</violation>
<violation beginline="74" endline="90" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="150" endline="171" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="214" endline="221" begincolumn="12" endcolumn="5" rule="ReturnEmptyArrayRatherThanNull" ruleset="Error Prone" package="org.apache.tools.zip" class="ZipUtil" method="copy" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull" priority="1">
Return an empty array rather than null.
</violation>
<violation beginline="214" endline="221" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="228" endline="230" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
<violation beginline="257" endline="269" begincolumn="5" endcolumn="5" rule="DefaultPackage" ruleset="Code Style" package="org.apache.tools.zip" class="ZipUtil" externalInfoUrl="https://pmd.github.io/pmd/pmd_rules_java_codestyle.html#defaultpackage" priority="3">
Use explicit scoping instead of the default package private level
</violation>
</file>
<error filename="/home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/RecorderEntry.java" msg="PMDException: Error while parsing /home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/RecorderEntry.java">
<![CDATA[net.sourceforge.pmd.PMDException: Error while parsing /home/shizzed/Downloads/apache-ant-1.10.5-src/apache-ant-1.10.5/src/main/org/apache/tools/ant/taskdefs/RecorderEntry.java
	at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache(SourceCodeProcessor.java:116)
	at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode(SourceCodeProcessor.java:95)
	at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode(SourceCodeProcessor.java:57)
	at net.sourceforge.pmd.processor.PmdRunnable.call(PmdRunnable.java:85)
	at net.sourceforge.pmd.processor.PmdRunnable.call(PmdRunnable.java:29)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: net.sourceforge.pmd.lang.java.ast.ParseException: Encountered " "=" "= "" at line 87, column 20.
Was expecting:
    <IDENTIFIER> ...
    
	at net.sourceforge.pmd.lang.java.ast.JavaParser.generateParseException(JavaParser.java:13324)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.jj_consume_token(JavaParser.java:13208)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.RecordDeclaration(JavaParser.java:1304)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.LocalTypeDecl(JavaParser.java:5605)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.BlockStatement(JavaParser.java:5566)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.Block(JavaParser.java:5488)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.Statement(JavaParser.java:5365)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.IfStatement(JavaParser.java:6164)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.Statement(JavaParser.java:5381)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.BlockStatement(JavaParser.java:5571)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.Block(JavaParser.java:5488)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.MethodDeclaration(JavaParser.java:2104)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.ClassOrInterfaceBodyDeclaration(JavaParser.java:1785)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.ClassOrInterfaceBody(JavaParser.java:1738)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.ClassOrInterfaceDeclaration(JavaParser.java:879)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.TypeDeclaration(JavaParser.java:781)
	at net.sourceforge.pmd.lang.java.ast.JavaParser.CompilationUnit(JavaParser.java:501)
	at net.sourceforge.pmd.lang.java.AbstractJavaParser.parse(AbstractJavaParser.java:62)
	at net.sourceforge.pmd.SourceCodeProcessor.parse(SourceCodeProcessor.java:127)
	at net.sourceforge.pmd.SourceCodeProcessor.processSource(SourceCodeProcessor.java:191)
	at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache(SourceCodeProcessor.java:113)
	... 10 more
]]>
</error>
</pmd>
